
lab1exc2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000754  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000860  08000868  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000860  08000860  00010860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000864  08000864  00010864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010868  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000868  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000001c  08000868  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001e1b  00000000  00000000  00010891  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000092c  00000000  00000000  000126ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000320  00000000  00000000  00012fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  000132f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000146c  00000000  00000000  000135a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00000d19  00000000  00000000  00014a0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00015725  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00000b64  00000000  00000000  000157a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000848 	.word	0x08000848

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000848 	.word	0x08000848

0800014c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000154:	2300      	movs	r3, #0
 8000156:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000158:	4b34      	ldr	r3, [pc, #208]	; (800022c <EXTI_Init+0xe0>)
 800015a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800015c:	687b      	ldr	r3, [r7, #4]
 800015e:	799b      	ldrb	r3, [r3, #6]
 8000160:	2b00      	cmp	r3, #0
 8000162:	d04f      	beq.n	8000204 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8000164:	4931      	ldr	r1, [pc, #196]	; (800022c <EXTI_Init+0xe0>)
 8000166:	4b31      	ldr	r3, [pc, #196]	; (800022c <EXTI_Init+0xe0>)
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	681b      	ldr	r3, [r3, #0]
 800016e:	43db      	mvns	r3, r3
 8000170:	4013      	ands	r3, r2
 8000172:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8000174:	492d      	ldr	r1, [pc, #180]	; (800022c <EXTI_Init+0xe0>)
 8000176:	4b2d      	ldr	r3, [pc, #180]	; (800022c <EXTI_Init+0xe0>)
 8000178:	685a      	ldr	r2, [r3, #4]
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	43db      	mvns	r3, r3
 8000180:	4013      	ands	r3, r2
 8000182:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000184:	687b      	ldr	r3, [r7, #4]
 8000186:	791b      	ldrb	r3, [r3, #4]
 8000188:	461a      	mov	r2, r3
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	4413      	add	r3, r2
 800018e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000190:	68fb      	ldr	r3, [r7, #12]
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	6811      	ldr	r1, [r2, #0]
 8000196:	687a      	ldr	r2, [r7, #4]
 8000198:	6812      	ldr	r2, [r2, #0]
 800019a:	430a      	orrs	r2, r1
 800019c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800019e:	4923      	ldr	r1, [pc, #140]	; (800022c <EXTI_Init+0xe0>)
 80001a0:	4b22      	ldr	r3, [pc, #136]	; (800022c <EXTI_Init+0xe0>)
 80001a2:	689a      	ldr	r2, [r3, #8]
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	43db      	mvns	r3, r3
 80001aa:	4013      	ands	r3, r2
 80001ac:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80001ae:	491f      	ldr	r1, [pc, #124]	; (800022c <EXTI_Init+0xe0>)
 80001b0:	4b1e      	ldr	r3, [pc, #120]	; (800022c <EXTI_Init+0xe0>)
 80001b2:	68da      	ldr	r2, [r3, #12]
 80001b4:	687b      	ldr	r3, [r7, #4]
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	43db      	mvns	r3, r3
 80001ba:	4013      	ands	r3, r2
 80001bc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	795b      	ldrb	r3, [r3, #5]
 80001c2:	2b10      	cmp	r3, #16
 80001c4:	d10e      	bne.n	80001e4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80001c6:	4919      	ldr	r1, [pc, #100]	; (800022c <EXTI_Init+0xe0>)
 80001c8:	4b18      	ldr	r3, [pc, #96]	; (800022c <EXTI_Init+0xe0>)
 80001ca:	689a      	ldr	r2, [r3, #8]
 80001cc:	687b      	ldr	r3, [r7, #4]
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4313      	orrs	r3, r2
 80001d2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80001d4:	4915      	ldr	r1, [pc, #84]	; (800022c <EXTI_Init+0xe0>)
 80001d6:	4b15      	ldr	r3, [pc, #84]	; (800022c <EXTI_Init+0xe0>)
 80001d8:	68da      	ldr	r2, [r3, #12]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	4313      	orrs	r3, r2
 80001e0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80001e2:	e01d      	b.n	8000220 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80001e4:	4b11      	ldr	r3, [pc, #68]	; (800022c <EXTI_Init+0xe0>)
 80001e6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	795b      	ldrb	r3, [r3, #5]
 80001ec:	461a      	mov	r2, r3
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	4413      	add	r3, r2
 80001f2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	68fa      	ldr	r2, [r7, #12]
 80001f8:	6811      	ldr	r1, [r2, #0]
 80001fa:	687a      	ldr	r2, [r7, #4]
 80001fc:	6812      	ldr	r2, [r2, #0]
 80001fe:	430a      	orrs	r2, r1
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	e00d      	b.n	8000220 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	791b      	ldrb	r3, [r3, #4]
 8000208:	461a      	mov	r2, r3
 800020a:	68fb      	ldr	r3, [r7, #12]
 800020c:	4413      	add	r3, r2
 800020e:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	68fa      	ldr	r2, [r7, #12]
 8000214:	6811      	ldr	r1, [r2, #0]
 8000216:	687a      	ldr	r2, [r7, #4]
 8000218:	6812      	ldr	r2, [r2, #0]
 800021a:	43d2      	mvns	r2, r2
 800021c:	400a      	ands	r2, r1
 800021e:	601a      	str	r2, [r3, #0]
}
 8000220:	bf00      	nop
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	40010400 	.word	0x40010400

08000230 <EXTI_GetFlagStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
FlagStatus EXTI_GetFlagStatus(uint32_t EXTI_Line)
{
 8000230:	b480      	push	{r7}
 8000232:	b085      	sub	sp, #20
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000238:	2300      	movs	r3, #0
 800023a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  if ((EXTI->PR & EXTI_Line) != (uint32_t)RESET)
 800023c:	4b08      	ldr	r3, [pc, #32]	; (8000260 <EXTI_GetFlagStatus+0x30>)
 800023e:	695a      	ldr	r2, [r3, #20]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	4013      	ands	r3, r2
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <EXTI_GetFlagStatus+0x1e>
  {
    bitstatus = SET;
 8000248:	2301      	movs	r3, #1
 800024a:	73fb      	strb	r3, [r7, #15]
 800024c:	e001      	b.n	8000252 <EXTI_GetFlagStatus+0x22>
  }
  else
  {
    bitstatus = RESET;
 800024e:	2300      	movs	r3, #0
 8000250:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000252:	7bfb      	ldrb	r3, [r7, #15]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40010400 	.word	0x40010400

08000264 <EXTI_ClearFlag>:
  * @param  EXTI_Line: specifies the EXTI lines flags to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearFlag(uint32_t EXTI_Line)
{
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800026c:	4a03      	ldr	r2, [pc, #12]	; (800027c <EXTI_ClearFlag+0x18>)
 800026e:	687b      	ldr	r3, [r7, #4]
 8000270:	6153      	str	r3, [r2, #20]
}
 8000272:	bf00      	nop
 8000274:	370c      	adds	r7, #12
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr
 800027c:	40010400 	.word	0x40010400

08000280 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800028a:	2300      	movs	r3, #0
 800028c:	61fb      	str	r3, [r7, #28]
 800028e:	2300      	movs	r3, #0
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	2300      	movs	r3, #0
 8000294:	61bb      	str	r3, [r7, #24]
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
 800029e:	2300      	movs	r3, #0
 80002a0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80002a2:	683b      	ldr	r3, [r7, #0]
 80002a4:	78db      	ldrb	r3, [r3, #3]
 80002a6:	f003 030f 	and.w	r3, r3, #15
 80002aa:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80002ac:	683b      	ldr	r3, [r7, #0]
 80002ae:	78db      	ldrb	r3, [r3, #3]
 80002b0:	f003 0310 	and.w	r3, r3, #16
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d005      	beq.n	80002c4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80002b8:	683b      	ldr	r3, [r7, #0]
 80002ba:	789b      	ldrb	r3, [r3, #2]
 80002bc:	461a      	mov	r2, r3
 80002be:	69fb      	ldr	r3, [r7, #28]
 80002c0:	4313      	orrs	r3, r2
 80002c2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	881b      	ldrh	r3, [r3, #0]
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d044      	beq.n	8000358 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	61bb      	str	r3, [r7, #24]
 80002d8:	e038      	b.n	800034c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80002da:	2201      	movs	r2, #1
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	fa02 f303 	lsl.w	r3, r2, r3
 80002e2:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	881b      	ldrh	r3, [r3, #0]
 80002e8:	461a      	mov	r2, r3
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	4013      	ands	r3, r2
 80002ee:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80002f0:	693a      	ldr	r2, [r7, #16]
 80002f2:	68fb      	ldr	r3, [r7, #12]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	d126      	bne.n	8000346 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80002f8:	69bb      	ldr	r3, [r7, #24]
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80002fe:	220f      	movs	r2, #15
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	43db      	mvns	r3, r3
 800030c:	697a      	ldr	r2, [r7, #20]
 800030e:	4013      	ands	r3, r2
 8000310:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000312:	69fa      	ldr	r2, [r7, #28]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	fa02 f303 	lsl.w	r3, r2, r3
 800031a:	697a      	ldr	r2, [r7, #20]
 800031c:	4313      	orrs	r3, r2
 800031e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	78db      	ldrb	r3, [r3, #3]
 8000324:	2b28      	cmp	r3, #40	; 0x28
 8000326:	d105      	bne.n	8000334 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000328:	2201      	movs	r2, #1
 800032a:	69bb      	ldr	r3, [r7, #24]
 800032c:	409a      	lsls	r2, r3
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	615a      	str	r2, [r3, #20]
 8000332:	e008      	b.n	8000346 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000334:	683b      	ldr	r3, [r7, #0]
 8000336:	78db      	ldrb	r3, [r3, #3]
 8000338:	2b48      	cmp	r3, #72	; 0x48
 800033a:	d104      	bne.n	8000346 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800033c:	2201      	movs	r2, #1
 800033e:	69bb      	ldr	r3, [r7, #24]
 8000340:	409a      	lsls	r2, r3
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000346:	69bb      	ldr	r3, [r7, #24]
 8000348:	3301      	adds	r3, #1
 800034a:	61bb      	str	r3, [r7, #24]
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	2b07      	cmp	r3, #7
 8000350:	d9c3      	bls.n	80002da <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	697a      	ldr	r2, [r7, #20]
 8000356:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	881b      	ldrh	r3, [r3, #0]
 800035c:	2bff      	cmp	r3, #255	; 0xff
 800035e:	d946      	bls.n	80003ee <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	685b      	ldr	r3, [r3, #4]
 8000364:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000366:	2300      	movs	r3, #0
 8000368:	61bb      	str	r3, [r7, #24]
 800036a:	e03a      	b.n	80003e2 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	3308      	adds	r3, #8
 8000370:	2201      	movs	r2, #1
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000378:	683b      	ldr	r3, [r7, #0]
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	461a      	mov	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	4013      	ands	r3, r2
 8000382:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000384:	693a      	ldr	r2, [r7, #16]
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	429a      	cmp	r2, r3
 800038a:	d127      	bne.n	80003dc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800038c:	69bb      	ldr	r3, [r7, #24]
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000392:	220f      	movs	r2, #15
 8000394:	68fb      	ldr	r3, [r7, #12]
 8000396:	fa02 f303 	lsl.w	r3, r2, r3
 800039a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	43db      	mvns	r3, r3
 80003a0:	697a      	ldr	r2, [r7, #20]
 80003a2:	4013      	ands	r3, r2
 80003a4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003a6:	69fa      	ldr	r2, [r7, #28]
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	fa02 f303 	lsl.w	r3, r2, r3
 80003ae:	697a      	ldr	r2, [r7, #20]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	78db      	ldrb	r3, [r3, #3]
 80003b8:	2b28      	cmp	r3, #40	; 0x28
 80003ba:	d105      	bne.n	80003c8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003bc:	69bb      	ldr	r3, [r7, #24]
 80003be:	3308      	adds	r3, #8
 80003c0:	2201      	movs	r2, #1
 80003c2:	409a      	lsls	r2, r3
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003c8:	683b      	ldr	r3, [r7, #0]
 80003ca:	78db      	ldrb	r3, [r3, #3]
 80003cc:	2b48      	cmp	r3, #72	; 0x48
 80003ce:	d105      	bne.n	80003dc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80003d0:	69bb      	ldr	r3, [r7, #24]
 80003d2:	3308      	adds	r3, #8
 80003d4:	2201      	movs	r2, #1
 80003d6:	409a      	lsls	r2, r3
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003dc:	69bb      	ldr	r3, [r7, #24]
 80003de:	3301      	adds	r3, #1
 80003e0:	61bb      	str	r3, [r7, #24]
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	2b07      	cmp	r3, #7
 80003e6:	d9c1      	bls.n	800036c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	697a      	ldr	r2, [r7, #20]
 80003ec:	605a      	str	r2, [r3, #4]
  }
}
 80003ee:	bf00      	nop
 80003f0:	3724      	adds	r7, #36	; 0x24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bc80      	pop	{r7}
 80003f6:	4770      	bx	lr

080003f8 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b085      	sub	sp, #20
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	460b      	mov	r3, r1
 8000402:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000404:	2300      	movs	r3, #0
 8000406:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	689a      	ldr	r2, [r3, #8]
 800040c:	887b      	ldrh	r3, [r7, #2]
 800040e:	4013      	ands	r3, r2
 8000410:	2b00      	cmp	r3, #0
 8000412:	d002      	beq.n	800041a <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000414:	2301      	movs	r3, #1
 8000416:	73fb      	strb	r3, [r7, #15]
 8000418:	e001      	b.n	800041e <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800041e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000420:	4618      	mov	r0, r3
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr

0800042a <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
 8000432:	460b      	mov	r3, r1
 8000434:	807b      	strh	r3, [r7, #2]
 8000436:	4613      	mov	r3, r2
 8000438:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 800043a:	787b      	ldrb	r3, [r7, #1]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d003      	beq.n	8000448 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000440:	887a      	ldrh	r2, [r7, #2]
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8000446:	e002      	b.n	800044e <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8000448:	887a      	ldrh	r2, [r7, #2]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	615a      	str	r2, [r3, #20]
}
 800044e:	bf00      	nop
 8000450:	370c      	adds	r7, #12
 8000452:	46bd      	mov	sp, r7
 8000454:	bc80      	pop	{r7}
 8000456:	4770      	bx	lr

08000458 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 8000458:	b490      	push	{r4, r7}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	460a      	mov	r2, r1
 8000462:	71fb      	strb	r3, [r7, #7]
 8000464:	4613      	mov	r3, r2
 8000466:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 800046c:	79bb      	ldrb	r3, [r7, #6]
 800046e:	f003 0303 	and.w	r3, r3, #3
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	220f      	movs	r2, #15
 8000476:	fa02 f303 	lsl.w	r3, r2, r3
 800047a:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 800047c:	4916      	ldr	r1, [pc, #88]	; (80004d8 <GPIO_EXTILineConfig+0x80>)
 800047e:	79bb      	ldrb	r3, [r7, #6]
 8000480:	089b      	lsrs	r3, r3, #2
 8000482:	b2db      	uxtb	r3, r3
 8000484:	4618      	mov	r0, r3
 8000486:	4a14      	ldr	r2, [pc, #80]	; (80004d8 <GPIO_EXTILineConfig+0x80>)
 8000488:	79bb      	ldrb	r3, [r7, #6]
 800048a:	089b      	lsrs	r3, r3, #2
 800048c:	b2db      	uxtb	r3, r3
 800048e:	3302      	adds	r3, #2
 8000490:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000494:	68fb      	ldr	r3, [r7, #12]
 8000496:	43db      	mvns	r3, r3
 8000498:	401a      	ands	r2, r3
 800049a:	1c83      	adds	r3, r0, #2
 800049c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 80004a0:	480d      	ldr	r0, [pc, #52]	; (80004d8 <GPIO_EXTILineConfig+0x80>)
 80004a2:	79bb      	ldrb	r3, [r7, #6]
 80004a4:	089b      	lsrs	r3, r3, #2
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	461c      	mov	r4, r3
 80004aa:	4a0b      	ldr	r2, [pc, #44]	; (80004d8 <GPIO_EXTILineConfig+0x80>)
 80004ac:	79bb      	ldrb	r3, [r7, #6]
 80004ae:	089b      	lsrs	r3, r3, #2
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	3302      	adds	r3, #2
 80004b4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004b8:	79f9      	ldrb	r1, [r7, #7]
 80004ba:	79bb      	ldrb	r3, [r7, #6]
 80004bc:	f003 0303 	and.w	r3, r3, #3
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	fa01 f303 	lsl.w	r3, r1, r3
 80004c6:	431a      	orrs	r2, r3
 80004c8:	1ca3      	adds	r3, r4, #2
 80004ca:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80004ce:	bf00      	nop
 80004d0:	3710      	adds	r7, #16
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc90      	pop	{r4, r7}
 80004d6:	4770      	bx	lr
 80004d8:	40010000 	.word	0x40010000

080004dc <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004e8:	78fb      	ldrb	r3, [r7, #3]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d006      	beq.n	80004fc <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004ee:	4909      	ldr	r1, [pc, #36]	; (8000514 <RCC_APB2PeriphClockCmd+0x38>)
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <RCC_APB2PeriphClockCmd+0x38>)
 80004f2:	699a      	ldr	r2, [r3, #24]
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4313      	orrs	r3, r2
 80004f8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004fa:	e006      	b.n	800050a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004fc:	4905      	ldr	r1, [pc, #20]	; (8000514 <RCC_APB2PeriphClockCmd+0x38>)
 80004fe:	4b05      	ldr	r3, [pc, #20]	; (8000514 <RCC_APB2PeriphClockCmd+0x38>)
 8000500:	699a      	ldr	r2, [r3, #24]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	43db      	mvns	r3, r3
 8000506:	4013      	ands	r3, r2
 8000508:	618b      	str	r3, [r1, #24]
}
 800050a:	bf00      	nop
 800050c:	370c      	adds	r7, #12
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000

08000518 <Conf_GPIO>:
#include "conf_gpio.h"

void Conf_GPIO(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800051e:	2101      	movs	r1, #1
 8000520:	2004      	movs	r0, #4
 8000522:	f7ff ffdb 	bl	80004dc <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000526:	2101      	movs	r1, #1
 8000528:	2008      	movs	r0, #8
 800052a:	f7ff ffd7 	bl	80004dc <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef portaA;
  portaA.GPIO_Mode = GPIO_Mode_Out_PP;
 800052e:	2310      	movs	r3, #16
 8000530:	71fb      	strb	r3, [r7, #7]
  portaA.GPIO_Pin = GPIO_Pin_0;
 8000532:	2301      	movs	r3, #1
 8000534:	80bb      	strh	r3, [r7, #4]
  portaA.GPIO_Speed = GPIO_Speed_2MHz;
 8000536:	2302      	movs	r3, #2
 8000538:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &portaA);
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4809      	ldr	r0, [pc, #36]	; (8000564 <Conf_GPIO+0x4c>)
 8000540:	f7ff fe9e 	bl	8000280 <GPIO_Init>

  GPIO_InitTypeDef portaB;
  portaB.GPIO_Mode = GPIO_Mode_IPD;
 8000544:	2328      	movs	r3, #40	; 0x28
 8000546:	70fb      	strb	r3, [r7, #3]
  portaB.GPIO_Pin = GPIO_Pin_0;
 8000548:	2301      	movs	r3, #1
 800054a:	803b      	strh	r3, [r7, #0]
  portaB.GPIO_Speed = GPIO_Speed_2MHz;
 800054c:	2302      	movs	r3, #2
 800054e:	70bb      	strb	r3, [r7, #2]
  GPIO_Init(GPIOB, &portaB);
 8000550:	463b      	mov	r3, r7
 8000552:	4619      	mov	r1, r3
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <Conf_GPIO+0x50>)
 8000556:	f7ff fe93 	bl	8000280 <GPIO_Init>
}
 800055a:	bf00      	nop
 800055c:	3708      	adds	r7, #8
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	40010800 	.word	0x40010800
 8000568:	40010c00 	.word	0x40010c00

0800056c <main>:
#include "conf_gpio.h"

void Conf_EXTI(void);

int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  Conf_EXTI();
 8000570:	f000 f81c 	bl	80005ac <Conf_EXTI>
  Conf_GPIO();
 8000574:	f7ff ffd0 	bl	8000518 <Conf_GPIO>

  while(1)
  {
    if (EXTI_GetFlagStatus(EXTI_Line0))
 8000578:	2001      	movs	r0, #1
 800057a:	f7ff fe59 	bl	8000230 <EXTI_GetFlagStatus>
 800057e:	4603      	mov	r3, r0
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0f9      	beq.n	8000578 <main+0xc>
    {
      GPIO_WriteBit(GPIOA, GPIO_Pin_0,
        GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0)^1);
 8000584:	2101      	movs	r1, #1
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <main+0x3c>)
 8000588:	f7ff ff36 	bl	80003f8 <GPIO_ReadInputDataBit>
 800058c:	4603      	mov	r3, r0
      GPIO_WriteBit(GPIOA, GPIO_Pin_0,
 800058e:	f083 0301 	eor.w	r3, r3, #1
 8000592:	b2db      	uxtb	r3, r3
 8000594:	461a      	mov	r2, r3
 8000596:	2101      	movs	r1, #1
 8000598:	4803      	ldr	r0, [pc, #12]	; (80005a8 <main+0x3c>)
 800059a:	f7ff ff46 	bl	800042a <GPIO_WriteBit>

      EXTI_ClearFlag(EXTI_Line0);
 800059e:	2001      	movs	r0, #1
 80005a0:	f7ff fe60 	bl	8000264 <EXTI_ClearFlag>
    if (EXTI_GetFlagStatus(EXTI_Line0))
 80005a4:	e7e8      	b.n	8000578 <main+0xc>
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800

080005ac <Conf_EXTI>:

  return 0;
}

void Conf_EXTI(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f7ff ff91 	bl	80004dc <RCC_APB2PeriphClockCmd>

  GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, GPIO_PinSource0);
 80005ba:	2100      	movs	r1, #0
 80005bc:	2001      	movs	r0, #1
 80005be:	f7ff ff4b 	bl	8000458 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef portaB;
  portaB.EXTI_Line = EXTI_Line0;
 80005c2:	2301      	movs	r3, #1
 80005c4:	603b      	str	r3, [r7, #0]
  portaB.EXTI_LineCmd = ENABLE;
 80005c6:	2301      	movs	r3, #1
 80005c8:	71bb      	strb	r3, [r7, #6]
  portaB.EXTI_Mode = EXTI_Mode_Interrupt;
 80005ca:	2300      	movs	r3, #0
 80005cc:	713b      	strb	r3, [r7, #4]
  portaB.EXTI_Trigger = EXTI_Trigger_Rising;
 80005ce:	2308      	movs	r3, #8
 80005d0:	717b      	strb	r3, [r7, #5]
  EXTI_Init(&portaB);
 80005d2:	463b      	mov	r3, r7
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdb9 	bl	800014c <EXTI_Init>
}
 80005da:	bf00      	nop
 80005dc:	3708      	adds	r7, #8
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
	...

080005e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800061c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80005e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80005ea:	e003      	b.n	80005f4 <LoopCopyDataInit>

080005ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80005ec:	4b0c      	ldr	r3, [pc, #48]	; (8000620 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80005ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80005f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80005f2:	3104      	adds	r1, #4

080005f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80005f4:	480b      	ldr	r0, [pc, #44]	; (8000624 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80005f6:	4b0c      	ldr	r3, [pc, #48]	; (8000628 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80005f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80005fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80005fc:	d3f6      	bcc.n	80005ec <CopyDataInit>
	ldr	r2, =_sbss
 80005fe:	4a0b      	ldr	r2, [pc, #44]	; (800062c <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000600:	e002      	b.n	8000608 <LoopFillZerobss>

08000602 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000602:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000604:	f842 3b04 	str.w	r3, [r2], #4

08000608 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000608:	4b09      	ldr	r3, [pc, #36]	; (8000630 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800060a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800060c:	d3f9      	bcc.n	8000602 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060e:	f000 f83d 	bl	800068c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f000 f8f5 	bl	8000800 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000616:	f7ff ffa9 	bl	800056c <main>
	bx	lr
 800061a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800061c:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000620:	08000868 	.word	0x08000868
	ldr	r0, =_sdata
 8000624:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000628:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 800062c:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000630:	2000001c 	.word	0x2000001c

08000634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000634:	e7fe      	b.n	8000634 <ADC1_2_IRQHandler>

08000636 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000646:	e7fe      	b.n	8000646 <HardFault_Handler+0x4>

08000648 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800064c:	e7fe      	b.n	800064c <MemManage_Handler+0x4>

0800064e <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000652:	e7fe      	b.n	8000652 <BusFault_Handler+0x4>

08000654 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000658:	e7fe      	b.n	8000658 <UsageFault_Handler+0x4>

0800065a <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr

08000666 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000666:	b480      	push	{r7}
 8000668:	af00      	add	r7, sp, #0
}
 800066a:	bf00      	nop
 800066c:	46bd      	mov	sp, r7
 800066e:	bc80      	pop	{r7}
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	bc80      	pop	{r7}
 800067c:	4770      	bx	lr

0800067e <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800067e:	b480      	push	{r7}
 8000680:	af00      	add	r7, sp, #0
}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
	...

0800068c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000690:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <SystemInit+0x5c>)
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <SystemInit+0x5c>)
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	f043 0301 	orr.w	r3, r3, #1
 800069a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 800069c:	4912      	ldr	r1, [pc, #72]	; (80006e8 <SystemInit+0x5c>)
 800069e:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <SystemInit+0x5c>)
 80006a0:	685a      	ldr	r2, [r3, #4]
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <SystemInit+0x60>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80006a8:	4a0f      	ldr	r2, [pc, #60]	; (80006e8 <SystemInit+0x5c>)
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <SystemInit+0x5c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80006b8:	4a0b      	ldr	r2, [pc, #44]	; (80006e8 <SystemInit+0x5c>)
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <SystemInit+0x5c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80006c4:	4a08      	ldr	r2, [pc, #32]	; (80006e8 <SystemInit+0x5c>)
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <SystemInit+0x5c>)
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80006ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <SystemInit+0x5c>)
 80006d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80006d6:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80006d8:	f000 f80c 	bl	80006f4 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80006dc:	4b04      	ldr	r3, [pc, #16]	; (80006f0 <SystemInit+0x64>)
 80006de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80006e2:	609a      	str	r2, [r3, #8]
#endif 
}
 80006e4:	bf00      	nop
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	40021000 	.word	0x40021000
 80006ec:	f8ff0000 	.word	0xf8ff0000
 80006f0:	e000ed00 	.word	0xe000ed00

080006f4 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80006f8:	f000 f802 	bl	8000700 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}

08000700 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	2300      	movs	r3, #0
 800070c:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800070e:	4a3a      	ldr	r2, [pc, #232]	; (80007f8 <SetSysClockTo72+0xf8>)
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <SetSysClockTo72+0xf8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000718:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800071a:	4b37      	ldr	r3, [pc, #220]	; (80007f8 <SetSysClockTo72+0xf8>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000722:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3301      	adds	r3, #1
 8000728:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800072a:	683b      	ldr	r3, [r7, #0]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d103      	bne.n	8000738 <SetSysClockTo72+0x38>
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000736:	d1f0      	bne.n	800071a <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000738:	4b2f      	ldr	r3, [pc, #188]	; (80007f8 <SetSysClockTo72+0xf8>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d002      	beq.n	800074a <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000744:	2301      	movs	r3, #1
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	e001      	b.n	800074e <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800074a:	2300      	movs	r3, #0
 800074c:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d14b      	bne.n	80007ec <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000754:	4a29      	ldr	r2, [pc, #164]	; (80007fc <SetSysClockTo72+0xfc>)
 8000756:	4b29      	ldr	r3, [pc, #164]	; (80007fc <SetSysClockTo72+0xfc>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f043 0310 	orr.w	r3, r3, #16
 800075e:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000760:	4a26      	ldr	r2, [pc, #152]	; (80007fc <SetSysClockTo72+0xfc>)
 8000762:	4b26      	ldr	r3, [pc, #152]	; (80007fc <SetSysClockTo72+0xfc>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f023 0303 	bic.w	r3, r3, #3
 800076a:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 800076c:	4a23      	ldr	r2, [pc, #140]	; (80007fc <SetSysClockTo72+0xfc>)
 800076e:	4b23      	ldr	r3, [pc, #140]	; (80007fc <SetSysClockTo72+0xfc>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0302 	orr.w	r3, r3, #2
 8000776:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000778:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <SetSysClockTo72+0xf8>)
 800077a:	4b1f      	ldr	r3, [pc, #124]	; (80007f8 <SetSysClockTo72+0xf8>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000780:	4a1d      	ldr	r2, [pc, #116]	; (80007f8 <SetSysClockTo72+0xf8>)
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <SetSysClockTo72+0xf8>)
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000788:	4a1b      	ldr	r2, [pc, #108]	; (80007f8 <SetSysClockTo72+0xf8>)
 800078a:	4b1b      	ldr	r3, [pc, #108]	; (80007f8 <SetSysClockTo72+0xf8>)
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000792:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000794:	4a18      	ldr	r2, [pc, #96]	; (80007f8 <SetSysClockTo72+0xf8>)
 8000796:	4b18      	ldr	r3, [pc, #96]	; (80007f8 <SetSysClockTo72+0xf8>)
 8000798:	685b      	ldr	r3, [r3, #4]
 800079a:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800079e:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80007a0:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80007aa:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80007ac:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007ae:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007b6:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80007b8:	bf00      	nop
 80007ba:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f9      	beq.n	80007ba <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80007c6:	4a0c      	ldr	r2, [pc, #48]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007c8:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	f023 0303 	bic.w	r3, r3, #3
 80007d0:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80007d2:	4a09      	ldr	r2, [pc, #36]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007d4:	4b08      	ldr	r3, [pc, #32]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80007de:	bf00      	nop
 80007e0:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <SetSysClockTo72+0xf8>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 030c 	and.w	r3, r3, #12
 80007e8:	2b08      	cmp	r3, #8
 80007ea:	d1f9      	bne.n	80007e0 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bc80      	pop	{r7}
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	40022000 	.word	0x40022000

08000800 <__libc_init_array>:
 8000800:	b570      	push	{r4, r5, r6, lr}
 8000802:	2500      	movs	r5, #0
 8000804:	4e0c      	ldr	r6, [pc, #48]	; (8000838 <__libc_init_array+0x38>)
 8000806:	4c0d      	ldr	r4, [pc, #52]	; (800083c <__libc_init_array+0x3c>)
 8000808:	1ba4      	subs	r4, r4, r6
 800080a:	10a4      	asrs	r4, r4, #2
 800080c:	42a5      	cmp	r5, r4
 800080e:	d109      	bne.n	8000824 <__libc_init_array+0x24>
 8000810:	f000 f81a 	bl	8000848 <_init>
 8000814:	2500      	movs	r5, #0
 8000816:	4e0a      	ldr	r6, [pc, #40]	; (8000840 <__libc_init_array+0x40>)
 8000818:	4c0a      	ldr	r4, [pc, #40]	; (8000844 <__libc_init_array+0x44>)
 800081a:	1ba4      	subs	r4, r4, r6
 800081c:	10a4      	asrs	r4, r4, #2
 800081e:	42a5      	cmp	r5, r4
 8000820:	d105      	bne.n	800082e <__libc_init_array+0x2e>
 8000822:	bd70      	pop	{r4, r5, r6, pc}
 8000824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000828:	4798      	blx	r3
 800082a:	3501      	adds	r5, #1
 800082c:	e7ee      	b.n	800080c <__libc_init_array+0xc>
 800082e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000832:	4798      	blx	r3
 8000834:	3501      	adds	r5, #1
 8000836:	e7f2      	b.n	800081e <__libc_init_array+0x1e>
 8000838:	08000860 	.word	0x08000860
 800083c:	08000860 	.word	0x08000860
 8000840:	08000860 	.word	0x08000860
 8000844:	08000864 	.word	0x08000864

08000848 <_init>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	bf00      	nop
 800084c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800084e:	bc08      	pop	{r3}
 8000850:	469e      	mov	lr, r3
 8000852:	4770      	bx	lr

08000854 <_fini>:
 8000854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000856:	bf00      	nop
 8000858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800085a:	bc08      	pop	{r3}
 800085c:	469e      	mov	lr, r3
 800085e:	4770      	bx	lr
