
lab12exc3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080014c0  080014c0  000114c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080014ec  080014ec  000114ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080014f0  080014f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000054  20000000  080014f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000060  20000054  08001548  00020054  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000b4  08001548  000200b4  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
  9 .debug_info   000071b8  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000013a0  00000000  00000000  00027235  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000007c8  00000000  00000000  000285d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000700  00000000  00000000  00028da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002db5  00000000  00000000  000294a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002697  00000000  00000000  0002c255  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002e8ec  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002140  00000000  00000000  0002e968  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000054 	.word	0x20000054
 8000128:	00000000 	.word	0x00000000
 800012c:	080014a8 	.word	0x080014a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000058 	.word	0x20000058
 8000148:	080014a8 	.word	0x080014a8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000160:	b480      	push	{r7}
 8000162:	b087      	sub	sp, #28
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000168:	2300      	movs	r3, #0
 800016a:	617b      	str	r3, [r7, #20]
 800016c:	2300      	movs	r3, #0
 800016e:	613b      	str	r3, [r7, #16]
 8000170:	230f      	movs	r3, #15
 8000172:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000174:	687b      	ldr	r3, [r7, #4]
 8000176:	78db      	ldrb	r3, [r3, #3]
 8000178:	2b00      	cmp	r3, #0
 800017a:	d03a      	beq.n	80001f2 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 800017c:	4b27      	ldr	r3, [pc, #156]	; (800021c <NVIC_Init+0xbc>)
 800017e:	68db      	ldr	r3, [r3, #12]
 8000180:	43db      	mvns	r3, r3
 8000182:	0a1b      	lsrs	r3, r3, #8
 8000184:	f003 0307 	and.w	r3, r3, #7
 8000188:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 800018a:	697b      	ldr	r3, [r7, #20]
 800018c:	f1c3 0304 	rsb	r3, r3, #4
 8000190:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	697b      	ldr	r3, [r7, #20]
 8000196:	fa22 f303 	lsr.w	r3, r2, r3
 800019a:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	785b      	ldrb	r3, [r3, #1]
 80001a0:	461a      	mov	r2, r3
 80001a2:	693b      	ldr	r3, [r7, #16]
 80001a4:	fa02 f303 	lsl.w	r3, r2, r3
 80001a8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	789b      	ldrb	r3, [r3, #2]
 80001ae:	461a      	mov	r2, r3
 80001b0:	68fb      	ldr	r3, [r7, #12]
 80001b2:	4013      	ands	r3, r2
 80001b4:	697a      	ldr	r2, [r7, #20]
 80001b6:	4313      	orrs	r3, r2
 80001b8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001ba:	697b      	ldr	r3, [r7, #20]
 80001bc:	011b      	lsls	r3, r3, #4
 80001be:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001c0:	4a17      	ldr	r2, [pc, #92]	; (8000220 <NVIC_Init+0xc0>)
 80001c2:	687b      	ldr	r3, [r7, #4]
 80001c4:	781b      	ldrb	r3, [r3, #0]
 80001c6:	6979      	ldr	r1, [r7, #20]
 80001c8:	b2c9      	uxtb	r1, r1
 80001ca:	4413      	add	r3, r2
 80001cc:	460a      	mov	r2, r1
 80001ce:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d2:	4a13      	ldr	r2, [pc, #76]	; (8000220 <NVIC_Init+0xc0>)
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	781b      	ldrb	r3, [r3, #0]
 80001d8:	095b      	lsrs	r3, r3, #5
 80001da:	b2db      	uxtb	r3, r3
 80001dc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	f003 031f 	and.w	r3, r3, #31
 80001e6:	2101      	movs	r1, #1
 80001e8:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001ec:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001f0:	e00f      	b.n	8000212 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f2:	490b      	ldr	r1, [pc, #44]	; (8000220 <NVIC_Init+0xc0>)
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	781b      	ldrb	r3, [r3, #0]
 80001f8:	095b      	lsrs	r3, r3, #5
 80001fa:	b2db      	uxtb	r3, r3
 80001fc:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	f003 031f 	and.w	r3, r3, #31
 8000206:	2201      	movs	r2, #1
 8000208:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800020a:	f100 0320 	add.w	r3, r0, #32
 800020e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000212:	bf00      	nop
 8000214:	371c      	adds	r7, #28
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	e000ed00 	.word	0xe000ed00
 8000220:	e000e100 	.word	0xe000e100

08000224 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000224:	b480      	push	{r7}
 8000226:	b085      	sub	sp, #20
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 800022c:	2300      	movs	r3, #0
 800022e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000230:	4b34      	ldr	r3, [pc, #208]	; (8000304 <EXTI_Init+0xe0>)
 8000232:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	799b      	ldrb	r3, [r3, #6]
 8000238:	2b00      	cmp	r3, #0
 800023a:	d04f      	beq.n	80002dc <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 800023c:	4931      	ldr	r1, [pc, #196]	; (8000304 <EXTI_Init+0xe0>)
 800023e:	4b31      	ldr	r3, [pc, #196]	; (8000304 <EXTI_Init+0xe0>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	43db      	mvns	r3, r3
 8000248:	4013      	ands	r3, r2
 800024a:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 800024c:	492d      	ldr	r1, [pc, #180]	; (8000304 <EXTI_Init+0xe0>)
 800024e:	4b2d      	ldr	r3, [pc, #180]	; (8000304 <EXTI_Init+0xe0>)
 8000250:	685a      	ldr	r2, [r3, #4]
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	43db      	mvns	r3, r3
 8000258:	4013      	ands	r3, r2
 800025a:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	791b      	ldrb	r3, [r3, #4]
 8000260:	461a      	mov	r2, r3
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	4413      	add	r3, r2
 8000266:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	68fa      	ldr	r2, [r7, #12]
 800026c:	6811      	ldr	r1, [r2, #0]
 800026e:	687a      	ldr	r2, [r7, #4]
 8000270:	6812      	ldr	r2, [r2, #0]
 8000272:	430a      	orrs	r2, r1
 8000274:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000276:	4923      	ldr	r1, [pc, #140]	; (8000304 <EXTI_Init+0xe0>)
 8000278:	4b22      	ldr	r3, [pc, #136]	; (8000304 <EXTI_Init+0xe0>)
 800027a:	689a      	ldr	r2, [r3, #8]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	43db      	mvns	r3, r3
 8000282:	4013      	ands	r3, r2
 8000284:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000286:	491f      	ldr	r1, [pc, #124]	; (8000304 <EXTI_Init+0xe0>)
 8000288:	4b1e      	ldr	r3, [pc, #120]	; (8000304 <EXTI_Init+0xe0>)
 800028a:	68da      	ldr	r2, [r3, #12]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	43db      	mvns	r3, r3
 8000292:	4013      	ands	r3, r2
 8000294:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	795b      	ldrb	r3, [r3, #5]
 800029a:	2b10      	cmp	r3, #16
 800029c:	d10e      	bne.n	80002bc <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800029e:	4919      	ldr	r1, [pc, #100]	; (8000304 <EXTI_Init+0xe0>)
 80002a0:	4b18      	ldr	r3, [pc, #96]	; (8000304 <EXTI_Init+0xe0>)
 80002a2:	689a      	ldr	r2, [r3, #8]
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4313      	orrs	r3, r2
 80002aa:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80002ac:	4915      	ldr	r1, [pc, #84]	; (8000304 <EXTI_Init+0xe0>)
 80002ae:	4b15      	ldr	r3, [pc, #84]	; (8000304 <EXTI_Init+0xe0>)
 80002b0:	68da      	ldr	r2, [r3, #12]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4313      	orrs	r3, r2
 80002b8:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80002ba:	e01d      	b.n	80002f8 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80002bc:	4b11      	ldr	r3, [pc, #68]	; (8000304 <EXTI_Init+0xe0>)
 80002be:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	795b      	ldrb	r3, [r3, #5]
 80002c4:	461a      	mov	r2, r3
 80002c6:	68fb      	ldr	r3, [r7, #12]
 80002c8:	4413      	add	r3, r2
 80002ca:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	68fa      	ldr	r2, [r7, #12]
 80002d0:	6811      	ldr	r1, [r2, #0]
 80002d2:	687a      	ldr	r2, [r7, #4]
 80002d4:	6812      	ldr	r2, [r2, #0]
 80002d6:	430a      	orrs	r2, r1
 80002d8:	601a      	str	r2, [r3, #0]
}
 80002da:	e00d      	b.n	80002f8 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	791b      	ldrb	r3, [r3, #4]
 80002e0:	461a      	mov	r2, r3
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	4413      	add	r3, r2
 80002e6:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 80002e8:	68fb      	ldr	r3, [r7, #12]
 80002ea:	68fa      	ldr	r2, [r7, #12]
 80002ec:	6811      	ldr	r1, [r2, #0]
 80002ee:	687a      	ldr	r2, [r7, #4]
 80002f0:	6812      	ldr	r2, [r2, #0]
 80002f2:	43d2      	mvns	r2, r2
 80002f4:	400a      	ands	r2, r1
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40010400 	.word	0x40010400

08000308 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000310:	4a03      	ldr	r2, [pc, #12]	; (8000320 <EXTI_ClearITPendingBit+0x18>)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	6153      	str	r3, [r2, #20]
}
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	bc80      	pop	{r7}
 800031e:	4770      	bx	lr
 8000320:	40010400 	.word	0x40010400

08000324 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000324:	b480      	push	{r7}
 8000326:	b089      	sub	sp, #36	; 0x24
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
 800032c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800032e:	2300      	movs	r3, #0
 8000330:	61fb      	str	r3, [r7, #28]
 8000332:	2300      	movs	r3, #0
 8000334:	613b      	str	r3, [r7, #16]
 8000336:	2300      	movs	r3, #0
 8000338:	61bb      	str	r3, [r7, #24]
 800033a:	2300      	movs	r3, #0
 800033c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800033e:	2300      	movs	r3, #0
 8000340:	617b      	str	r3, [r7, #20]
 8000342:	2300      	movs	r3, #0
 8000344:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	78db      	ldrb	r3, [r3, #3]
 800034a:	f003 030f 	and.w	r3, r3, #15
 800034e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	78db      	ldrb	r3, [r3, #3]
 8000354:	f003 0310 	and.w	r3, r3, #16
 8000358:	2b00      	cmp	r3, #0
 800035a:	d005      	beq.n	8000368 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	789b      	ldrb	r3, [r3, #2]
 8000360:	461a      	mov	r2, r3
 8000362:	69fb      	ldr	r3, [r7, #28]
 8000364:	4313      	orrs	r3, r2
 8000366:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	881b      	ldrh	r3, [r3, #0]
 800036c:	b2db      	uxtb	r3, r3
 800036e:	2b00      	cmp	r3, #0
 8000370:	d044      	beq.n	80003fc <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
 800037c:	e038      	b.n	80003f0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800037e:	2201      	movs	r2, #1
 8000380:	69bb      	ldr	r3, [r7, #24]
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	881b      	ldrh	r3, [r3, #0]
 800038c:	461a      	mov	r2, r3
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	4013      	ands	r3, r2
 8000392:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000394:	693a      	ldr	r2, [r7, #16]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	429a      	cmp	r2, r3
 800039a:	d126      	bne.n	80003ea <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 800039c:	69bb      	ldr	r3, [r7, #24]
 800039e:	009b      	lsls	r3, r3, #2
 80003a0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80003a2:	220f      	movs	r2, #15
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	fa02 f303 	lsl.w	r3, r2, r3
 80003aa:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80003ac:	68bb      	ldr	r3, [r7, #8]
 80003ae:	43db      	mvns	r3, r3
 80003b0:	697a      	ldr	r2, [r7, #20]
 80003b2:	4013      	ands	r3, r2
 80003b4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80003b6:	69fa      	ldr	r2, [r7, #28]
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	fa02 f303 	lsl.w	r3, r2, r3
 80003be:	697a      	ldr	r2, [r7, #20]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	78db      	ldrb	r3, [r3, #3]
 80003c8:	2b28      	cmp	r3, #40	; 0x28
 80003ca:	d105      	bne.n	80003d8 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80003cc:	2201      	movs	r2, #1
 80003ce:	69bb      	ldr	r3, [r7, #24]
 80003d0:	409a      	lsls	r2, r3
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	615a      	str	r2, [r3, #20]
 80003d6:	e008      	b.n	80003ea <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80003d8:	683b      	ldr	r3, [r7, #0]
 80003da:	78db      	ldrb	r3, [r3, #3]
 80003dc:	2b48      	cmp	r3, #72	; 0x48
 80003de:	d104      	bne.n	80003ea <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80003e0:	2201      	movs	r2, #1
 80003e2:	69bb      	ldr	r3, [r7, #24]
 80003e4:	409a      	lsls	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80003ea:	69bb      	ldr	r3, [r7, #24]
 80003ec:	3301      	adds	r3, #1
 80003ee:	61bb      	str	r3, [r7, #24]
 80003f0:	69bb      	ldr	r3, [r7, #24]
 80003f2:	2b07      	cmp	r3, #7
 80003f4:	d9c3      	bls.n	800037e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	697a      	ldr	r2, [r7, #20]
 80003fa:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80003fc:	683b      	ldr	r3, [r7, #0]
 80003fe:	881b      	ldrh	r3, [r3, #0]
 8000400:	2bff      	cmp	r3, #255	; 0xff
 8000402:	d946      	bls.n	8000492 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	685b      	ldr	r3, [r3, #4]
 8000408:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800040a:	2300      	movs	r3, #0
 800040c:	61bb      	str	r3, [r7, #24]
 800040e:	e03a      	b.n	8000486 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000410:	69bb      	ldr	r3, [r7, #24]
 8000412:	3308      	adds	r3, #8
 8000414:	2201      	movs	r2, #1
 8000416:	fa02 f303 	lsl.w	r3, r2, r3
 800041a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	881b      	ldrh	r3, [r3, #0]
 8000420:	461a      	mov	r2, r3
 8000422:	68fb      	ldr	r3, [r7, #12]
 8000424:	4013      	ands	r3, r2
 8000426:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000428:	693a      	ldr	r2, [r7, #16]
 800042a:	68fb      	ldr	r3, [r7, #12]
 800042c:	429a      	cmp	r2, r3
 800042e:	d127      	bne.n	8000480 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000430:	69bb      	ldr	r3, [r7, #24]
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000436:	220f      	movs	r2, #15
 8000438:	68fb      	ldr	r3, [r7, #12]
 800043a:	fa02 f303 	lsl.w	r3, r2, r3
 800043e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	43db      	mvns	r3, r3
 8000444:	697a      	ldr	r2, [r7, #20]
 8000446:	4013      	ands	r3, r2
 8000448:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800044a:	69fa      	ldr	r2, [r7, #28]
 800044c:	68fb      	ldr	r3, [r7, #12]
 800044e:	fa02 f303 	lsl.w	r3, r2, r3
 8000452:	697a      	ldr	r2, [r7, #20]
 8000454:	4313      	orrs	r3, r2
 8000456:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	78db      	ldrb	r3, [r3, #3]
 800045c:	2b28      	cmp	r3, #40	; 0x28
 800045e:	d105      	bne.n	800046c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000460:	69bb      	ldr	r3, [r7, #24]
 8000462:	3308      	adds	r3, #8
 8000464:	2201      	movs	r2, #1
 8000466:	409a      	lsls	r2, r3
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 800046c:	683b      	ldr	r3, [r7, #0]
 800046e:	78db      	ldrb	r3, [r3, #3]
 8000470:	2b48      	cmp	r3, #72	; 0x48
 8000472:	d105      	bne.n	8000480 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	3308      	adds	r3, #8
 8000478:	2201      	movs	r2, #1
 800047a:	409a      	lsls	r2, r3
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000480:	69bb      	ldr	r3, [r7, #24]
 8000482:	3301      	adds	r3, #1
 8000484:	61bb      	str	r3, [r7, #24]
 8000486:	69bb      	ldr	r3, [r7, #24]
 8000488:	2b07      	cmp	r3, #7
 800048a:	d9c1      	bls.n	8000410 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	697a      	ldr	r2, [r7, #20]
 8000490:	605a      	str	r2, [r3, #4]
  }
}
 8000492:	bf00      	nop
 8000494:	3724      	adds	r7, #36	; 0x24
 8000496:	46bd      	mov	sp, r7
 8000498:	bc80      	pop	{r7}
 800049a:	4770      	bx	lr

0800049c <GPIO_ReadOutputData>:
  * @brief  Reads the specified GPIO output data port.
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @retval GPIO output data port value.
  */
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
 800049c:	b480      	push	{r7}
 800049e:	b083      	sub	sp, #12
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
    
  return ((uint16_t)GPIOx->ODR);
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	b29b      	uxth	r3, r3
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bc80      	pop	{r7}
 80004b2:	4770      	bx	lr

080004b4 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
 80004bc:	460b      	mov	r3, r1
 80004be:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 80004c0:	887a      	ldrh	r2, [r7, #2]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	60da      	str	r2, [r3, #12]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bc80      	pop	{r7}
 80004ce:	4770      	bx	lr

080004d0 <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80004d0:	b490      	push	{r4, r7}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80004e0:	2300      	movs	r3, #0
 80004e2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	f003 0303 	and.w	r3, r3, #3
 80004ea:	009b      	lsls	r3, r3, #2
 80004ec:	220f      	movs	r2, #15
 80004ee:	fa02 f303 	lsl.w	r3, r2, r3
 80004f2:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 80004f4:	4916      	ldr	r1, [pc, #88]	; (8000550 <GPIO_EXTILineConfig+0x80>)
 80004f6:	79bb      	ldrb	r3, [r7, #6]
 80004f8:	089b      	lsrs	r3, r3, #2
 80004fa:	b2db      	uxtb	r3, r3
 80004fc:	4618      	mov	r0, r3
 80004fe:	4a14      	ldr	r2, [pc, #80]	; (8000550 <GPIO_EXTILineConfig+0x80>)
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	089b      	lsrs	r3, r3, #2
 8000504:	b2db      	uxtb	r3, r3
 8000506:	3302      	adds	r3, #2
 8000508:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	43db      	mvns	r3, r3
 8000510:	401a      	ands	r2, r3
 8000512:	1c83      	adds	r3, r0, #2
 8000514:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8000518:	480d      	ldr	r0, [pc, #52]	; (8000550 <GPIO_EXTILineConfig+0x80>)
 800051a:	79bb      	ldrb	r3, [r7, #6]
 800051c:	089b      	lsrs	r3, r3, #2
 800051e:	b2db      	uxtb	r3, r3
 8000520:	461c      	mov	r4, r3
 8000522:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <GPIO_EXTILineConfig+0x80>)
 8000524:	79bb      	ldrb	r3, [r7, #6]
 8000526:	089b      	lsrs	r3, r3, #2
 8000528:	b2db      	uxtb	r3, r3
 800052a:	3302      	adds	r3, #2
 800052c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000530:	79f9      	ldrb	r1, [r7, #7]
 8000532:	79bb      	ldrb	r3, [r7, #6]
 8000534:	f003 0303 	and.w	r3, r3, #3
 8000538:	009b      	lsls	r3, r3, #2
 800053a:	fa01 f303 	lsl.w	r3, r1, r3
 800053e:	431a      	orrs	r2, r3
 8000540:	1ca3      	adds	r3, r4, #2
 8000542:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000546:	bf00      	nop
 8000548:	3710      	adds	r7, #16
 800054a:	46bd      	mov	sp, r7
 800054c:	bc90      	pop	{r4, r7}
 800054e:	4770      	bx	lr
 8000550:	40010000 	.word	0x40010000

08000554 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000554:	b480      	push	{r7}
 8000556:	b087      	sub	sp, #28
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	2300      	movs	r3, #0
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	2300      	movs	r3, #0
 800056a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800056c:	4b4c      	ldr	r3, [pc, #304]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	f003 030c 	and.w	r3, r3, #12
 8000574:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000576:	697b      	ldr	r3, [r7, #20]
 8000578:	2b04      	cmp	r3, #4
 800057a:	d007      	beq.n	800058c <RCC_GetClocksFreq+0x38>
 800057c:	2b08      	cmp	r3, #8
 800057e:	d009      	beq.n	8000594 <RCC_GetClocksFreq+0x40>
 8000580:	2b00      	cmp	r3, #0
 8000582:	d133      	bne.n	80005ec <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4a47      	ldr	r2, [pc, #284]	; (80006a4 <RCC_GetClocksFreq+0x150>)
 8000588:	601a      	str	r2, [r3, #0]
      break;
 800058a:	e033      	b.n	80005f4 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	4a45      	ldr	r2, [pc, #276]	; (80006a4 <RCC_GetClocksFreq+0x150>)
 8000590:	601a      	str	r2, [r3, #0]
      break;
 8000592:	e02f      	b.n	80005f4 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8000594:	4b42      	ldr	r3, [pc, #264]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 8000596:	685b      	ldr	r3, [r3, #4]
 8000598:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800059c:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 800059e:	4b40      	ldr	r3, [pc, #256]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005a6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	0c9b      	lsrs	r3, r3, #18
 80005ac:	3302      	adds	r3, #2
 80005ae:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d106      	bne.n	80005c4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80005b6:	693b      	ldr	r3, [r7, #16]
 80005b8:	4a3b      	ldr	r2, [pc, #236]	; (80006a8 <RCC_GetClocksFreq+0x154>)
 80005ba:	fb02 f203 	mul.w	r2, r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80005c2:	e017      	b.n	80005f4 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80005c4:	4b36      	ldr	r3, [pc, #216]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d006      	beq.n	80005de <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80005d0:	693b      	ldr	r3, [r7, #16]
 80005d2:	4a35      	ldr	r2, [pc, #212]	; (80006a8 <RCC_GetClocksFreq+0x154>)
 80005d4:	fb02 f203 	mul.w	r2, r2, r3
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	601a      	str	r2, [r3, #0]
      break;
 80005dc:	e00a      	b.n	80005f4 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80005de:	693b      	ldr	r3, [r7, #16]
 80005e0:	4a30      	ldr	r2, [pc, #192]	; (80006a4 <RCC_GetClocksFreq+0x150>)
 80005e2:	fb02 f203 	mul.w	r2, r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	601a      	str	r2, [r3, #0]
      break;
 80005ea:	e003      	b.n	80005f4 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a2d      	ldr	r2, [pc, #180]	; (80006a4 <RCC_GetClocksFreq+0x150>)
 80005f0:	601a      	str	r2, [r3, #0]
      break;
 80005f2:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 80005f6:	685b      	ldr	r3, [r3, #4]
 80005f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80005fc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	091b      	lsrs	r3, r3, #4
 8000602:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000604:	4a29      	ldr	r2, [pc, #164]	; (80006ac <RCC_GetClocksFreq+0x158>)
 8000606:	697b      	ldr	r3, [r7, #20]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	681a      	ldr	r2, [r3, #0]
 8000614:	68bb      	ldr	r3, [r7, #8]
 8000616:	40da      	lsrs	r2, r3
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800061c:	4b20      	ldr	r3, [pc, #128]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 800061e:	685b      	ldr	r3, [r3, #4]
 8000620:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000624:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	0a1b      	lsrs	r3, r3, #8
 800062a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800062c:	4a1f      	ldr	r2, [pc, #124]	; (80006ac <RCC_GetClocksFreq+0x158>)
 800062e:	697b      	ldr	r3, [r7, #20]
 8000630:	4413      	add	r3, r2
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685a      	ldr	r2, [r3, #4]
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	40da      	lsrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000644:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 8000646:	685b      	ldr	r3, [r3, #4]
 8000648:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800064c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	0adb      	lsrs	r3, r3, #11
 8000652:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000654:	4a15      	ldr	r2, [pc, #84]	; (80006ac <RCC_GetClocksFreq+0x158>)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	4413      	add	r3, r2
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	b2db      	uxtb	r3, r3
 800065e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	685a      	ldr	r2, [r3, #4]
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	40da      	lsrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <RCC_GetClocksFreq+0x14c>)
 800066e:	685b      	ldr	r3, [r3, #4]
 8000670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000674:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000676:	697b      	ldr	r3, [r7, #20]
 8000678:	0b9b      	lsrs	r3, r3, #14
 800067a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800067c:	4a0c      	ldr	r2, [pc, #48]	; (80006b0 <RCC_GetClocksFreq+0x15c>)
 800067e:	697b      	ldr	r3, [r7, #20]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	68da      	ldr	r2, [r3, #12]
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	611a      	str	r2, [r3, #16]
}
 8000696:	bf00      	nop
 8000698:	371c      	adds	r7, #28
 800069a:	46bd      	mov	sp, r7
 800069c:	bc80      	pop	{r7}
 800069e:	4770      	bx	lr
 80006a0:	40021000 	.word	0x40021000
 80006a4:	007a1200 	.word	0x007a1200
 80006a8:	003d0900 	.word	0x003d0900
 80006ac:	20000000 	.word	0x20000000
 80006b0:	20000010 	.word	0x20000010

080006b4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	460b      	mov	r3, r1
 80006be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006c0:	78fb      	ldrb	r3, [r7, #3]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d006      	beq.n	80006d4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80006c6:	4909      	ldr	r1, [pc, #36]	; (80006ec <RCC_APB2PeriphClockCmd+0x38>)
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <RCC_APB2PeriphClockCmd+0x38>)
 80006ca:	699a      	ldr	r2, [r3, #24]
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4313      	orrs	r3, r2
 80006d0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80006d2:	e006      	b.n	80006e2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80006d4:	4905      	ldr	r1, [pc, #20]	; (80006ec <RCC_APB2PeriphClockCmd+0x38>)
 80006d6:	4b05      	ldr	r3, [pc, #20]	; (80006ec <RCC_APB2PeriphClockCmd+0x38>)
 80006d8:	699a      	ldr	r2, [r3, #24]
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	43db      	mvns	r3, r3
 80006de:	4013      	ands	r3, r2
 80006e0:	618b      	str	r3, [r1, #24]
}
 80006e2:	bf00      	nop
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40021000 	.word	0x40021000

080006f0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d006      	beq.n	8000710 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000702:	4909      	ldr	r1, [pc, #36]	; (8000728 <RCC_APB1PeriphClockCmd+0x38>)
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <RCC_APB1PeriphClockCmd+0x38>)
 8000706:	69da      	ldr	r2, [r3, #28]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4313      	orrs	r3, r2
 800070c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800070e:	e006      	b.n	800071e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000710:	4905      	ldr	r1, [pc, #20]	; (8000728 <RCC_APB1PeriphClockCmd+0x38>)
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <RCC_APB1PeriphClockCmd+0x38>)
 8000714:	69da      	ldr	r2, [r3, #28]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	43db      	mvns	r3, r3
 800071a:	4013      	ands	r3, r2
 800071c:	61cb      	str	r3, [r1, #28]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000

0800072c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800072c:	b480      	push	{r7}
 800072e:	b085      	sub	sp, #20
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a2e      	ldr	r2, [pc, #184]	; (80007fc <TIM_TimeBaseInit+0xd0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d013      	beq.n	8000770 <TIM_TimeBaseInit+0x44>
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a2d      	ldr	r2, [pc, #180]	; (8000800 <TIM_TimeBaseInit+0xd4>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d00f      	beq.n	8000770 <TIM_TimeBaseInit+0x44>
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000756:	d00b      	beq.n	8000770 <TIM_TimeBaseInit+0x44>
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	4a2a      	ldr	r2, [pc, #168]	; (8000804 <TIM_TimeBaseInit+0xd8>)
 800075c:	4293      	cmp	r3, r2
 800075e:	d007      	beq.n	8000770 <TIM_TimeBaseInit+0x44>
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a29      	ldr	r2, [pc, #164]	; (8000808 <TIM_TimeBaseInit+0xdc>)
 8000764:	4293      	cmp	r3, r2
 8000766:	d003      	beq.n	8000770 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	4a28      	ldr	r2, [pc, #160]	; (800080c <TIM_TimeBaseInit+0xe0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d108      	bne.n	8000782 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000770:	89fb      	ldrh	r3, [r7, #14]
 8000772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000776:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	885a      	ldrh	r2, [r3, #2]
 800077c:	89fb      	ldrh	r3, [r7, #14]
 800077e:	4313      	orrs	r3, r2
 8000780:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a22      	ldr	r2, [pc, #136]	; (8000810 <TIM_TimeBaseInit+0xe4>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d00c      	beq.n	80007a4 <TIM_TimeBaseInit+0x78>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a21      	ldr	r2, [pc, #132]	; (8000814 <TIM_TimeBaseInit+0xe8>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d008      	beq.n	80007a4 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000798:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	88da      	ldrh	r2, [r3, #6]
 800079e:	89fb      	ldrh	r3, [r7, #14]
 80007a0:	4313      	orrs	r3, r2
 80007a2:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	89fa      	ldrh	r2, [r7, #14]
 80007a8:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	889a      	ldrh	r2, [r3, #4]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	881a      	ldrh	r2, [r3, #0]
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a0f      	ldr	r2, [pc, #60]	; (80007fc <TIM_TimeBaseInit+0xd0>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d00f      	beq.n	80007e2 <TIM_TimeBaseInit+0xb6>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <TIM_TimeBaseInit+0xd4>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d00b      	beq.n	80007e2 <TIM_TimeBaseInit+0xb6>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a12      	ldr	r2, [pc, #72]	; (8000818 <TIM_TimeBaseInit+0xec>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d007      	beq.n	80007e2 <TIM_TimeBaseInit+0xb6>
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4a11      	ldr	r2, [pc, #68]	; (800081c <TIM_TimeBaseInit+0xf0>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d003      	beq.n	80007e2 <TIM_TimeBaseInit+0xb6>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	4a10      	ldr	r2, [pc, #64]	; (8000820 <TIM_TimeBaseInit+0xf4>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d104      	bne.n	80007ec <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	7a1b      	ldrb	r3, [r3, #8]
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2201      	movs	r2, #1
 80007f0:	829a      	strh	r2, [r3, #20]
}
 80007f2:	bf00      	nop
 80007f4:	3714      	adds	r7, #20
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40012c00 	.word	0x40012c00
 8000800:	40013400 	.word	0x40013400
 8000804:	40000400 	.word	0x40000400
 8000808:	40000800 	.word	0x40000800
 800080c:	40000c00 	.word	0x40000c00
 8000810:	40001000 	.word	0x40001000
 8000814:	40001400 	.word	0x40001400
 8000818:	40014000 	.word	0x40014000
 800081c:	40014400 	.word	0x40014400
 8000820:	40014800 	.word	0x40014800

08000824 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d008      	beq.n	8000848 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	881b      	ldrh	r3, [r3, #0]
 800083a:	b29b      	uxth	r3, r3
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	b29a      	uxth	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000846:	e007      	b.n	8000858 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	881b      	ldrh	r3, [r3, #0]
 800084c:	b29b      	uxth	r3, r3
 800084e:	f023 0301 	bic.w	r3, r3, #1
 8000852:	b29a      	uxth	r2, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	801a      	strh	r2, [r3, #0]
}
 8000858:	bf00      	nop
 800085a:	370c      	adds	r7, #12
 800085c:	46bd      	mov	sp, r7
 800085e:	bc80      	pop	{r7}
 8000860:	4770      	bx	lr

08000862 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000862:	b480      	push	{r7}
 8000864:	b083      	sub	sp, #12
 8000866:	af00      	add	r7, sp, #0
 8000868:	6078      	str	r0, [r7, #4]
 800086a:	460b      	mov	r3, r1
 800086c:	807b      	strh	r3, [r7, #2]
 800086e:	4613      	mov	r3, r2
 8000870:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000872:	787b      	ldrb	r3, [r7, #1]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d008      	beq.n	800088a <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	899b      	ldrh	r3, [r3, #12]
 800087c:	b29a      	uxth	r2, r3
 800087e:	887b      	ldrh	r3, [r7, #2]
 8000880:	4313      	orrs	r3, r2
 8000882:	b29a      	uxth	r2, r3
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000888:	e009      	b.n	800089e <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	899b      	ldrh	r3, [r3, #12]
 800088e:	b29a      	uxth	r2, r3
 8000890:	887b      	ldrh	r3, [r7, #2]
 8000892:	43db      	mvns	r3, r3
 8000894:	b29b      	uxth	r3, r3
 8000896:	4013      	ands	r3, r2
 8000898:	b29a      	uxth	r2, r3
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	819a      	strh	r2, [r3, #12]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
 80008b0:	460b      	mov	r3, r1
 80008b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80008b4:	887b      	ldrh	r3, [r7, #2]
 80008b6:	43db      	mvns	r3, r3
 80008b8:	b29a      	uxth	r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	821a      	strh	r2, [r3, #16]
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80008d6:	2300      	movs	r3, #0
 80008d8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	8a1b      	ldrh	r3, [r3, #16]
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80008f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80008f4:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80008f8:	4013      	ands	r3, r2
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	88db      	ldrh	r3, [r3, #6]
 8000900:	461a      	mov	r2, r3
 8000902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000904:	4313      	orrs	r3, r2
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800090a:	b29a      	uxth	r2, r3
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	899b      	ldrh	r3, [r3, #12]
 8000914:	b29b      	uxth	r3, r3
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 8000918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800091a:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 800091e:	4013      	ands	r3, r2
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	889a      	ldrh	r2, [r3, #4]
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	891b      	ldrh	r3, [r3, #8]
 800092a:	4313      	orrs	r3, r2
 800092c:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000932:	4313      	orrs	r3, r2
 8000934:	b29b      	uxth	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800093a:	4313      	orrs	r3, r2
 800093c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 800093e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000940:	b29a      	uxth	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	8a9b      	ldrh	r3, [r3, #20]
 800094a:	b29b      	uxth	r3, r3
 800094c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 800094e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000950:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8000954:	4013      	ands	r3, r2
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	899b      	ldrh	r3, [r3, #12]
 800095c:	461a      	mov	r2, r3
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	4313      	orrs	r3, r2
 8000962:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000966:	b29a      	uxth	r2, r3
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 800096c:	f107 0308 	add.w	r3, r7, #8
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fdef 	bl	8000554 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	4a2e      	ldr	r2, [pc, #184]	; (8000a34 <USART_Init+0x16c>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d102      	bne.n	8000984 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	62bb      	str	r3, [r7, #40]	; 0x28
 8000982:	e001      	b.n	8000988 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000984:	693b      	ldr	r3, [r7, #16]
 8000986:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	899b      	ldrh	r3, [r3, #12]
 800098c:	b29b      	uxth	r3, r3
 800098e:	b21b      	sxth	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	da0c      	bge.n	80009ae <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000994:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000996:	4613      	mov	r3, r2
 8000998:	009b      	lsls	r3, r3, #2
 800099a:	4413      	add	r3, r2
 800099c:	009a      	lsls	r2, r3, #2
 800099e:	441a      	add	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	e00b      	b.n	80009c6 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 80009ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	009a      	lsls	r2, r3, #2
 80009b8:	441a      	add	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009c4:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 80009c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <USART_Init+0x170>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	095b      	lsrs	r3, r3, #5
 80009d0:	011b      	lsls	r3, r3, #4
 80009d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	091b      	lsrs	r3, r3, #4
 80009d8:	2264      	movs	r2, #100	; 0x64
 80009da:	fb02 f303 	mul.w	r3, r2, r3
 80009de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	899b      	ldrh	r3, [r3, #12]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	da0c      	bge.n	8000a0a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80009f0:	6a3b      	ldr	r3, [r7, #32]
 80009f2:	00db      	lsls	r3, r3, #3
 80009f4:	3332      	adds	r3, #50	; 0x32
 80009f6:	4a10      	ldr	r2, [pc, #64]	; (8000a38 <USART_Init+0x170>)
 80009f8:	fba2 2303 	umull	r2, r3, r2, r3
 80009fc:	095b      	lsrs	r3, r3, #5
 80009fe:	f003 0307 	and.w	r3, r3, #7
 8000a02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a04:	4313      	orrs	r3, r2
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000a08:	e00b      	b.n	8000a22 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	011b      	lsls	r3, r3, #4
 8000a0e:	3332      	adds	r3, #50	; 0x32
 8000a10:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <USART_Init+0x170>)
 8000a12:	fba2 2303 	umull	r2, r3, r2, r3
 8000a16:	095b      	lsrs	r3, r3, #5
 8000a18:	f003 030f 	and.w	r3, r3, #15
 8000a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 8000a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	811a      	strh	r2, [r3, #8]
}
 8000a2a:	bf00      	nop
 8000a2c:	3730      	adds	r7, #48	; 0x30
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40013800 	.word	0x40013800
 8000a38:	51eb851f 	.word	0x51eb851f

08000a3c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a48:	78fb      	ldrb	r3, [r7, #3]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	899b      	ldrh	r3, [r3, #12]
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a58:	b29a      	uxth	r2, r3
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8000a5e:	e007      	b.n	8000a70 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	899b      	ldrh	r3, [r3, #12]
 8000a64:	b29b      	uxth	r3, r3
 8000a66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a6a:	b29a      	uxth	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	819a      	strh	r2, [r3, #12]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bc80      	pop	{r7}
 8000a78:	4770      	bx	lr

08000a7a <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000a86:	887b      	ldrh	r3, [r7, #2]
 8000a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	809a      	strh	r2, [r3, #4]
}
 8000a92:	bf00      	nop
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	881b      	ldrh	r3, [r3, #0]
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	887b      	ldrh	r3, [r7, #2]
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d002      	beq.n	8000ac2 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e001      	b.n	8000ac6 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3714      	adds	r7, #20
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bc80      	pop	{r7}
 8000ad0:	4770      	bx	lr
	...

08000ad4 <Conf_GPIO>:
#include <conf_gpio.h>

void Conf_GPIO(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8000ada:	2101      	movs	r1, #1
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff fde9 	bl	80006b4 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	2008      	movs	r0, #8
 8000ae6:	f7ff fde5 	bl	80006b4 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000aea:	2101      	movs	r1, #1
 8000aec:	2010      	movs	r0, #16
 8000aee:	f7ff fde1 	bl	80006b4 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef portaA;
  portaA.GPIO_Mode = GPIO_Mode_IPU;
 8000af2:	2348      	movs	r3, #72	; 0x48
 8000af4:	71fb      	strb	r3, [r7, #7]
  portaA.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3;
 8000af6:	230f      	movs	r3, #15
 8000af8:	80bb      	strh	r3, [r7, #4]
  portaA.GPIO_Speed = GPIO_Speed_2MHz;
 8000afa:	2302      	movs	r3, #2
 8000afc:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &portaA);
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	4619      	mov	r1, r3
 8000b02:	4814      	ldr	r0, [pc, #80]	; (8000b54 <Conf_GPIO+0x80>)
 8000b04:	f7ff fc0e 	bl	8000324 <GPIO_Init>

  portaA.GPIO_Mode = GPIO_Mode_Out_OD;
 8000b08:	2314      	movs	r3, #20
 8000b0a:	71fb      	strb	r3, [r7, #7]
  portaA.GPIO_Pin = GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
 8000b0c:	23f0      	movs	r3, #240	; 0xf0
 8000b0e:	80bb      	strh	r3, [r7, #4]
  portaA.GPIO_Speed = GPIO_Speed_2MHz;
 8000b10:	2302      	movs	r3, #2
 8000b12:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &portaA);
 8000b14:	1d3b      	adds	r3, r7, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	480e      	ldr	r0, [pc, #56]	; (8000b54 <Conf_GPIO+0x80>)
 8000b1a:	f7ff fc03 	bl	8000324 <GPIO_Init>

  GPIO_InitTypeDef portaB;
  portaB.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b1e:	2318      	movs	r3, #24
 8000b20:	70fb      	strb	r3, [r7, #3]
  portaB.GPIO_Pin = GPIO_Pin_10;
 8000b22:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b26:	803b      	strh	r3, [r7, #0]
  portaB.GPIO_Speed = GPIO_Speed_2MHz;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	70bb      	strb	r3, [r7, #2]
  GPIO_Init(GPIOB, &portaB);
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4809      	ldr	r0, [pc, #36]	; (8000b58 <Conf_GPIO+0x84>)
 8000b32:	f7ff fbf7 	bl	8000324 <GPIO_Init>

  portaB.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8000b36:	2304      	movs	r3, #4
 8000b38:	70fb      	strb	r3, [r7, #3]
  portaB.GPIO_Pin = GPIO_Pin_11;
 8000b3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b3e:	803b      	strh	r3, [r7, #0]
  GPIO_Init(GPIOB, &portaB);
 8000b40:	463b      	mov	r3, r7
 8000b42:	4619      	mov	r1, r3
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <Conf_GPIO+0x84>)
 8000b46:	f7ff fbed 	bl	8000324 <GPIO_Init>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010800 	.word	0x40010800
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <main>:
void Conf_EXTI(void);
void Conf_NVIC(void);
void Conf_TIM2(void);

int main()
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  Conf_GPIO();
 8000b60:	f7ff ffb8 	bl	8000ad4 <Conf_GPIO>
  Conf_NVIC();
 8000b64:	f000 f856 	bl	8000c14 <Conf_NVIC>
  Conf_EXTI();
 8000b68:	f000 f805 	bl	8000b76 <Conf_EXTI>
  Conf_TIM2();
 8000b6c:	f000 f82a 	bl	8000bc4 <Conf_TIM2>
  Conf_USART3();
 8000b70:	f000 f89c 	bl	8000cac <Conf_USART3>
//  Conf_I2C1();

  while(1)
 8000b74:	e7fe      	b.n	8000b74 <main+0x18>

08000b76 <Conf_EXTI>:

   return 0;
}

void Conf_EXTI(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 8000b7c:	2101      	movs	r1, #1
 8000b7e:	2001      	movs	r0, #1
 8000b80:	f7ff fd98 	bl	80006b4 <RCC_APB2PeriphClockCmd>

  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource0);
 8000b84:	2100      	movs	r1, #0
 8000b86:	2000      	movs	r0, #0
 8000b88:	f7ff fca2 	bl	80004d0 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource1);
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2000      	movs	r0, #0
 8000b90:	f7ff fc9e 	bl	80004d0 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource2);
 8000b94:	2102      	movs	r1, #2
 8000b96:	2000      	movs	r0, #0
 8000b98:	f7ff fc9a 	bl	80004d0 <GPIO_EXTILineConfig>
  GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, GPIO_PinSource3);
 8000b9c:	2103      	movs	r1, #3
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fc96 	bl	80004d0 <GPIO_EXTILineConfig>

  EXTI_InitTypeDef exti_struct;
  exti_struct.EXTI_Line = EXTI_Line0 | EXTI_Line1 | EXTI_Line2 | EXTI_Line3;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	603b      	str	r3, [r7, #0]
  exti_struct.EXTI_LineCmd = ENABLE;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	71bb      	strb	r3, [r7, #6]
  exti_struct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000bac:	2300      	movs	r3, #0
 8000bae:	713b      	strb	r3, [r7, #4]
  exti_struct.EXTI_Trigger = EXTI_Trigger_Falling;
 8000bb0:	230c      	movs	r3, #12
 8000bb2:	717b      	strb	r3, [r7, #5]
  EXTI_Init(&exti_struct);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fb34 	bl	8000224 <EXTI_Init>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <Conf_TIM2>:

void Conf_TIM2(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000bca:	2101      	movs	r1, #1
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fd8f 	bl	80006f0 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef tim_struct;
  tim_struct.TIM_Prescaler = 7200-1;
 8000bd2:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000bd6:	80bb      	strh	r3, [r7, #4]
  tim_struct.TIM_Period = 1000-1;
 8000bd8:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000bdc:	813b      	strh	r3, [r7, #8]
  tim_struct.TIM_CounterMode =  TIM_CounterMode_Up;
 8000bde:	2300      	movs	r3, #0
 8000be0:	80fb      	strh	r3, [r7, #6]
  tim_struct.TIM_ClockDivision = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	817b      	strh	r3, [r7, #10]
  tim_struct.TIM_RepetitionCounter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM2, &tim_struct);
 8000bea:	1d3b      	adds	r3, r7, #4
 8000bec:	4619      	mov	r1, r3
 8000bee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bf2:	f7ff fd9b 	bl	800072c <TIM_TimeBaseInit>

  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bfe:	f7ff fe30 	bl	8000862 <TIM_ITConfig>
  TIM_Cmd(TIM2, ENABLE);
 8000c02:	2101      	movs	r1, #1
 8000c04:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c08:	f7ff fe0c 	bl	8000824 <TIM_Cmd>
}
 8000c0c:	bf00      	nop
 8000c0e:	3710      	adds	r7, #16
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <Conf_NVIC>:

void Conf_NVIC(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef nvic_struct;
  nvic_struct.NVIC_IRQChannel = EXTI0_IRQn;
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	713b      	strb	r3, [r7, #4]
  nvic_struct.NVIC_IRQChannelCmd = ENABLE;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	71fb      	strb	r3, [r7, #7]
  nvic_struct.NVIC_IRQChannelPreemptionPriority = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	717b      	strb	r3, [r7, #5]
  nvic_struct.NVIC_IRQChannelSubPriority = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&nvic_struct);
 8000c2a:	1d3b      	adds	r3, r7, #4
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f7ff fa97 	bl	8000160 <NVIC_Init>

  nvic_struct.NVIC_IRQChannel = EXTI1_IRQn;
 8000c32:	2307      	movs	r3, #7
 8000c34:	713b      	strb	r3, [r7, #4]
  NVIC_Init(&nvic_struct);
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f7ff fa91 	bl	8000160 <NVIC_Init>

  nvic_struct.NVIC_IRQChannel = EXTI2_IRQn;
 8000c3e:	2308      	movs	r3, #8
 8000c40:	713b      	strb	r3, [r7, #4]
  NVIC_Init(&nvic_struct);
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	4618      	mov	r0, r3
 8000c46:	f7ff fa8b 	bl	8000160 <NVIC_Init>

  nvic_struct.NVIC_IRQChannel = EXTI3_IRQn;
 8000c4a:	2309      	movs	r3, #9
 8000c4c:	713b      	strb	r3, [r7, #4]
  NVIC_Init(&nvic_struct);
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff fa85 	bl	8000160 <NVIC_Init>

  nvic_struct.NVIC_IRQChannel = TIM2_IRQn;
 8000c56:	231c      	movs	r3, #28
 8000c58:	713b      	strb	r3, [r7, #4]
  NVIC_Init(&nvic_struct);
 8000c5a:	1d3b      	adds	r3, r7, #4
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fa7f 	bl	8000160 <NVIC_Init>
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
	...

08000c6c <Print_USART3>:
#include "print_usart.h"

void Print_USART3(char *string)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  while(*string != 0)
 8000c74:	e010      	b.n	8000c98 <Print_USART3+0x2c>
  {
    while(!USART_GetFlagStatus(USART3, USART_FLAG_TXE));
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	; 0x80
 8000c7a:	480b      	ldr	r0, [pc, #44]	; (8000ca8 <Print_USART3+0x3c>)
 8000c7c:	f7ff ff0e 	bl	8000a9c <USART_GetFlagStatus>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d0f8      	beq.n	8000c78 <Print_USART3+0xc>
    USART_SendData(USART3, *string++);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	1c5a      	adds	r2, r3, #1
 8000c8a:	607a      	str	r2, [r7, #4]
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	b29b      	uxth	r3, r3
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <Print_USART3+0x3c>)
 8000c94:	f7ff fef1 	bl	8000a7a <USART_SendData>
  while(*string != 0)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d1ea      	bne.n	8000c76 <Print_USART3+0xa>
  }
}
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	40004800 	.word	0x40004800

08000cac <Conf_USART3>:

void Conf_USART3(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8000cb2:	2101      	movs	r1, #1
 8000cb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000cb8:	f7ff fd1a 	bl	80006f0 <RCC_APB1PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	2008      	movs	r0, #8
 8000cc0:	f7ff fcf8 	bl	80006b4 <RCC_APB2PeriphClockCmd>

  USART_InitTypeDef usart_struct;
  usart_struct.USART_BaudRate = 9600;
 8000cc4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000cc8:	60bb      	str	r3, [r7, #8]
  usart_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	82bb      	strh	r3, [r7, #20]
  usart_struct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8000cce:	230c      	movs	r3, #12
 8000cd0:	827b      	strh	r3, [r7, #18]
  usart_struct.USART_Parity = USART_Parity_No;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	823b      	strh	r3, [r7, #16]
  usart_struct.USART_StopBits = USART_StopBits_1;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	81fb      	strh	r3, [r7, #14]
  usart_struct.USART_WordLength = USART_WordLength_8b;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	81bb      	strh	r3, [r7, #12]
  USART_Init(USART3, &usart_struct);
 8000cde:	f107 0308 	add.w	r3, r7, #8
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4810      	ldr	r0, [pc, #64]	; (8000d28 <Conf_USART3+0x7c>)
 8000ce6:	f7ff fdef 	bl	80008c8 <USART_Init>

  USART_Cmd(USART3, ENABLE);
 8000cea:	2101      	movs	r1, #1
 8000cec:	480e      	ldr	r0, [pc, #56]	; (8000d28 <Conf_USART3+0x7c>)
 8000cee:	f7ff fea5 	bl	8000a3c <USART_Cmd>

  GPIO_InitTypeDef gpio_structB;
  gpio_structB.GPIO_Mode = GPIO_Mode_AF_PP;
 8000cf2:	2318      	movs	r3, #24
 8000cf4:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_10;
 8000cf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cfa:	80bb      	strh	r3, [r7, #4]
  gpio_structB.GPIO_Speed = GPIO_Speed_2MHz;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOB, &gpio_structB);
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <Conf_USART3+0x80>)
 8000d06:	f7ff fb0d 	bl	8000324 <GPIO_Init>

  gpio_structB.GPIO_Mode = GPIO_Mode_IPU;
 8000d0a:	2348      	movs	r3, #72	; 0x48
 8000d0c:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_11;
 8000d0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d12:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio_structB);
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	4619      	mov	r1, r3
 8000d18:	4804      	ldr	r0, [pc, #16]	; (8000d2c <Conf_USART3+0x80>)
 8000d1a:	f7ff fb03 	bl	8000324 <GPIO_Init>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40004800 	.word	0x40004800
 8000d2c:	40010c00 	.word	0x40010c00

08000d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d36:	e003      	b.n	8000d40 <LoopCopyDataInit>

08000d38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d38:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000d3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d3e:	3104      	adds	r1, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d40:	480b      	ldr	r0, [pc, #44]	; (8000d70 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000d44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d48:	d3f6      	bcc.n	8000d38 <CopyDataInit>
	ldr	r2, =_sbss
 8000d4a:	4a0b      	ldr	r2, [pc, #44]	; (8000d78 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000d4c:	e002      	b.n	8000d54 <LoopFillZerobss>

08000d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d50:	f842 3b04 	str.w	r3, [r2], #4

08000d54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000d56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d58:	d3f9      	bcc.n	8000d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5a:	f000 f9c9 	bl	80010f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f000 fb77 	bl	8001450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d62:	f7ff fefb 	bl	8000b5c <main>
	bx	lr
 8000d66:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d68:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000d6c:	080014f4 	.word	0x080014f4
	ldr	r0, =_sdata
 8000d70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d74:	20000054 	.word	0x20000054
	ldr	r2, =_sbss
 8000d78:	20000054 	.word	0x20000054
	ldr	r3, = _ebss
 8000d7c:	200000b4 	.word	0x200000b4

08000d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d80:	e7fe      	b.n	8000d80 <ADC1_2_IRQHandler>
	...

08000d84 <TIM2_IRQHandler>:
//pwd[4] = "123456";
//pwd[5] = "111111";
char aux[7];

void TIM2_IRQHandler(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  GPIO_Write(GPIOA, (GPIO_ReadOutputData(GPIOA) & 0xFF0F) | varredura[coluna++]);
 8000d88:	4813      	ldr	r0, [pc, #76]	; (8000dd8 <TIM2_IRQHandler+0x54>)
 8000d8a:	f7ff fb87 	bl	800049c <GPIO_ReadOutputData>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b21b      	sxth	r3, r3
 8000d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <TIM2_IRQHandler+0x58>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	1c59      	adds	r1, r3, #1
 8000d9e:	b2c8      	uxtb	r0, r1
 8000da0:	490e      	ldr	r1, [pc, #56]	; (8000ddc <TIM2_IRQHandler+0x58>)
 8000da2:	7008      	strb	r0, [r1, #0]
 8000da4:	4619      	mov	r1, r3
 8000da6:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <TIM2_IRQHandler+0x5c>)
 8000da8:	5c5b      	ldrb	r3, [r3, r1]
 8000daa:	b21b      	sxth	r3, r3
 8000dac:	4313      	orrs	r3, r2
 8000dae:	b21b      	sxth	r3, r3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	4619      	mov	r1, r3
 8000db4:	4808      	ldr	r0, [pc, #32]	; (8000dd8 <TIM2_IRQHandler+0x54>)
 8000db6:	f7ff fb7d 	bl	80004b4 <GPIO_Write>

  if (coluna == 4)
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <TIM2_IRQHandler+0x58>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b04      	cmp	r3, #4
 8000dc0:	d102      	bne.n	8000dc8 <TIM2_IRQHandler+0x44>
    coluna = 0;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <TIM2_IRQHandler+0x58>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]

  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000dc8:	2101      	movs	r1, #1
 8000dca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000dce:	f7ff fd6b 	bl	80008a8 <TIM_ClearITPendingBit>
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	40010800 	.word	0x40010800
 8000ddc:	20000074 	.word	0x20000074
 8000de0:	20000014 	.word	0x20000014

08000de4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
  sprintf(msg, "%c\r\n", teclado[0][coluna]);
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <EXTI0_IRQHandler+0x9c>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	4b24      	ldr	r3, [pc, #144]	; (8000e84 <EXTI0_IRQHandler+0xa0>)
 8000df2:	5c9b      	ldrb	r3, [r3, r2]
 8000df4:	461a      	mov	r2, r3
 8000df6:	4924      	ldr	r1, [pc, #144]	; (8000e88 <EXTI0_IRQHandler+0xa4>)
 8000df8:	4824      	ldr	r0, [pc, #144]	; (8000e8c <EXTI0_IRQHandler+0xa8>)
 8000dfa:	f000 fb12 	bl	8001422 <siprintf>
  Print_USART3(msg);
 8000dfe:	4823      	ldr	r0, [pc, #140]	; (8000e8c <EXTI0_IRQHandler+0xa8>)
 8000e00:	f7ff ff34 	bl	8000c6c <Print_USART3>
  aux[abc] = teclado[0][coluna];
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <EXTI0_IRQHandler+0xac>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1d      	ldr	r2, [pc, #116]	; (8000e80 <EXTI0_IRQHandler+0x9c>)
 8000e0a:	7812      	ldrb	r2, [r2, #0]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <EXTI0_IRQHandler+0xa0>)
 8000e10:	5c51      	ldrb	r1, [r2, r1]
 8000e12:	4a20      	ldr	r2, [pc, #128]	; (8000e94 <EXTI0_IRQHandler+0xb0>)
 8000e14:	54d1      	strb	r1, [r2, r3]
  abc++;
 8000e16:	4b1e      	ldr	r3, [pc, #120]	; (8000e90 <EXTI0_IRQHandler+0xac>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a1c      	ldr	r2, [pc, #112]	; (8000e90 <EXTI0_IRQHandler+0xac>)
 8000e1e:	6013      	str	r3, [r2, #0]
  if (abc == 6)
 8000e20:	4b1b      	ldr	r3, [pc, #108]	; (8000e90 <EXTI0_IRQHandler+0xac>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d124      	bne.n	8000e72 <EXTI0_IRQHandler+0x8e>
  {
    abc = 0;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <EXTI0_IRQHandler+0xac>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 6; i++)
 8000e2e:	2300      	movs	r3, #0
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	e013      	b.n	8000e5c <EXTI0_IRQHandler+0x78>
    {
      if (strcmp(aux, pwd[i]) == 0)
 8000e34:	687a      	ldr	r2, [r7, #4]
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	4a16      	ldr	r2, [pc, #88]	; (8000e98 <EXTI0_IRQHandler+0xb4>)
 8000e3e:	4413      	add	r3, r2
 8000e40:	4619      	mov	r1, r3
 8000e42:	4814      	ldr	r0, [pc, #80]	; (8000e94 <EXTI0_IRQHandler+0xb0>)
 8000e44:	f7ff f982 	bl	800014c <strcmp>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <EXTI0_IRQHandler+0x72>
      {
        Print_USART3("Senha correta\r\n");
 8000e4e:	4813      	ldr	r0, [pc, #76]	; (8000e9c <EXTI0_IRQHandler+0xb8>)
 8000e50:	f7ff ff0c 	bl	8000c6c <Print_USART3>
        return;
 8000e54:	e010      	b.n	8000e78 <EXTI0_IRQHandler+0x94>
    for(int i = 0; i < 6; i++)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3301      	adds	r3, #1
 8000e5a:	607b      	str	r3, [r7, #4]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2b05      	cmp	r3, #5
 8000e60:	dde8      	ble.n	8000e34 <EXTI0_IRQHandler+0x50>
      }
    }
    Print_USART3("Senha incorreta\r\n");
 8000e62:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <EXTI0_IRQHandler+0xbc>)
 8000e64:	f7ff ff02 	bl	8000c6c <Print_USART3>

    memset(aux, 0, sizeof(aux));
 8000e68:	2207      	movs	r2, #7
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	4809      	ldr	r0, [pc, #36]	; (8000e94 <EXTI0_IRQHandler+0xb0>)
 8000e6e:	f000 fb13 	bl	8001498 <memset>
  }
  EXTI_ClearITPendingBit(EXTI_Line0);
 8000e72:	2001      	movs	r0, #1
 8000e74:	f7ff fa48 	bl	8000308 <EXTI_ClearITPendingBit>
}
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20000074 	.word	0x20000074
 8000e84:	20000018 	.word	0x20000018
 8000e88:	080014c0 	.word	0x080014c0
 8000e8c:	20000078 	.word	0x20000078
 8000e90:	20000070 	.word	0x20000070
 8000e94:	200000ac 	.word	0x200000ac
 8000e98:	20000028 	.word	0x20000028
 8000e9c:	080014c8 	.word	0x080014c8
 8000ea0:	080014d8 	.word	0x080014d8

08000ea4 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
  sprintf(msg, "%c\r\n", teclado[1][coluna]);
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <EXTI1_IRQHandler+0xa0>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	4b25      	ldr	r3, [pc, #148]	; (8000f48 <EXTI1_IRQHandler+0xa4>)
 8000eb2:	4413      	add	r3, r2
 8000eb4:	791b      	ldrb	r3, [r3, #4]
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4924      	ldr	r1, [pc, #144]	; (8000f4c <EXTI1_IRQHandler+0xa8>)
 8000eba:	4825      	ldr	r0, [pc, #148]	; (8000f50 <EXTI1_IRQHandler+0xac>)
 8000ebc:	f000 fab1 	bl	8001422 <siprintf>
  Print_USART3(msg);
 8000ec0:	4823      	ldr	r0, [pc, #140]	; (8000f50 <EXTI1_IRQHandler+0xac>)
 8000ec2:	f7ff fed3 	bl	8000c6c <Print_USART3>
  aux[abc] = teclado[1][coluna];
 8000ec6:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <EXTI1_IRQHandler+0xb0>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a1e      	ldr	r2, [pc, #120]	; (8000f44 <EXTI1_IRQHandler+0xa0>)
 8000ecc:	7812      	ldrb	r2, [r2, #0]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <EXTI1_IRQHandler+0xa4>)
 8000ed2:	440a      	add	r2, r1
 8000ed4:	7911      	ldrb	r1, [r2, #4]
 8000ed6:	4a20      	ldr	r2, [pc, #128]	; (8000f58 <EXTI1_IRQHandler+0xb4>)
 8000ed8:	54d1      	strb	r1, [r2, r3]
  abc++;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <EXTI1_IRQHandler+0xb0>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <EXTI1_IRQHandler+0xb0>)
 8000ee2:	6013      	str	r3, [r2, #0]
  if (abc == 6)
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <EXTI1_IRQHandler+0xb0>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b06      	cmp	r3, #6
 8000eea:	d124      	bne.n	8000f36 <EXTI1_IRQHandler+0x92>
  {
    abc = 0;
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <EXTI1_IRQHandler+0xb0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 6; i++)
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	607b      	str	r3, [r7, #4]
 8000ef6:	e016      	b.n	8000f26 <EXTI1_IRQHandler+0x82>
    {
      if (strcmp(aux, pwd[i]) == 0)
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	4613      	mov	r3, r2
 8000efc:	00db      	lsls	r3, r3, #3
 8000efe:	1a9b      	subs	r3, r3, r2
 8000f00:	4a16      	ldr	r2, [pc, #88]	; (8000f5c <EXTI1_IRQHandler+0xb8>)
 8000f02:	4413      	add	r3, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	4814      	ldr	r0, [pc, #80]	; (8000f58 <EXTI1_IRQHandler+0xb4>)
 8000f08:	f7ff f920 	bl	800014c <strcmp>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d103      	bne.n	8000f1a <EXTI1_IRQHandler+0x76>
        Print_USART3("Senha correta\r\n");
 8000f12:	4813      	ldr	r0, [pc, #76]	; (8000f60 <EXTI1_IRQHandler+0xbc>)
 8000f14:	f7ff feaa 	bl	8000c6c <Print_USART3>
 8000f18:	e002      	b.n	8000f20 <EXTI1_IRQHandler+0x7c>
      else
        Print_USART3("Senha incorreta\r\n");
 8000f1a:	4812      	ldr	r0, [pc, #72]	; (8000f64 <EXTI1_IRQHandler+0xc0>)
 8000f1c:	f7ff fea6 	bl	8000c6c <Print_USART3>
    for(int i = 0; i < 6; i++)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	3301      	adds	r3, #1
 8000f24:	607b      	str	r3, [r7, #4]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2b05      	cmp	r3, #5
 8000f2a:	dde5      	ble.n	8000ef8 <EXTI1_IRQHandler+0x54>
    }

    memset(aux, 0, sizeof(aux));
 8000f2c:	2207      	movs	r2, #7
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <EXTI1_IRQHandler+0xb4>)
 8000f32:	f000 fab1 	bl	8001498 <memset>
  }
  EXTI_ClearITPendingBit(EXTI_Line1);
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff f9e6 	bl	8000308 <EXTI_ClearITPendingBit>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000074 	.word	0x20000074
 8000f48:	20000018 	.word	0x20000018
 8000f4c:	080014c0 	.word	0x080014c0
 8000f50:	20000078 	.word	0x20000078
 8000f54:	20000070 	.word	0x20000070
 8000f58:	200000ac 	.word	0x200000ac
 8000f5c:	20000028 	.word	0x20000028
 8000f60:	080014c8 	.word	0x080014c8
 8000f64:	080014d8 	.word	0x080014d8

08000f68 <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
  sprintf(msg, "%c\r\n", teclado[2][coluna]);
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <EXTI2_IRQHandler+0xa0>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <EXTI2_IRQHandler+0xa4>)
 8000f76:	4413      	add	r3, r2
 8000f78:	7a1b      	ldrb	r3, [r3, #8]
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4924      	ldr	r1, [pc, #144]	; (8001010 <EXTI2_IRQHandler+0xa8>)
 8000f7e:	4825      	ldr	r0, [pc, #148]	; (8001014 <EXTI2_IRQHandler+0xac>)
 8000f80:	f000 fa4f 	bl	8001422 <siprintf>
  Print_USART3(msg);
 8000f84:	4823      	ldr	r0, [pc, #140]	; (8001014 <EXTI2_IRQHandler+0xac>)
 8000f86:	f7ff fe71 	bl	8000c6c <Print_USART3>
  aux[abc] = teclado[2][coluna];
 8000f8a:	4b23      	ldr	r3, [pc, #140]	; (8001018 <EXTI2_IRQHandler+0xb0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <EXTI2_IRQHandler+0xa0>)
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	4611      	mov	r1, r2
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <EXTI2_IRQHandler+0xa4>)
 8000f96:	440a      	add	r2, r1
 8000f98:	7a11      	ldrb	r1, [r2, #8]
 8000f9a:	4a20      	ldr	r2, [pc, #128]	; (800101c <EXTI2_IRQHandler+0xb4>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
  abc++;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <EXTI2_IRQHandler+0xb0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	4a1c      	ldr	r2, [pc, #112]	; (8001018 <EXTI2_IRQHandler+0xb0>)
 8000fa6:	6013      	str	r3, [r2, #0]
  if (abc == 6)
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <EXTI2_IRQHandler+0xb0>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	2b06      	cmp	r3, #6
 8000fae:	d124      	bne.n	8000ffa <EXTI2_IRQHandler+0x92>
  {
    abc = 0;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <EXTI2_IRQHandler+0xb0>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 6; i++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	607b      	str	r3, [r7, #4]
 8000fba:	e016      	b.n	8000fea <EXTI2_IRQHandler+0x82>
    {
      if (strcmp(aux, pwd[i]) == 0)
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	1a9b      	subs	r3, r3, r2
 8000fc4:	4a16      	ldr	r2, [pc, #88]	; (8001020 <EXTI2_IRQHandler+0xb8>)
 8000fc6:	4413      	add	r3, r2
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4814      	ldr	r0, [pc, #80]	; (800101c <EXTI2_IRQHandler+0xb4>)
 8000fcc:	f7ff f8be 	bl	800014c <strcmp>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d103      	bne.n	8000fde <EXTI2_IRQHandler+0x76>
        Print_USART3("Senha correta\r\n");
 8000fd6:	4813      	ldr	r0, [pc, #76]	; (8001024 <EXTI2_IRQHandler+0xbc>)
 8000fd8:	f7ff fe48 	bl	8000c6c <Print_USART3>
 8000fdc:	e002      	b.n	8000fe4 <EXTI2_IRQHandler+0x7c>
      else
        Print_USART3("Senha incorreta\r\n");
 8000fde:	4812      	ldr	r0, [pc, #72]	; (8001028 <EXTI2_IRQHandler+0xc0>)
 8000fe0:	f7ff fe44 	bl	8000c6c <Print_USART3>
    for(int i = 0; i < 6; i++)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b05      	cmp	r3, #5
 8000fee:	dde5      	ble.n	8000fbc <EXTI2_IRQHandler+0x54>
    }

    memset(aux, 0, sizeof(aux));
 8000ff0:	2207      	movs	r2, #7
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4809      	ldr	r0, [pc, #36]	; (800101c <EXTI2_IRQHandler+0xb4>)
 8000ff6:	f000 fa4f 	bl	8001498 <memset>
  }
  EXTI_ClearITPendingBit(EXTI_Line2);
 8000ffa:	2004      	movs	r0, #4
 8000ffc:	f7ff f984 	bl	8000308 <EXTI_ClearITPendingBit>
}
 8001000:	bf00      	nop
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000074 	.word	0x20000074
 800100c:	20000018 	.word	0x20000018
 8001010:	080014c0 	.word	0x080014c0
 8001014:	20000078 	.word	0x20000078
 8001018:	20000070 	.word	0x20000070
 800101c:	200000ac 	.word	0x200000ac
 8001020:	20000028 	.word	0x20000028
 8001024:	080014c8 	.word	0x080014c8
 8001028:	080014d8 	.word	0x080014d8

0800102c <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  sprintf(msg, "%c\r\n", teclado[3][coluna]);
 8001032:	4b26      	ldr	r3, [pc, #152]	; (80010cc <EXTI3_IRQHandler+0xa0>)
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <EXTI3_IRQHandler+0xa4>)
 800103a:	4413      	add	r3, r2
 800103c:	7b1b      	ldrb	r3, [r3, #12]
 800103e:	461a      	mov	r2, r3
 8001040:	4924      	ldr	r1, [pc, #144]	; (80010d4 <EXTI3_IRQHandler+0xa8>)
 8001042:	4825      	ldr	r0, [pc, #148]	; (80010d8 <EXTI3_IRQHandler+0xac>)
 8001044:	f000 f9ed 	bl	8001422 <siprintf>
  Print_USART3(msg);
 8001048:	4823      	ldr	r0, [pc, #140]	; (80010d8 <EXTI3_IRQHandler+0xac>)
 800104a:	f7ff fe0f 	bl	8000c6c <Print_USART3>
  aux[abc] = teclado[3][coluna];
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <EXTI3_IRQHandler+0xb0>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <EXTI3_IRQHandler+0xa0>)
 8001054:	7812      	ldrb	r2, [r2, #0]
 8001056:	4611      	mov	r1, r2
 8001058:	4a1d      	ldr	r2, [pc, #116]	; (80010d0 <EXTI3_IRQHandler+0xa4>)
 800105a:	440a      	add	r2, r1
 800105c:	7b11      	ldrb	r1, [r2, #12]
 800105e:	4a20      	ldr	r2, [pc, #128]	; (80010e0 <EXTI3_IRQHandler+0xb4>)
 8001060:	54d1      	strb	r1, [r2, r3]
  abc++;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <EXTI3_IRQHandler+0xb0>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	3301      	adds	r3, #1
 8001068:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <EXTI3_IRQHandler+0xb0>)
 800106a:	6013      	str	r3, [r2, #0]
  if (abc == 6)
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <EXTI3_IRQHandler+0xb0>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b06      	cmp	r3, #6
 8001072:	d124      	bne.n	80010be <EXTI3_IRQHandler+0x92>
  {
    abc = 0;
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <EXTI3_IRQHandler+0xb0>)
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < 6; i++)
 800107a:	2300      	movs	r3, #0
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	e016      	b.n	80010ae <EXTI3_IRQHandler+0x82>
    {
      if (strcmp(aux, pwd[i]) == 0)
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	4613      	mov	r3, r2
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	1a9b      	subs	r3, r3, r2
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <EXTI3_IRQHandler+0xb8>)
 800108a:	4413      	add	r3, r2
 800108c:	4619      	mov	r1, r3
 800108e:	4814      	ldr	r0, [pc, #80]	; (80010e0 <EXTI3_IRQHandler+0xb4>)
 8001090:	f7ff f85c 	bl	800014c <strcmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d103      	bne.n	80010a2 <EXTI3_IRQHandler+0x76>
        Print_USART3("Senha correta\r\n");
 800109a:	4813      	ldr	r0, [pc, #76]	; (80010e8 <EXTI3_IRQHandler+0xbc>)
 800109c:	f7ff fde6 	bl	8000c6c <Print_USART3>
 80010a0:	e002      	b.n	80010a8 <EXTI3_IRQHandler+0x7c>
      else
        Print_USART3("Senha incorreta\r\n");
 80010a2:	4812      	ldr	r0, [pc, #72]	; (80010ec <EXTI3_IRQHandler+0xc0>)
 80010a4:	f7ff fde2 	bl	8000c6c <Print_USART3>
    for(int i = 0; i < 6; i++)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3301      	adds	r3, #1
 80010ac:	607b      	str	r3, [r7, #4]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b05      	cmp	r3, #5
 80010b2:	dde5      	ble.n	8001080 <EXTI3_IRQHandler+0x54>
    }

    memset(aux, 0, sizeof(aux));
 80010b4:	2207      	movs	r2, #7
 80010b6:	2100      	movs	r1, #0
 80010b8:	4809      	ldr	r0, [pc, #36]	; (80010e0 <EXTI3_IRQHandler+0xb4>)
 80010ba:	f000 f9ed 	bl	8001498 <memset>
  }
  EXTI_ClearITPendingBit(EXTI_Line3);
 80010be:	2008      	movs	r0, #8
 80010c0:	f7ff f922 	bl	8000308 <EXTI_ClearITPendingBit>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000074 	.word	0x20000074
 80010d0:	20000018 	.word	0x20000018
 80010d4:	080014c0 	.word	0x080014c0
 80010d8:	20000078 	.word	0x20000078
 80010dc:	20000070 	.word	0x20000070
 80010e0:	200000ac 	.word	0x200000ac
 80010e4:	20000028 	.word	0x20000028
 80010e8:	080014c8 	.word	0x080014c8
 80010ec:	080014d8 	.word	0x080014d8

080010f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80010f4:	4a15      	ldr	r2, [pc, #84]	; (800114c <SystemInit+0x5c>)
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <SystemInit+0x5c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f043 0301 	orr.w	r3, r3, #1
 80010fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001100:	4912      	ldr	r1, [pc, #72]	; (800114c <SystemInit+0x5c>)
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <SystemInit+0x5c>)
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4b12      	ldr	r3, [pc, #72]	; (8001150 <SystemInit+0x60>)
 8001108:	4013      	ands	r3, r2
 800110a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800110c:	4a0f      	ldr	r2, [pc, #60]	; (800114c <SystemInit+0x5c>)
 800110e:	4b0f      	ldr	r3, [pc, #60]	; (800114c <SystemInit+0x5c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800111a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800111c:	4a0b      	ldr	r2, [pc, #44]	; (800114c <SystemInit+0x5c>)
 800111e:	4b0b      	ldr	r3, [pc, #44]	; (800114c <SystemInit+0x5c>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001126:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001128:	4a08      	ldr	r2, [pc, #32]	; (800114c <SystemInit+0x5c>)
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <SystemInit+0x5c>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001132:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <SystemInit+0x5c>)
 8001136:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800113a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800113c:	f000 f80c 	bl	8001158 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001140:	4b04      	ldr	r3, [pc, #16]	; (8001154 <SystemInit+0x64>)
 8001142:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001146:	609a      	str	r2, [r3, #8]
#endif 
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40021000 	.word	0x40021000
 8001150:	f8ff0000 	.word	0xf8ff0000
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 800115c:	f000 f802 	bl	8001164 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	2300      	movs	r3, #0
 8001170:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001172:	4a3a      	ldr	r2, [pc, #232]	; (800125c <SetSysClockTo72+0xf8>)
 8001174:	4b39      	ldr	r3, [pc, #228]	; (800125c <SetSysClockTo72+0xf8>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800117c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <SetSysClockTo72+0xf8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001186:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3301      	adds	r3, #1
 800118c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d103      	bne.n	800119c <SetSysClockTo72+0x38>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800119a:	d1f0      	bne.n	800117e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800119c:	4b2f      	ldr	r3, [pc, #188]	; (800125c <SetSysClockTo72+0xf8>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d002      	beq.n	80011ae <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80011a8:	2301      	movs	r3, #1
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	e001      	b.n	80011b2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d14b      	bne.n	8001250 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 80011b8:	4a29      	ldr	r2, [pc, #164]	; (8001260 <SetSysClockTo72+0xfc>)
 80011ba:	4b29      	ldr	r3, [pc, #164]	; (8001260 <SetSysClockTo72+0xfc>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f043 0310 	orr.w	r3, r3, #16
 80011c2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 80011c4:	4a26      	ldr	r2, [pc, #152]	; (8001260 <SetSysClockTo72+0xfc>)
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <SetSysClockTo72+0xfc>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f023 0303 	bic.w	r3, r3, #3
 80011ce:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 80011d0:	4a23      	ldr	r2, [pc, #140]	; (8001260 <SetSysClockTo72+0xfc>)
 80011d2:	4b23      	ldr	r3, [pc, #140]	; (8001260 <SetSysClockTo72+0xfc>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f043 0302 	orr.w	r3, r3, #2
 80011da:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80011dc:	4a1f      	ldr	r2, [pc, #124]	; (800125c <SetSysClockTo72+0xf8>)
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <SetSysClockTo72+0xf8>)
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80011e4:	4a1d      	ldr	r2, [pc, #116]	; (800125c <SetSysClockTo72+0xf8>)
 80011e6:	4b1d      	ldr	r3, [pc, #116]	; (800125c <SetSysClockTo72+0xf8>)
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80011ec:	4a1b      	ldr	r2, [pc, #108]	; (800125c <SetSysClockTo72+0xf8>)
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <SetSysClockTo72+0xf8>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80011f8:	4a18      	ldr	r2, [pc, #96]	; (800125c <SetSysClockTo72+0xf8>)
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <SetSysClockTo72+0xf8>)
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001202:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <SetSysClockTo72+0xf8>)
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <SetSysClockTo72+0xf8>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800120e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001210:	4a12      	ldr	r2, [pc, #72]	; (800125c <SetSysClockTo72+0xf8>)
 8001212:	4b12      	ldr	r3, [pc, #72]	; (800125c <SetSysClockTo72+0xf8>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800121a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800121c:	bf00      	nop
 800121e:	4b0f      	ldr	r3, [pc, #60]	; (800125c <SetSysClockTo72+0xf8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d0f9      	beq.n	800121e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800122a:	4a0c      	ldr	r2, [pc, #48]	; (800125c <SetSysClockTo72+0xf8>)
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <SetSysClockTo72+0xf8>)
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f023 0303 	bic.w	r3, r3, #3
 8001234:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001236:	4a09      	ldr	r2, [pc, #36]	; (800125c <SetSysClockTo72+0xf8>)
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <SetSysClockTo72+0xf8>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001242:	bf00      	nop
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SetSysClockTo72+0xf8>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 030c 	and.w	r3, r3, #12
 800124c:	2b08      	cmp	r3, #8
 800124e:	d1f9      	bne.n	8001244 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001250:	bf00      	nop
 8001252:	370c      	adds	r7, #12
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	40021000 	.word	0x40021000
 8001260:	40022000 	.word	0x40022000

08001264 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8001264:	b480      	push	{r7}
 8001266:	b087      	sub	sp, #28
 8001268:	af00      	add	r7, sp, #0
 800126a:	60f8      	str	r0, [r7, #12]
 800126c:	60b9      	str	r1, [r7, #8]
 800126e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001270:	2301      	movs	r3, #1
 8001272:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001274:	e004      	b.n	8001280 <ts_itoa+0x1c>
		div *= base;
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	68ba      	ldr	r2, [r7, #8]
 8001284:	fbb2 f2f3 	udiv	r2, r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	429a      	cmp	r2, r3
 800128c:	d2f3      	bcs.n	8001276 <ts_itoa+0x12>

	while (div != 0)
 800128e:	e029      	b.n	80012e4 <ts_itoa+0x80>
	{
		int num = d/div;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	fbb2 f3f3 	udiv	r3, r2, r3
 8001298:	613b      	str	r3, [r7, #16]
		d = d%div;
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	fbb3 f1f2 	udiv	r1, r3, r2
 80012a2:	fb02 f201 	mul.w	r2, r2, r1
 80012a6:	1a9b      	subs	r3, r3, r2
 80012a8:	60bb      	str	r3, [r7, #8]
		div /= base;
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	2b09      	cmp	r3, #9
 80012b8:	dd0a      	ble.n	80012d0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1c59      	adds	r1, r3, #1
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	6011      	str	r1, [r2, #0]
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	b2d2      	uxtb	r2, r2
 80012c8:	3237      	adds	r2, #55	; 0x37
 80012ca:	b2d2      	uxtb	r2, r2
 80012cc:	701a      	strb	r2, [r3, #0]
 80012ce:	e009      	b.n	80012e4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1c59      	adds	r1, r3, #1
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	6011      	str	r1, [r2, #0]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	b2d2      	uxtb	r2, r2
 80012de:	3230      	adds	r2, #48	; 0x30
 80012e0:	b2d2      	uxtb	r2, r2
 80012e2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d1d2      	bne.n	8001290 <ts_itoa+0x2c>
	}
}
 80012ea:	bf00      	nop
 80012ec:	371c      	adds	r7, #28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8001304:	e07d      	b.n	8001402 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b25      	cmp	r3, #37	; 0x25
 800130c:	d171      	bne.n	80013f2 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	3301      	adds	r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b64      	cmp	r3, #100	; 0x64
 800131a:	d01e      	beq.n	800135a <ts_formatstring+0x66>
 800131c:	2b64      	cmp	r3, #100	; 0x64
 800131e:	dc06      	bgt.n	800132e <ts_formatstring+0x3a>
 8001320:	2b58      	cmp	r3, #88	; 0x58
 8001322:	d050      	beq.n	80013c6 <ts_formatstring+0xd2>
 8001324:	2b63      	cmp	r3, #99	; 0x63
 8001326:	d00e      	beq.n	8001346 <ts_formatstring+0x52>
 8001328:	2b25      	cmp	r3, #37	; 0x25
 800132a:	d058      	beq.n	80013de <ts_formatstring+0xea>
 800132c:	e05d      	b.n	80013ea <ts_formatstring+0xf6>
 800132e:	2b73      	cmp	r3, #115	; 0x73
 8001330:	d02b      	beq.n	800138a <ts_formatstring+0x96>
 8001332:	2b73      	cmp	r3, #115	; 0x73
 8001334:	dc02      	bgt.n	800133c <ts_formatstring+0x48>
 8001336:	2b69      	cmp	r3, #105	; 0x69
 8001338:	d00f      	beq.n	800135a <ts_formatstring+0x66>
 800133a:	e056      	b.n	80013ea <ts_formatstring+0xf6>
 800133c:	2b75      	cmp	r3, #117	; 0x75
 800133e:	d037      	beq.n	80013b0 <ts_formatstring+0xbc>
 8001340:	2b78      	cmp	r3, #120	; 0x78
 8001342:	d040      	beq.n	80013c6 <ts_formatstring+0xd2>
 8001344:	e051      	b.n	80013ea <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1c5a      	adds	r2, r3, #1
 800134a:	60fa      	str	r2, [r7, #12]
 800134c:	687a      	ldr	r2, [r7, #4]
 800134e:	1d11      	adds	r1, r2, #4
 8001350:	6079      	str	r1, [r7, #4]
 8001352:	6812      	ldr	r2, [r2, #0]
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	701a      	strb	r2, [r3, #0]
				break;
 8001358:	e047      	b.n	80013ea <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	1d1a      	adds	r2, r3, #4
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8001364:	69fb      	ldr	r3, [r7, #28]
 8001366:	2b00      	cmp	r3, #0
 8001368:	da07      	bge.n	800137a <ts_formatstring+0x86>
					{
						val *= -1;
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	425b      	negs	r3, r3
 800136e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	1c5a      	adds	r2, r3, #1
 8001374:	60fa      	str	r2, [r7, #12]
 8001376:	222d      	movs	r2, #45	; 0x2d
 8001378:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 800137a:	69f9      	ldr	r1, [r7, #28]
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	220a      	movs	r2, #10
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff ff6e 	bl	8001264 <ts_itoa>
				}
				break;
 8001388:	e02f      	b.n	80013ea <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	1d1a      	adds	r2, r3, #4
 800138e:	607a      	str	r2, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8001394:	e007      	b.n	80013a6 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	60fa      	str	r2, [r7, #12]
 800139c:	69ba      	ldr	r2, [r7, #24]
 800139e:	1c51      	adds	r1, r2, #1
 80013a0:	61b9      	str	r1, [r7, #24]
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1f3      	bne.n	8001396 <ts_formatstring+0xa2>
					}
				}
				break;
 80013ae:	e01c      	b.n	80013ea <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	1d1a      	adds	r2, r3, #4
 80013b4:	607a      	str	r2, [r7, #4]
 80013b6:	6819      	ldr	r1, [r3, #0]
 80013b8:	f107 030c 	add.w	r3, r7, #12
 80013bc:	220a      	movs	r2, #10
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff ff50 	bl	8001264 <ts_itoa>
				break;
 80013c4:	e011      	b.n	80013ea <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	1d1a      	adds	r2, r3, #4
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4619      	mov	r1, r3
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2210      	movs	r2, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff ff44 	bl	8001264 <ts_itoa>
				break;
 80013dc:	e005      	b.n	80013ea <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1c5a      	adds	r2, r3, #1
 80013e2:	60fa      	str	r2, [r7, #12]
 80013e4:	2225      	movs	r2, #37	; 0x25
 80013e6:	701a      	strb	r2, [r3, #0]
				  break;
 80013e8:	bf00      	nop
			}
			fmt++;
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	e007      	b.n	8001402 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	60fa      	str	r2, [r7, #12]
 80013f8:	68ba      	ldr	r2, [r7, #8]
 80013fa:	1c51      	adds	r1, r2, #1
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	7812      	ldrb	r2, [r2, #0]
 8001400:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	f47f af7d 	bne.w	8001306 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	461a      	mov	r2, r3
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	1ad3      	subs	r3, r2, r3
}
 800141a:	4618      	mov	r0, r3
 800141c:	3720      	adds	r7, #32
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8001422:	b40e      	push	{r1, r2, r3}
 8001424:	b580      	push	{r7, lr}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	69f9      	ldr	r1, [r7, #28]
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff ff5c 	bl	80012f4 <ts_formatstring>
 800143c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 800143e:	68fb      	ldr	r3, [r7, #12]
}
 8001440:	4618      	mov	r0, r3
 8001442:	3714      	adds	r7, #20
 8001444:	46bd      	mov	sp, r7
 8001446:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800144a:	b003      	add	sp, #12
 800144c:	4770      	bx	lr
	...

08001450 <__libc_init_array>:
 8001450:	b570      	push	{r4, r5, r6, lr}
 8001452:	2500      	movs	r5, #0
 8001454:	4e0c      	ldr	r6, [pc, #48]	; (8001488 <__libc_init_array+0x38>)
 8001456:	4c0d      	ldr	r4, [pc, #52]	; (800148c <__libc_init_array+0x3c>)
 8001458:	1ba4      	subs	r4, r4, r6
 800145a:	10a4      	asrs	r4, r4, #2
 800145c:	42a5      	cmp	r5, r4
 800145e:	d109      	bne.n	8001474 <__libc_init_array+0x24>
 8001460:	f000 f822 	bl	80014a8 <_init>
 8001464:	2500      	movs	r5, #0
 8001466:	4e0a      	ldr	r6, [pc, #40]	; (8001490 <__libc_init_array+0x40>)
 8001468:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <__libc_init_array+0x44>)
 800146a:	1ba4      	subs	r4, r4, r6
 800146c:	10a4      	asrs	r4, r4, #2
 800146e:	42a5      	cmp	r5, r4
 8001470:	d105      	bne.n	800147e <__libc_init_array+0x2e>
 8001472:	bd70      	pop	{r4, r5, r6, pc}
 8001474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001478:	4798      	blx	r3
 800147a:	3501      	adds	r5, #1
 800147c:	e7ee      	b.n	800145c <__libc_init_array+0xc>
 800147e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001482:	4798      	blx	r3
 8001484:	3501      	adds	r5, #1
 8001486:	e7f2      	b.n	800146e <__libc_init_array+0x1e>
 8001488:	080014ec 	.word	0x080014ec
 800148c:	080014ec 	.word	0x080014ec
 8001490:	080014ec 	.word	0x080014ec
 8001494:	080014f0 	.word	0x080014f0

08001498 <memset>:
 8001498:	4603      	mov	r3, r0
 800149a:	4402      	add	r2, r0
 800149c:	4293      	cmp	r3, r2
 800149e:	d100      	bne.n	80014a2 <memset+0xa>
 80014a0:	4770      	bx	lr
 80014a2:	f803 1b01 	strb.w	r1, [r3], #1
 80014a6:	e7f9      	b.n	800149c <memset+0x4>

080014a8 <_init>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr

080014b4 <_fini>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	bf00      	nop
 80014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ba:	bc08      	pop	{r3}
 80014bc:	469e      	mov	lr, r3
 80014be:	4770      	bx	lr
