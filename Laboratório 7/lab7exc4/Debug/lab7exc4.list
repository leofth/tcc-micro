
lab7exc4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000010dc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  080011e8  080011e8  000111e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080011f4  080011f4  000111f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080011f8  080011f8  000111f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000111fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  20000000  080011fc  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000020  080011fc  00020020  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000111fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005d88  00000000  00000000  00011225  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000ff6  00000000  00000000  00016fad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000778  00000000  00000000  00017fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006d0  00000000  00000000  00018720  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000027c9  00000000  00000000  00018df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000258b  00000000  00000000  0001b5b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001db44  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002054  00000000  00000000  0001dbc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001fc14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	080011d0 	.word	0x080011d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	080011d0 	.word	0x080011d0

0800014c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000154:	2300      	movs	r3, #0
 8000156:	617b      	str	r3, [r7, #20]
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
 800015c:	230f      	movs	r3, #15
 800015e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d03a      	beq.n	80001de <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000168:	4b27      	ldr	r3, [pc, #156]	; (8000208 <NVIC_Init+0xbc>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	43db      	mvns	r3, r3
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	f003 0307 	and.w	r3, r3, #7
 8000174:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	f1c3 0304 	rsb	r3, r3, #4
 800017c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	fa22 f303 	lsr.w	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	461a      	mov	r2, r3
 800018e:	693b      	ldr	r3, [r7, #16]
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	4313      	orrs	r3, r2
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <NVIC_Init+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	6979      	ldr	r1, [r7, #20]
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	4413      	add	r3, r2
 80001b8:	460a      	mov	r2, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <NVIC_Init+0xc0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	095b      	lsrs	r3, r3, #5
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	f003 031f 	and.w	r3, r3, #31
 80001d2:	2101      	movs	r1, #1
 80001d4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001dc:	e00f      	b.n	80001fe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001de:	490b      	ldr	r1, [pc, #44]	; (800020c <NVIC_Init+0xc0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	2201      	movs	r2, #1
 80001f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f6:	f100 0320 	add.w	r3, r0, #32
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	371c      	adds	r7, #28
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800021a:	2300      	movs	r3, #0
 800021c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800021e:	2300      	movs	r3, #0
 8000220:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfChannel));

  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	685b      	ldr	r3, [r3, #4]
 8000226:	60fb      	str	r3, [r7, #12]
  /* Clear DUALMOD and SCAN bits */
  tmpreg1 &= CR1_CLEAR_Mask;
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800022e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000232:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: Dual mode and scan conversion mode */
  /* Set DUALMOD bits according to ADC_Mode value */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_Mode | ((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8));
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	681a      	ldr	r2, [r3, #0]
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	791b      	ldrb	r3, [r3, #4]
 800023c:	021b      	lsls	r3, r3, #8
 800023e:	4313      	orrs	r3, r2
 8000240:	68fa      	ldr	r2, [r7, #12]
 8000242:	4313      	orrs	r3, r2
 8000244:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	605a      	str	r2, [r3, #4]

  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_Mask;
 8000252:	68fa      	ldr	r2, [r7, #12]
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <ADC_Init+0xa0>)
 8000256:	4013      	ands	r3, r2
 8000258:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	68da      	ldr	r2, [r3, #12]
 800025e:	683b      	ldr	r3, [r7, #0]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	431a      	orrs	r2, r3
            ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000264:	683b      	ldr	r3, [r7, #0]
 8000266:	795b      	ldrb	r3, [r3, #5]
 8000268:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv |
 800026a:	4313      	orrs	r3, r2
 800026c:	68fa      	ldr	r2, [r7, #12]
 800026e:	4313      	orrs	r3, r2
 8000270:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	68fa      	ldr	r2, [r7, #12]
 8000276:	609a      	str	r2, [r3, #8]

  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800027c:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_CLEAR_Mask;
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000284:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfChannel value */
  tmpreg2 |= (uint8_t) (ADC_InitStruct->ADC_NbrOfChannel - (uint8_t)1);
 8000286:	683b      	ldr	r3, [r7, #0]
 8000288:	7c1b      	ldrb	r3, [r3, #16]
 800028a:	3b01      	subs	r3, #1
 800028c:	b2da      	uxtb	r2, r3
 800028e:	7afb      	ldrb	r3, [r7, #11]
 8000290:	4313      	orrs	r3, r2
 8000292:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= (uint32_t)tmpreg2 << 20;
 8000294:	7afb      	ldrb	r3, [r7, #11]
 8000296:	051b      	lsls	r3, r3, #20
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	4313      	orrs	r3, r2
 800029c:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	68fa      	ldr	r2, [r7, #12]
 80002a2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80002a4:	bf00      	nop
 80002a6:	3714      	adds	r7, #20
 80002a8:	46bd      	mov	sp, r7
 80002aa:	bc80      	pop	{r7}
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	fff1f7fd 	.word	0xfff1f7fd

080002b4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80002b4:	b480      	push	{r7}
 80002b6:	b083      	sub	sp, #12
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	460b      	mov	r3, r1
 80002be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80002c0:	78fb      	ldrb	r3, [r7, #3]
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d006      	beq.n	80002d4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= CR2_ADON_Set;
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	689b      	ldr	r3, [r3, #8]
 80002ca:	f043 0201 	orr.w	r2, r3, #1
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= CR2_ADON_Reset;
  }
}
 80002d2:	e005      	b.n	80002e0 <ADC_Cmd+0x2c>
    ADCx->CR2 &= CR2_ADON_Reset;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	689b      	ldr	r3, [r3, #8]
 80002d8:	f023 0201 	bic.w	r2, r3, #1
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	609a      	str	r2, [r3, #8]
}
 80002e0:	bf00      	nop
 80002e2:	370c      	adds	r7, #12
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bc80      	pop	{r7}
 80002e8:	4770      	bx	lr

080002ea <ADC_ResetCalibration>:
  * @brief  Resets the selected ADC calibration registers.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_ResetCalibration(ADC_TypeDef* ADCx)
{
 80002ea:	b480      	push	{r7}
 80002ec:	b083      	sub	sp, #12
 80002ee:	af00      	add	r7, sp, #0
 80002f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Resets the selected ADC calibration registers */  
  ADCx->CR2 |= CR2_RSTCAL_Set;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	689b      	ldr	r3, [r3, #8]
 80002f6:	f043 0208 	orr.w	r2, r3, #8
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	609a      	str	r2, [r3, #8]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr

08000308 <ADC_GetResetCalibrationStatus>:
  * @brief  Gets the selected ADC reset calibration registers status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC reset calibration registers (SET or RESET).
  */
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000308:	b480      	push	{r7}
 800030a:	b085      	sub	sp, #20
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 8000310:	2300      	movs	r3, #0
 8000312:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of RSTCAL bit */
  if ((ADCx->CR2 & CR2_RSTCAL_Set) != (uint32_t)RESET)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	2b00      	cmp	r3, #0
 800031e:	d002      	beq.n	8000326 <ADC_GetResetCalibrationStatus+0x1e>
  {
    /* RSTCAL bit is set */
    bitstatus = SET;
 8000320:	2301      	movs	r3, #1
 8000322:	73fb      	strb	r3, [r7, #15]
 8000324:	e001      	b.n	800032a <ADC_GetResetCalibrationStatus+0x22>
  }
  else
  {
    /* RSTCAL bit is reset */
    bitstatus = RESET;
 8000326:	2300      	movs	r3, #0
 8000328:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the RSTCAL bit status */
  return  bitstatus;
 800032a:	7bfb      	ldrb	r3, [r7, #15]
}
 800032c:	4618      	mov	r0, r3
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	bc80      	pop	{r7}
 8000334:	4770      	bx	lr

08000336 <ADC_StartCalibration>:
  * @brief  Starts the selected ADC calibration process.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval None
  */
void ADC_StartCalibration(ADC_TypeDef* ADCx)
{
 8000336:	b480      	push	{r7}
 8000338:	b083      	sub	sp, #12
 800033a:	af00      	add	r7, sp, #0
 800033c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Enable the selected ADC calibration process */  
  ADCx->CR2 |= CR2_CAL_Set;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	689b      	ldr	r3, [r3, #8]
 8000342:	f043 0204 	orr.w	r2, r3, #4
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	609a      	str	r2, [r3, #8]
}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <ADC_GetCalibrationStatus>:
  * @brief  Gets the selected ADC calibration status.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The new state of ADC calibration (SET or RESET).
  */
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx)
{
 8000354:	b480      	push	{r7}
 8000356:	b085      	sub	sp, #20
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  FlagStatus bitstatus = RESET;
 800035c:	2300      	movs	r3, #0
 800035e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Check the status of CAL bit */
  if ((ADCx->CR2 & CR2_CAL_Set) != (uint32_t)RESET)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	f003 0304 	and.w	r3, r3, #4
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <ADC_GetCalibrationStatus+0x1e>
  {
    /* CAL bit is set: calibration on going */
    bitstatus = SET;
 800036c:	2301      	movs	r3, #1
 800036e:	73fb      	strb	r3, [r7, #15]
 8000370:	e001      	b.n	8000376 <ADC_GetCalibrationStatus+0x22>
  }
  else
  {
    /* CAL bit is reset: end of calibration */
    bitstatus = RESET;
 8000372:	2300      	movs	r3, #0
 8000374:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the CAL bit status */
  return  bitstatus;
 8000376:	7bfb      	ldrb	r3, [r7, #15]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3714      	adds	r7, #20
 800037c:	46bd      	mov	sp, r7
 800037e:	bc80      	pop	{r7}
 8000380:	4770      	bx	lr

08000382 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_71Cycles5: Sample time equal to 71.5 cycles	
  *     @arg ADC_SampleTime_239Cycles5: Sample time equal to 239.5 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000382:	b480      	push	{r7}
 8000384:	b085      	sub	sp, #20
 8000386:	af00      	add	r7, sp, #0
 8000388:	6078      	str	r0, [r7, #4]
 800038a:	4608      	mov	r0, r1
 800038c:	4611      	mov	r1, r2
 800038e:	461a      	mov	r2, r3
 8000390:	4603      	mov	r3, r0
 8000392:	70fb      	strb	r3, [r7, #3]
 8000394:	460b      	mov	r3, r1
 8000396:	70bb      	strb	r3, [r7, #2]
 8000398:	4613      	mov	r3, r2
 800039a:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800039c:	2300      	movs	r3, #0
 800039e:	60fb      	str	r3, [r7, #12]
 80003a0:	2300      	movs	r3, #0
 80003a2:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  /* if ADC_Channel_10 ... ADC_Channel_17 is selected */
  if (ADC_Channel > ADC_Channel_9)
 80003a4:	78fb      	ldrb	r3, [r7, #3]
 80003a6:	2b09      	cmp	r3, #9
 80003a8:	d923      	bls.n	80003f2 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	68db      	ldr	r3, [r3, #12]
 80003ae:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_Set << (3 * (ADC_Channel - 10));
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	f1a3 020a 	sub.w	r2, r3, #10
 80003b6:	4613      	mov	r3, r2
 80003b8:	005b      	lsls	r3, r3, #1
 80003ba:	4413      	add	r3, r2
 80003bc:	2207      	movs	r2, #7
 80003be:	fa02 f303 	lsl.w	r3, r2, r3
 80003c2:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	43db      	mvns	r3, r3
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80003ce:	7879      	ldrb	r1, [r7, #1]
 80003d0:	78fb      	ldrb	r3, [r7, #3]
 80003d2:	f1a3 020a 	sub.w	r2, r3, #10
 80003d6:	4613      	mov	r3, r2
 80003d8:	005b      	lsls	r3, r3, #1
 80003da:	4413      	add	r3, r2
 80003dc:	fa01 f303 	lsl.w	r3, r1, r3
 80003e0:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 80003e2:	68fa      	ldr	r2, [r7, #12]
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	4313      	orrs	r3, r2
 80003e8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	68fa      	ldr	r2, [r7, #12]
 80003ee:	60da      	str	r2, [r3, #12]
 80003f0:	e01e      	b.n	8000430 <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	691b      	ldr	r3, [r3, #16]
 80003f6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_Set << (3 * ADC_Channel);
 80003f8:	78fa      	ldrb	r2, [r7, #3]
 80003fa:	4613      	mov	r3, r2
 80003fc:	005b      	lsls	r3, r3, #1
 80003fe:	4413      	add	r3, r2
 8000400:	2207      	movs	r2, #7
 8000402:	fa02 f303 	lsl.w	r3, r2, r3
 8000406:	60bb      	str	r3, [r7, #8]
    /* Clear the old channel sample time */
    tmpreg1 &= ~tmpreg2;
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	43db      	mvns	r3, r3
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4013      	ands	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000412:	7879      	ldrb	r1, [r7, #1]
 8000414:	78fa      	ldrb	r2, [r7, #3]
 8000416:	4613      	mov	r3, r2
 8000418:	005b      	lsls	r3, r3, #1
 800041a:	4413      	add	r3, r2
 800041c:	fa01 f303 	lsl.w	r3, r1, r3
 8000420:	60bb      	str	r3, [r7, #8]
    /* Set the new channel sample time */
    tmpreg1 |= tmpreg2;
 8000422:	68fa      	ldr	r2, [r7, #12]
 8000424:	68bb      	ldr	r3, [r7, #8]
 8000426:	4313      	orrs	r3, r2
 8000428:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	68fa      	ldr	r2, [r7, #12]
 800042e:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000430:	78bb      	ldrb	r3, [r7, #2]
 8000432:	2b06      	cmp	r3, #6
 8000434:	d821      	bhi.n	800047a <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800043a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_Set << (5 * (Rank - 1));
 800043c:	78bb      	ldrb	r3, [r7, #2]
 800043e:	1e5a      	subs	r2, r3, #1
 8000440:	4613      	mov	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	4413      	add	r3, r2
 8000446:	221f      	movs	r2, #31
 8000448:	fa02 f303 	lsl.w	r3, r2, r3
 800044c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	43db      	mvns	r3, r3
 8000452:	68fa      	ldr	r2, [r7, #12]
 8000454:	4013      	ands	r3, r2
 8000456:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000458:	78f9      	ldrb	r1, [r7, #3]
 800045a:	78bb      	ldrb	r3, [r7, #2]
 800045c:	1e5a      	subs	r2, r3, #1
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	fa01 f303 	lsl.w	r3, r1, r3
 8000468:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800046a:	68fa      	ldr	r2, [r7, #12]
 800046c:	68bb      	ldr	r3, [r7, #8]
 800046e:	4313      	orrs	r3, r2
 8000470:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	68fa      	ldr	r2, [r7, #12]
 8000476:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000478:	e047      	b.n	800050a <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 800047a:	78bb      	ldrb	r3, [r7, #2]
 800047c:	2b0c      	cmp	r3, #12
 800047e:	d821      	bhi.n	80004c4 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000484:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_Set << (5 * (Rank - 7));
 8000486:	78bb      	ldrb	r3, [r7, #2]
 8000488:	1fda      	subs	r2, r3, #7
 800048a:	4613      	mov	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4413      	add	r3, r2
 8000490:	221f      	movs	r2, #31
 8000492:	fa02 f303 	lsl.w	r3, r2, r3
 8000496:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000498:	68bb      	ldr	r3, [r7, #8]
 800049a:	43db      	mvns	r3, r3
 800049c:	68fa      	ldr	r2, [r7, #12]
 800049e:	4013      	ands	r3, r2
 80004a0:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80004a2:	78f9      	ldrb	r1, [r7, #3]
 80004a4:	78bb      	ldrb	r3, [r7, #2]
 80004a6:	1fda      	subs	r2, r3, #7
 80004a8:	4613      	mov	r3, r2
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	4413      	add	r3, r2
 80004ae:	fa01 f303 	lsl.w	r3, r1, r3
 80004b2:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80004b4:	68fa      	ldr	r2, [r7, #12]
 80004b6:	68bb      	ldr	r3, [r7, #8]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	68fa      	ldr	r2, [r7, #12]
 80004c0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004c2:	e022      	b.n	800050a <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c8:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_Set << (5 * (Rank - 13));
 80004ca:	78bb      	ldrb	r3, [r7, #2]
 80004cc:	f1a3 020d 	sub.w	r2, r3, #13
 80004d0:	4613      	mov	r3, r2
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	4413      	add	r3, r2
 80004d6:	221f      	movs	r2, #31
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 80004de:	68bb      	ldr	r3, [r7, #8]
 80004e0:	43db      	mvns	r3, r3
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	4013      	ands	r3, r2
 80004e6:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80004e8:	78f9      	ldrb	r1, [r7, #3]
 80004ea:	78bb      	ldrb	r3, [r7, #2]
 80004ec:	f1a3 020d 	sub.w	r2, r3, #13
 80004f0:	4613      	mov	r3, r2
 80004f2:	009b      	lsls	r3, r3, #2
 80004f4:	4413      	add	r3, r2
 80004f6:	fa01 f303 	lsl.w	r3, r1, r3
 80004fa:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80004fc:	68fa      	ldr	r2, [r7, #12]
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	4313      	orrs	r3, r2
 8000502:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	68fa      	ldr	r2, [r7, #12]
 8000508:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800050a:	bf00      	nop
 800050c:	3714      	adds	r7, #20
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr

08000514 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000520:	b29b      	uxth	r3, r3
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr

0800052c <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_JSTRT: Start of injected group conversion flag
  *     @arg ADC_FLAG_STRT: Start of regular group conversion flag
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG)
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	460b      	mov	r3, r1
 8000536:	70fb      	strb	r3, [r7, #3]
  FlagStatus bitstatus = RESET;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));
  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	78fb      	ldrb	r3, [r7, #3]
 8000542:	4013      	ands	r3, r2
 8000544:	2b00      	cmp	r3, #0
 8000546:	d002      	beq.n	800054e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000548:	2301      	movs	r3, #1
 800054a:	73fb      	strb	r3, [r7, #15]
 800054c:	e001      	b.n	8000552 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000552:	7bfb      	ldrb	r3, [r7, #15]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800055e:	b480      	push	{r7}
 8000560:	b089      	sub	sp, #36	; 0x24
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
 800056c:	2300      	movs	r3, #0
 800056e:	613b      	str	r3, [r7, #16]
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
 800057c:	2300      	movs	r3, #0
 800057e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	78db      	ldrb	r3, [r3, #3]
 8000584:	f003 030f 	and.w	r3, r3, #15
 8000588:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	78db      	ldrb	r3, [r3, #3]
 800058e:	f003 0310 	and.w	r3, r3, #16
 8000592:	2b00      	cmp	r3, #0
 8000594:	d005      	beq.n	80005a2 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	789b      	ldrb	r3, [r3, #2]
 800059a:	461a      	mov	r2, r3
 800059c:	69fb      	ldr	r3, [r7, #28]
 800059e:	4313      	orrs	r3, r2
 80005a0:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d044      	beq.n	8000636 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80005b2:	2300      	movs	r3, #0
 80005b4:	61bb      	str	r3, [r7, #24]
 80005b6:	e038      	b.n	800062a <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80005b8:	2201      	movs	r2, #1
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	fa02 f303 	lsl.w	r3, r2, r3
 80005c0:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4013      	ands	r3, r2
 80005cc:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80005ce:	693a      	ldr	r2, [r7, #16]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	d126      	bne.n	8000624 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80005d6:	69bb      	ldr	r3, [r7, #24]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80005dc:	220f      	movs	r2, #15
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	fa02 f303 	lsl.w	r3, r2, r3
 80005e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	43db      	mvns	r3, r3
 80005ea:	697a      	ldr	r2, [r7, #20]
 80005ec:	4013      	ands	r3, r2
 80005ee:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	697a      	ldr	r2, [r7, #20]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80005fe:	683b      	ldr	r3, [r7, #0]
 8000600:	78db      	ldrb	r3, [r3, #3]
 8000602:	2b28      	cmp	r3, #40	; 0x28
 8000604:	d105      	bne.n	8000612 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000606:	2201      	movs	r2, #1
 8000608:	69bb      	ldr	r3, [r7, #24]
 800060a:	409a      	lsls	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	615a      	str	r2, [r3, #20]
 8000610:	e008      	b.n	8000624 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	78db      	ldrb	r3, [r3, #3]
 8000616:	2b48      	cmp	r3, #72	; 0x48
 8000618:	d104      	bne.n	8000624 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800061a:	2201      	movs	r2, #1
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	409a      	lsls	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000624:	69bb      	ldr	r3, [r7, #24]
 8000626:	3301      	adds	r3, #1
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	69bb      	ldr	r3, [r7, #24]
 800062c:	2b07      	cmp	r3, #7
 800062e:	d9c3      	bls.n	80005b8 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	697a      	ldr	r2, [r7, #20]
 8000634:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	881b      	ldrh	r3, [r3, #0]
 800063a:	2bff      	cmp	r3, #255	; 0xff
 800063c:	d946      	bls.n	80006cc <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	685b      	ldr	r3, [r3, #4]
 8000642:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
 8000648:	e03a      	b.n	80006c0 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800064a:	69bb      	ldr	r3, [r7, #24]
 800064c:	3308      	adds	r3, #8
 800064e:	2201      	movs	r2, #1
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	461a      	mov	r2, r3
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	4013      	ands	r3, r2
 8000660:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	429a      	cmp	r2, r3
 8000668:	d127      	bne.n	80006ba <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800066a:	69bb      	ldr	r3, [r7, #24]
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000670:	220f      	movs	r2, #15
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	fa02 f303 	lsl.w	r3, r2, r3
 8000678:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	43db      	mvns	r3, r3
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	4013      	ands	r3, r2
 8000682:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	fa02 f303 	lsl.w	r3, r2, r3
 800068c:	697a      	ldr	r2, [r7, #20]
 800068e:	4313      	orrs	r3, r2
 8000690:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	78db      	ldrb	r3, [r3, #3]
 8000696:	2b28      	cmp	r3, #40	; 0x28
 8000698:	d105      	bne.n	80006a6 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800069a:	69bb      	ldr	r3, [r7, #24]
 800069c:	3308      	adds	r3, #8
 800069e:	2201      	movs	r2, #1
 80006a0:	409a      	lsls	r2, r3
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	78db      	ldrb	r3, [r3, #3]
 80006aa:	2b48      	cmp	r3, #72	; 0x48
 80006ac:	d105      	bne.n	80006ba <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80006ae:	69bb      	ldr	r3, [r7, #24]
 80006b0:	3308      	adds	r3, #8
 80006b2:	2201      	movs	r2, #1
 80006b4:	409a      	lsls	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80006ba:	69bb      	ldr	r3, [r7, #24]
 80006bc:	3301      	adds	r3, #1
 80006be:	61bb      	str	r3, [r7, #24]
 80006c0:	69bb      	ldr	r3, [r7, #24]
 80006c2:	2b07      	cmp	r3, #7
 80006c4:	d9c1      	bls.n	800064a <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	697a      	ldr	r2, [r7, #20]
 80006ca:	605a      	str	r2, [r3, #4]
  }
}
 80006cc:	bf00      	nop
 80006ce:	3724      	adds	r7, #36	; 0x24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
	...

080006d8 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80006d8:	b480      	push	{r7}
 80006da:	b087      	sub	sp, #28
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	460b      	mov	r3, r1
 80006e2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
 80006e8:	2300      	movs	r3, #0
 80006ea:	60fb      	str	r3, [r7, #12]
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	2300      	movs	r3, #0
 80006f2:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	da03      	bge.n	8000702 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 80006fa:	4b2e      	ldr	r3, [pc, #184]	; (80007b4 <GPIO_PinRemapConfig+0xdc>)
 80006fc:	69db      	ldr	r3, [r3, #28]
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	e002      	b.n	8000708 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <GPIO_PinRemapConfig+0xdc>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	0c1b      	lsrs	r3, r3, #16
 800070c:	f003 030f 	and.w	r3, r3, #15
 8000710:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	b29b      	uxth	r3, r3
 8000716:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800071e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000722:	d10a      	bne.n	800073a <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800072a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800072c:	4a21      	ldr	r2, [pc, #132]	; (80007b4 <GPIO_PinRemapConfig+0xdc>)
 800072e:	4b21      	ldr	r3, [pc, #132]	; (80007b4 <GPIO_PinRemapConfig+0xdc>)
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000736:	6053      	str	r3, [r2, #4]
 8000738:	e021      	b.n	800077e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00e      	beq.n	8000762 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000744:	2203      	movs	r2, #3
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	43db      	mvns	r3, r3
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	4013      	ands	r3, r2
 8000756:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e00d      	b.n	800077e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	0d5b      	lsrs	r3, r3, #21
 8000766:	011b      	lsls	r3, r3, #4
 8000768:	693a      	ldr	r2, [r7, #16]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	4013      	ands	r3, r2
 8000774:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800077c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800077e:	78fb      	ldrb	r3, [r7, #3]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d008      	beq.n	8000796 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	0d5b      	lsrs	r3, r3, #21
 8000788:	011b      	lsls	r3, r3, #4
 800078a:	693a      	ldr	r2, [r7, #16]
 800078c:	fa02 f303 	lsl.w	r3, r2, r3
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	4313      	orrs	r3, r2
 8000794:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	da03      	bge.n	80007a4 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <GPIO_PinRemapConfig+0xdc>)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 80007a2:	e002      	b.n	80007aa <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 80007a4:	4a03      	ldr	r2, [pc, #12]	; (80007b4 <GPIO_PinRemapConfig+0xdc>)
 80007a6:	697b      	ldr	r3, [r7, #20]
 80007a8:	6053      	str	r3, [r2, #4]
}
 80007aa:	bf00      	nop
 80007ac:	371c      	adds	r7, #28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr
 80007b4:	40010000 	.word	0x40010000

080007b8 <RCC_ADCCLKConfig>:
  *     @arg RCC_PCLK2_Div6: ADC clock = PCLK2/6
  *     @arg RCC_PCLK2_Div8: ADC clock = PCLK2/8
  * @retval None
  */
void RCC_ADCCLKConfig(uint32_t RCC_PCLK2)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b085      	sub	sp, #20
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_PCLK2));
  tmpreg = RCC->CFGR;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <RCC_ADCCLKConfig+0x34>)
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	60fb      	str	r3, [r7, #12]
  /* Clear ADCPRE[1:0] bits */
  tmpreg &= CFGR_ADCPRE_Reset_Mask;
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d0:	60fb      	str	r3, [r7, #12]
  /* Set ADCPRE[1:0] bits according to RCC_PCLK2 value */
  tmpreg |= RCC_PCLK2;
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4313      	orrs	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  /* Store the new value */
  RCC->CFGR = tmpreg;
 80007da:	4a04      	ldr	r2, [pc, #16]	; (80007ec <RCC_ADCCLKConfig+0x34>)
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	6053      	str	r3, [r2, #4]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr
 80007ea:	bf00      	nop
 80007ec:	40021000 	.word	0x40021000

080007f0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007fc:	78fb      	ldrb	r3, [r7, #3]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d006      	beq.n	8000810 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000802:	4909      	ldr	r1, [pc, #36]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000806:	699a      	ldr	r2, [r3, #24]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 800080e:	e006      	b.n	800081e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000810:	4905      	ldr	r1, [pc, #20]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <RCC_APB2PeriphClockCmd+0x38>)
 8000814:	699a      	ldr	r2, [r3, #24]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	43db      	mvns	r3, r3
 800081a:	4013      	ands	r3, r2
 800081c:	618b      	str	r3, [r1, #24]
}
 800081e:	bf00      	nop
 8000820:	370c      	adds	r7, #12
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	40021000 	.word	0x40021000

0800082c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	460b      	mov	r3, r1
 8000836:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000838:	78fb      	ldrb	r3, [r7, #3]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d006      	beq.n	800084c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800083e:	4909      	ldr	r1, [pc, #36]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000842:	69da      	ldr	r2, [r3, #28]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	4313      	orrs	r3, r2
 8000848:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800084a:	e006      	b.n	800085a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800084c:	4905      	ldr	r1, [pc, #20]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <RCC_APB1PeriphClockCmd+0x38>)
 8000850:	69da      	ldr	r2, [r3, #28]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	43db      	mvns	r3, r3
 8000856:	4013      	ands	r3, r2
 8000858:	61cb      	str	r3, [r1, #28]
}
 800085a:	bf00      	nop
 800085c:	370c      	adds	r7, #12
 800085e:	46bd      	mov	sp, r7
 8000860:	bc80      	pop	{r7}
 8000862:	4770      	bx	lr
 8000864:	40021000 	.word	0x40021000

08000868 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 8000868:	b480      	push	{r7}
 800086a:	b085      	sub	sp, #20
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	881b      	ldrh	r3, [r3, #0]
 800087a:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a2e      	ldr	r2, [pc, #184]	; (8000938 <TIM_TimeBaseInit+0xd0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d013      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a2d      	ldr	r2, [pc, #180]	; (800093c <TIM_TimeBaseInit+0xd4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d00f      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000892:	d00b      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a2a      	ldr	r2, [pc, #168]	; (8000940 <TIM_TimeBaseInit+0xd8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d007      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a29      	ldr	r2, [pc, #164]	; (8000944 <TIM_TimeBaseInit+0xdc>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d003      	beq.n	80008ac <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a28      	ldr	r2, [pc, #160]	; (8000948 <TIM_TimeBaseInit+0xe0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d108      	bne.n	80008be <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b2:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	885a      	ldrh	r2, [r3, #2]
 80008b8:	89fb      	ldrh	r3, [r7, #14]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a22      	ldr	r2, [pc, #136]	; (800094c <TIM_TimeBaseInit+0xe4>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d00c      	beq.n	80008e0 <TIM_TimeBaseInit+0x78>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a21      	ldr	r2, [pc, #132]	; (8000950 <TIM_TimeBaseInit+0xe8>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d008      	beq.n	80008e0 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80008ce:	89fb      	ldrh	r3, [r7, #14]
 80008d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008d4:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	88da      	ldrh	r2, [r3, #6]
 80008da:	89fb      	ldrh	r3, [r7, #14]
 80008dc:	4313      	orrs	r3, r2
 80008de:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	89fa      	ldrh	r2, [r7, #14]
 80008e4:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	889a      	ldrh	r2, [r3, #4]
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	881a      	ldrh	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <TIM_TimeBaseInit+0xd0>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d00f      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	4a0e      	ldr	r2, [pc, #56]	; (800093c <TIM_TimeBaseInit+0xd4>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d00b      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	4a12      	ldr	r2, [pc, #72]	; (8000954 <TIM_TimeBaseInit+0xec>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d007      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4a11      	ldr	r2, [pc, #68]	; (8000958 <TIM_TimeBaseInit+0xf0>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d003      	beq.n	800091e <TIM_TimeBaseInit+0xb6>
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a10      	ldr	r2, [pc, #64]	; (800095c <TIM_TimeBaseInit+0xf4>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d104      	bne.n	8000928 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	7a1b      	ldrb	r3, [r3, #8]
 8000922:	b29a      	uxth	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2201      	movs	r2, #1
 800092c:	829a      	strh	r2, [r3, #20]
}
 800092e:	bf00      	nop
 8000930:	3714      	adds	r7, #20
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	40012c00 	.word	0x40012c00
 800093c:	40013400 	.word	0x40013400
 8000940:	40000400 	.word	0x40000400
 8000944:	40000800 	.word	0x40000800
 8000948:	40000c00 	.word	0x40000c00
 800094c:	40001000 	.word	0x40001000
 8000950:	40001400 	.word	0x40001400
 8000954:	40014000 	.word	0x40014000
 8000958:	40014400 	.word	0x40014400
 800095c:	40014800 	.word	0x40014800

08000960 <TIM_OC3Init>:
  * @param  TIM_OCInitStruct: pointer to a TIM_OCInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000960:	b480      	push	{r7}
 8000962:	b085      	sub	sp, #20
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
 8000968:	6039      	str	r1, [r7, #0]
  uint16_t tmpccmrx = 0, tmpccer = 0, tmpcr2 = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	817b      	strh	r3, [r7, #10]
 800096e:	2300      	movs	r3, #0
 8000970:	81fb      	strh	r3, [r7, #14]
 8000972:	2300      	movs	r3, #0
 8000974:	81bb      	strh	r3, [r7, #12]
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	8c1b      	ldrh	r3, [r3, #32]
 800097a:	b29b      	uxth	r3, r3
 800097c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000980:	b29a      	uxth	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	841a      	strh	r2, [r3, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	8c1b      	ldrh	r3, [r3, #32]
 800098a:	81fb      	strh	r3, [r7, #14]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	889b      	ldrh	r3, [r3, #4]
 8000990:	81bb      	strh	r3, [r7, #12]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	8b9b      	ldrh	r3, [r3, #28]
 8000996:	817b      	strh	r3, [r7, #10]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
 8000998:	897b      	ldrh	r3, [r7, #10]
 800099a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800099e:	817b      	strh	r3, [r7, #10]
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 80009a0:	897b      	ldrh	r3, [r7, #10]
 80009a2:	f023 0303 	bic.w	r3, r3, #3
 80009a6:	817b      	strh	r3, [r7, #10]
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	881a      	ldrh	r2, [r3, #0]
 80009ac:	897b      	ldrh	r3, [r7, #10]
 80009ae:	4313      	orrs	r3, r2
 80009b0:	817b      	strh	r3, [r7, #10]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80009b8:	81fb      	strh	r3, [r7, #14]
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	891b      	ldrh	r3, [r3, #8]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	89fb      	ldrh	r3, [r7, #14]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	81fb      	strh	r3, [r7, #14]
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	885b      	ldrh	r3, [r3, #2]
 80009cc:	021b      	lsls	r3, r3, #8
 80009ce:	b29a      	uxth	r2, r3
 80009d0:	89fb      	ldrh	r3, [r7, #14]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	81fb      	strh	r3, [r7, #14]
    
  if((TIMx == TIM1) || (TIMx == TIM8))
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <TIM_OC3Init+0x104>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d003      	beq.n	80009e6 <TIM_OC3Init+0x86>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a21      	ldr	r2, [pc, #132]	; (8000a68 <TIM_OC3Init+0x108>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d12b      	bne.n	8000a3e <TIM_OC3Init+0xde>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 80009e6:	89fb      	ldrh	r3, [r7, #14]
 80009e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80009ec:	81fb      	strh	r3, [r7, #14]
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	895b      	ldrh	r3, [r3, #10]
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	89fb      	ldrh	r3, [r7, #14]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 80009fc:	89fb      	ldrh	r3, [r7, #14]
 80009fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a02:	81fb      	strh	r3, [r7, #14]
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	889b      	ldrh	r3, [r3, #4]
 8000a08:	021b      	lsls	r3, r3, #8
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	89fb      	ldrh	r3, [r7, #14]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	81fb      	strh	r3, [r7, #14]
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
 8000a12:	89bb      	ldrh	r3, [r7, #12]
 8000a14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a18:	81bb      	strh	r3, [r7, #12]
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000a1a:	89bb      	ldrh	r3, [r7, #12]
 8000a1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a20:	81bb      	strh	r3, [r7, #12]
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	899b      	ldrh	r3, [r3, #12]
 8000a26:	011b      	lsls	r3, r3, #4
 8000a28:	b29a      	uxth	r2, r3
 8000a2a:	89bb      	ldrh	r3, [r7, #12]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	81bb      	strh	r3, [r7, #12]
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	89db      	ldrh	r3, [r3, #14]
 8000a34:	011b      	lsls	r3, r3, #4
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	89bb      	ldrh	r3, [r7, #12]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	81bb      	strh	r3, [r7, #12]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	89ba      	ldrh	r2, [r7, #12]
 8000a42:	809a      	strh	r2, [r3, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	897a      	ldrh	r2, [r7, #10]
 8000a48:	839a      	strh	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	88da      	ldrh	r2, [r3, #6]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	89fa      	ldrh	r2, [r7, #14]
 8000a56:	841a      	strh	r2, [r3, #32]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bc80      	pop	{r7}
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40012c00 	.word	0x40012c00
 8000a68:	40013400 	.word	0x40013400

08000a6c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a78:	78fb      	ldrb	r3, [r7, #3]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d008      	beq.n	8000a90 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	881b      	ldrh	r3, [r3, #0]
 8000a82:	b29b      	uxth	r3, r3
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000a8e:	e007      	b.n	8000aa0 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	881b      	ldrh	r3, [r3, #0]
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	f023 0301 	bic.w	r3, r3, #1
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	801a      	strh	r2, [r3, #0]
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr

08000aaa <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000aaa:	b480      	push	{r7}
 8000aac:	b083      	sub	sp, #12
 8000aae:	af00      	add	r7, sp, #0
 8000ab0:	6078      	str	r0, [r7, #4]
 8000ab2:	460b      	mov	r3, r1
 8000ab4:	807b      	strh	r3, [r7, #2]
 8000ab6:	4613      	mov	r3, r2
 8000ab8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000aba:	787b      	ldrb	r3, [r7, #1]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d008      	beq.n	8000ad2 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	899b      	ldrh	r3, [r3, #12]
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	887b      	ldrh	r3, [r7, #2]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b29a      	uxth	r2, r3
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000ad0:	e009      	b.n	8000ae6 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	899b      	ldrh	r3, [r3, #12]
 8000ad6:	b29a      	uxth	r2, r3
 8000ad8:	887b      	ldrh	r3, [r7, #2]
 8000ada:	43db      	mvns	r3, r3
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	4013      	ands	r3, r2
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	819a      	strh	r2, [r3, #12]
}
 8000ae6:	bf00      	nop
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bc80      	pop	{r7}
 8000aee:	4770      	bx	lr

08000af0 <TIM_SetCompare3>:
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @param  Compare3: specifies the Capture Compare3 register new value.
  * @retval None
  */
void TIM_SetCompare3(TIM_TypeDef* TIMx, uint16_t Compare3)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	460b      	mov	r3, r1
 8000afa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	887a      	ldrh	r2, [r7, #2]
 8000b00:	879a      	strh	r2, [r3, #60]	; 0x3c
}
 8000b02:	bf00      	nop
 8000b04:	370c      	adds	r7, #12
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bc80      	pop	{r7}
 8000b0a:	4770      	bx	lr

08000b0c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	460b      	mov	r3, r1
 8000b16:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000b18:	887b      	ldrh	r3, [r7, #2]
 8000b1a:	43db      	mvns	r3, r3
 8000b1c:	b29a      	uxth	r2, r3
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	821a      	strh	r2, [r3, #16]
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <Conf_GPIO>:
#include "conf_gpio.h"

void Conf_GPIO(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8000b32:	2101      	movs	r1, #1
 8000b34:	2008      	movs	r0, #8
 8000b36:	f7ff fe5b 	bl	80007f0 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef gpio_structB;
  gpio_structB.GPIO_Mode = GPIO_Mode_AIN;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Speed = GPIO_Speed_2MHz;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	71bb      	strb	r3, [r7, #6]
  gpio_structB.GPIO_Pin = GPIO_Pin_1;
 8000b42:	2302      	movs	r3, #2
 8000b44:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio_structB);
 8000b46:	1d3b      	adds	r3, r7, #4
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <Conf_GPIO+0x2c>)
 8000b4c:	f7ff fd07 	bl	800055e <GPIO_Init>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40010c00 	.word	0x40010c00

08000b5c <Conf_GPIO_Remap>:

void Conf_GPIO_Remap(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 8000b62:	2101      	movs	r1, #1
 8000b64:	2009      	movs	r0, #9
 8000b66:	f7ff fe43 	bl	80007f0 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef gpio_structB;
  gpio_structB.GPIO_Mode = GPIO_Mode_AF_PP;
 8000b6a:	2318      	movs	r3, #24
 8000b6c:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_10;
 8000b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b72:	80bb      	strh	r3, [r7, #4]
  gpio_structB.GPIO_Speed = GPIO_Speed_2MHz;
 8000b74:	2302      	movs	r3, #2
 8000b76:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOB, &gpio_structB);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4805      	ldr	r0, [pc, #20]	; (8000b94 <Conf_GPIO_Remap+0x38>)
 8000b7e:	f7ff fcee 	bl	800055e <GPIO_Init>

  GPIO_PinRemapConfig(GPIO_FullRemap_TIM2, ENABLE);
 8000b82:	2101      	movs	r1, #1
 8000b84:	4804      	ldr	r0, [pc, #16]	; (8000b98 <Conf_GPIO_Remap+0x3c>)
 8000b86:	f7ff fda7 	bl	80006d8 <GPIO_PinRemapConfig>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40010c00 	.word	0x40010c00
 8000b98:	00180300 	.word	0x00180300

08000b9c <main>:

volatile uint16_t ADC_DADO;
volatile tipo_exemplo_adc estado_exemplo_adc = wait_convertion;

int main(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
  Conf_GPIO();
 8000ba2:	f7ff ffc3 	bl	8000b2c <Conf_GPIO>
  Conf_GPIO_Remap();
 8000ba6:	f7ff ffd9 	bl	8000b5c <Conf_GPIO_Remap>
  Conf_TIM2();
 8000baa:	f000 f8a8 	bl	8000cfe <Conf_TIM2>
  Conf_TIM2_OC();
 8000bae:	f000 f891 	bl	8000cd4 <Conf_TIM2_OC>
  Conf_NVIC();
 8000bb2:	f000 f8eb 	bl	8000d8c <Conf_NVIC>
  Conf_TIM4();
 8000bb6:	f000 f8c3 	bl	8000d40 <Conf_TIM4>
  Conf_ADC();
 8000bba:	f000 f849 	bl	8000c50 <Conf_ADC>

  char aux[20];

  while(1)
  {
    switch (estado_exemplo_adc)
 8000bbe:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <main+0xa4>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d016      	beq.n	8000bf6 <main+0x5a>
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d033      	beq.n	8000c34 <main+0x98>
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d000      	beq.n	8000bd2 <main+0x36>
      break;
    case print_and_pwm:
      estado_exemplo_adc = wait_convertion;
      break;
    default:
      break;
 8000bd0:	e035      	b.n	8000c3e <main+0xa2>
      if (ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC))
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	481b      	ldr	r0, [pc, #108]	; (8000c44 <main+0xa8>)
 8000bd6:	f7ff fca9 	bl	800052c <ADC_GetFlagStatus>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d02d      	beq.n	8000c3c <main+0xa0>
        ADC_DADO = ADC_GetConversionValue (ADC1);
 8000be0:	4818      	ldr	r0, [pc, #96]	; (8000c44 <main+0xa8>)
 8000be2:	f7ff fc97 	bl	8000514 <ADC_GetConversionValue>
 8000be6:	4603      	mov	r3, r0
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b17      	ldr	r3, [pc, #92]	; (8000c48 <main+0xac>)
 8000bec:	801a      	strh	r2, [r3, #0]
        estado_exemplo_adc = data_ready;
 8000bee:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <main+0xa4>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	701a      	strb	r2, [r3, #0]
      break;
 8000bf4:	e022      	b.n	8000c3c <main+0xa0>
      if (ADC_DADO < 1024)
 8000bf6:	4b14      	ldr	r3, [pc, #80]	; (8000c48 <main+0xac>)
 8000bf8:	881b      	ldrh	r3, [r3, #0]
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c00:	d203      	bcs.n	8000c0a <main+0x6e>
        ADC_DADO = 1024;
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <main+0xac>)
 8000c04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c08:	801a      	strh	r2, [r3, #0]
      sprintf(aux, "ADC: %d\r\n", ADC_DADO);
 8000c0a:	4b0f      	ldr	r3, [pc, #60]	; (8000c48 <main+0xac>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	461a      	mov	r2, r3
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	490d      	ldr	r1, [pc, #52]	; (8000c4c <main+0xb0>)
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 fa9f 	bl	800115a <siprintf>
      TIM_SetCompare3(TIM2, ADC_DADO);
 8000c1c:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <main+0xac>)
 8000c1e:	881b      	ldrh	r3, [r3, #0]
 8000c20:	b29b      	uxth	r3, r3
 8000c22:	4619      	mov	r1, r3
 8000c24:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c28:	f7ff ff62 	bl	8000af0 <TIM_SetCompare3>
      estado_exemplo_adc = print_and_pwm;
 8000c2c:	4b04      	ldr	r3, [pc, #16]	; (8000c40 <main+0xa4>)
 8000c2e:	2202      	movs	r2, #2
 8000c30:	701a      	strb	r2, [r3, #0]
      break;
 8000c32:	e004      	b.n	8000c3e <main+0xa2>
      estado_exemplo_adc = wait_convertion;
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <main+0xa4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	701a      	strb	r2, [r3, #0]
      break;
 8000c3a:	e000      	b.n	8000c3e <main+0xa2>
      break;
 8000c3c:	bf00      	nop
    switch (estado_exemplo_adc)
 8000c3e:	e7be      	b.n	8000bbe <main+0x22>
 8000c40:	2000001c 	.word	0x2000001c
 8000c44:	40012400 	.word	0x40012400
 8000c48:	2000001e 	.word	0x2000001e
 8000c4c:	080011e8 	.word	0x080011e8

08000c50 <Conf_ADC>:

  return 0;
}

void Conf_ADC(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
  RCC_ADCCLKConfig (RCC_PCLK2_Div6);
 8000c56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000c5a:	f7ff fdad 	bl	80007b8 <RCC_ADCCLKConfig>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000c5e:	2101      	movs	r1, #1
 8000c60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c64:	f7ff fdc4 	bl	80007f0 <RCC_APB2PeriphClockCmd>

  ADC_InitTypeDef ADC_St;
  ADC_St.ADC_ContinuousConvMode = DISABLE;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	727b      	strb	r3, [r7, #9]
  ADC_St.ADC_DataAlign = ADC_DataAlign_Right;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	613b      	str	r3, [r7, #16]
  ADC_St.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 8000c70:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8000c74:	60fb      	str	r3, [r7, #12]
  ADC_St.ADC_Mode = ADC_Mode_Independent;
 8000c76:	2300      	movs	r3, #0
 8000c78:	607b      	str	r3, [r7, #4]
  ADC_St.ADC_NbrOfChannel = 1;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	753b      	strb	r3, [r7, #20]
  ADC_St.ADC_ScanConvMode = DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	723b      	strb	r3, [r7, #8]
  ADC_Init(ADC1, &ADC_St);
 8000c82:	1d3b      	adds	r3, r7, #4
 8000c84:	4619      	mov	r1, r3
 8000c86:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <Conf_ADC+0x80>)
 8000c88:	f7ff fac2 	bl	8000210 <ADC_Init>

  ADC_RegularChannelConfig(ADC1, ADC_Channel_9, 1, ADC_SampleTime_239Cycles5);
 8000c8c:	2307      	movs	r3, #7
 8000c8e:	2201      	movs	r2, #1
 8000c90:	2109      	movs	r1, #9
 8000c92:	480f      	ldr	r0, [pc, #60]	; (8000cd0 <Conf_ADC+0x80>)
 8000c94:	f7ff fb75 	bl	8000382 <ADC_RegularChannelConfig>
  ADC_Cmd (ADC1,ENABLE);
 8000c98:	2101      	movs	r1, #1
 8000c9a:	480d      	ldr	r0, [pc, #52]	; (8000cd0 <Conf_ADC+0x80>)
 8000c9c:	f7ff fb0a 	bl	80002b4 <ADC_Cmd>

  ADC_ResetCalibration(ADC1);
 8000ca0:	480b      	ldr	r0, [pc, #44]	; (8000cd0 <Conf_ADC+0x80>)
 8000ca2:	f7ff fb22 	bl	80002ea <ADC_ResetCalibration>
  while(ADC_GetResetCalibrationStatus(ADC1));
 8000ca6:	bf00      	nop
 8000ca8:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <Conf_ADC+0x80>)
 8000caa:	f7ff fb2d 	bl	8000308 <ADC_GetResetCalibrationStatus>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1f9      	bne.n	8000ca8 <Conf_ADC+0x58>
  ADC_StartCalibration(ADC1);
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <Conf_ADC+0x80>)
 8000cb6:	f7ff fb3e 	bl	8000336 <ADC_StartCalibration>
  while(ADC_GetCalibrationStatus(ADC1));
 8000cba:	bf00      	nop
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <Conf_ADC+0x80>)
 8000cbe:	f7ff fb49 	bl	8000354 <ADC_GetCalibrationStatus>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d1f9      	bne.n	8000cbc <Conf_ADC+0x6c>
}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40012400 	.word	0x40012400

08000cd4 <Conf_TIM2_OC>:

void Conf_TIM2_OC(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b084      	sub	sp, #16
 8000cd8:	af00      	add	r7, sp, #0
  TIM_OCInitTypeDef oc;
  oc.TIM_OCMode = TIM_OCMode_PWM1;
 8000cda:	2360      	movs	r3, #96	; 0x60
 8000cdc:	803b      	strh	r3, [r7, #0]
  oc.TIM_OCPolarity = TIM_OCPolarity_High;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	813b      	strh	r3, [r7, #8]
  oc.TIM_OutputState = TIM_OutputState_Enable;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	807b      	strh	r3, [r7, #2]
  oc.TIM_Pulse = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	80fb      	strh	r3, [r7, #6]
  TIM_OC3Init(TIM2, &oc);
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000cf2:	f7ff fe35 	bl	8000960 <TIM_OC3Init>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <Conf_TIM2>:

void Conf_TIM2(void)
{
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b084      	sub	sp, #16
 8000d02:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000d04:	2101      	movs	r1, #1
 8000d06:	2001      	movs	r0, #1
 8000d08:	f7ff fd90 	bl	800082c <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef timer2;
  timer2.TIM_Prescaler = 35-1;
 8000d0c:	2322      	movs	r3, #34	; 0x22
 8000d0e:	80bb      	strh	r3, [r7, #4]
  timer2.TIM_Period = 40960-1;
 8000d10:	f649 73ff 	movw	r3, #40959	; 0x9fff
 8000d14:	813b      	strh	r3, [r7, #8]
  timer2.TIM_CounterMode =  TIM_CounterMode_Up;
 8000d16:	2300      	movs	r3, #0
 8000d18:	80fb      	strh	r3, [r7, #6]
  timer2.TIM_ClockDivision = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	817b      	strh	r3, [r7, #10]
  timer2.TIM_RepetitionCounter = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM2, &timer2);
 8000d22:	1d3b      	adds	r3, r7, #4
 8000d24:	4619      	mov	r1, r3
 8000d26:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d2a:	f7ff fd9d 	bl	8000868 <TIM_TimeBaseInit>

  TIM_Cmd(TIM2, ENABLE);
 8000d2e:	2101      	movs	r1, #1
 8000d30:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000d34:	f7ff fe9a 	bl	8000a6c <TIM_Cmd>
}
 8000d38:	bf00      	nop
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <Conf_TIM4>:

void Conf_TIM4(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);
 8000d46:	2101      	movs	r1, #1
 8000d48:	2004      	movs	r0, #4
 8000d4a:	f7ff fd6f 	bl	800082c <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef timer4;
  timer4.TIM_Prescaler = 7200-1;
 8000d4e:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000d52:	80bb      	strh	r3, [r7, #4]
  timer4.TIM_Period = 100-1;
 8000d54:	2363      	movs	r3, #99	; 0x63
 8000d56:	813b      	strh	r3, [r7, #8]
  timer4.TIM_CounterMode =  TIM_CounterMode_Up;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	80fb      	strh	r3, [r7, #6]
  timer4.TIM_ClockDivision = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	817b      	strh	r3, [r7, #10]
  timer4.TIM_RepetitionCounter = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM4, &timer4);
 8000d64:	1d3b      	adds	r3, r7, #4
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	; (8000d88 <Conf_TIM4+0x48>)
 8000d6a:	f7ff fd7d 	bl	8000868 <TIM_TimeBaseInit>

  TIM_ITConfig(TIM4, TIM_IT_Update, ENABLE);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2101      	movs	r1, #1
 8000d72:	4805      	ldr	r0, [pc, #20]	; (8000d88 <Conf_TIM4+0x48>)
 8000d74:	f7ff fe99 	bl	8000aaa <TIM_ITConfig>
  TIM_Cmd(TIM4, ENABLE);
 8000d78:	2101      	movs	r1, #1
 8000d7a:	4803      	ldr	r0, [pc, #12]	; (8000d88 <Conf_TIM4+0x48>)
 8000d7c:	f7ff fe76 	bl	8000a6c <TIM_Cmd>
}
 8000d80:	bf00      	nop
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40000800 	.word	0x40000800

08000d8c <Conf_NVIC>:

void Conf_NVIC(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef it;
  it.NVIC_IRQChannel = TIM4_IRQn;
 8000d92:	231e      	movs	r3, #30
 8000d94:	713b      	strb	r3, [r7, #4]
  it.NVIC_IRQChannelCmd = ENABLE;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
  it.NVIC_IRQChannelPreemptionPriority = 0;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	717b      	strb	r3, [r7, #5]
  it.NVIC_IRQChannelSubPriority = 0;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&it);
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff f9d1 	bl	800014c <NVIC_Init>
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000db8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000dba:	e003      	b.n	8000dc4 <LoopCopyDataInit>

08000dbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000dbc:	4b0c      	ldr	r3, [pc, #48]	; (8000df0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000dbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000dc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000dc2:	3104      	adds	r1, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000dc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000dca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000dcc:	d3f6      	bcc.n	8000dbc <CopyDataInit>
	ldr	r2, =_sbss
 8000dce:	4a0b      	ldr	r2, [pc, #44]	; (8000dfc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000dd0:	e002      	b.n	8000dd8 <LoopFillZerobss>

08000dd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000dd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000dd4:	f842 3b04 	str.w	r3, [r2], #4

08000dd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000dd8:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000dda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ddc:	d3f9      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dde:	f000 f823 	bl	8000e28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f000 f9d1 	bl	8001188 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000de6:	f7ff fed9 	bl	8000b9c <main>
	bx	lr
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000dec:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000df0:	080011fc 	.word	0x080011fc
	ldr	r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000df8:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000dfc:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000e00:	20000020 	.word	0x20000020

08000e04 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC1_2_IRQHandler>
	...

08000e08 <TIM4_IRQHandler>:
#include "stm32f1xx_it.h"

void TIM4_IRQHandler(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  ADC_Cmd(ADC1, ENABLE);
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	4804      	ldr	r0, [pc, #16]	; (8000e20 <TIM4_IRQHandler+0x18>)
 8000e10:	f7ff fa50 	bl	80002b4 <ADC_Cmd>

  TIM_ClearITPendingBit(TIM4, TIM_IT_Update);
 8000e14:	2101      	movs	r1, #1
 8000e16:	4803      	ldr	r0, [pc, #12]	; (8000e24 <TIM4_IRQHandler+0x1c>)
 8000e18:	f7ff fe78 	bl	8000b0c <TIM_ClearITPendingBit>
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40012400 	.word	0x40012400
 8000e24:	40000800 	.word	0x40000800

08000e28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000e2c:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <SystemInit+0x5c>)
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <SystemInit+0x5c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000e38:	4912      	ldr	r1, [pc, #72]	; (8000e84 <SystemInit+0x5c>)
 8000e3a:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <SystemInit+0x5c>)
 8000e3c:	685a      	ldr	r2, [r3, #4]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <SystemInit+0x60>)
 8000e40:	4013      	ands	r3, r2
 8000e42:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000e44:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <SystemInit+0x5c>)
 8000e46:	4b0f      	ldr	r3, [pc, #60]	; (8000e84 <SystemInit+0x5c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e52:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000e54:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <SystemInit+0x5c>)
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <SystemInit+0x5c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e5e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000e60:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <SystemInit+0x5c>)
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <SystemInit+0x5c>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e6a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <SystemInit+0x5c>)
 8000e6e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e72:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000e74:	f000 f80c 	bl	8000e90 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <SystemInit+0x64>)
 8000e7a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e7e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40021000 	.word	0x40021000
 8000e88:	f8ff0000 	.word	0xf8ff0000
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000e94:	f000 f802 	bl	8000e9c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000e98:	bf00      	nop
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000eaa:	4a3a      	ldr	r2, [pc, #232]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000eac:	4b39      	ldr	r3, [pc, #228]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000eb6:	4b37      	ldr	r3, [pc, #220]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ebe:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000ec6:	683b      	ldr	r3, [r7, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d103      	bne.n	8000ed4 <SetSysClockTo72+0x38>
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000ed2:	d1f0      	bne.n	8000eb6 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000ed4:	4b2f      	ldr	r3, [pc, #188]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d002      	beq.n	8000ee6 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	e001      	b.n	8000eea <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d14b      	bne.n	8000f88 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000ef0:	4a29      	ldr	r2, [pc, #164]	; (8000f98 <SetSysClockTo72+0xfc>)
 8000ef2:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <SetSysClockTo72+0xfc>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f043 0310 	orr.w	r3, r3, #16
 8000efa:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000efc:	4a26      	ldr	r2, [pc, #152]	; (8000f98 <SetSysClockTo72+0xfc>)
 8000efe:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <SetSysClockTo72+0xfc>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f023 0303 	bic.w	r3, r3, #3
 8000f06:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000f08:	4a23      	ldr	r2, [pc, #140]	; (8000f98 <SetSysClockTo72+0xfc>)
 8000f0a:	4b23      	ldr	r3, [pc, #140]	; (8000f98 <SetSysClockTo72+0xfc>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000f14:	4a1f      	ldr	r2, [pc, #124]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f16:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000f1c:	4a1d      	ldr	r2, [pc, #116]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f1e:	4b1d      	ldr	r3, [pc, #116]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000f24:	4a1b      	ldr	r2, [pc, #108]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f26:	4b1b      	ldr	r3, [pc, #108]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f2e:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000f30:	4a18      	ldr	r2, [pc, #96]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000f3a:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000f3c:	4a15      	ldr	r2, [pc, #84]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f3e:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000f46:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000f48:	4a12      	ldr	r2, [pc, #72]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f52:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000f54:	bf00      	nop
 8000f56:	4b0f      	ldr	r3, [pc, #60]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d0f9      	beq.n	8000f56 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f62:	4a0c      	ldr	r2, [pc, #48]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f64:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f023 0303 	bic.w	r3, r3, #3
 8000f6c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000f6e:	4a09      	ldr	r2, [pc, #36]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000f7a:	bf00      	nop
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <SetSysClockTo72+0xf8>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	f003 030c 	and.w	r3, r3, #12
 8000f84:	2b08      	cmp	r3, #8
 8000f86:	d1f9      	bne.n	8000f7c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40022000 	.word	0x40022000

08000f9c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
	int div = 1;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000fac:	e004      	b.n	8000fb8 <ts_itoa+0x1c>
		div *= base;
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	687a      	ldr	r2, [r7, #4]
 8000fb2:	fb02 f303 	mul.w	r3, r2, r3
 8000fb6:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d2f3      	bcs.n	8000fae <ts_itoa+0x12>

	while (div != 0)
 8000fc6:	e029      	b.n	800101c <ts_itoa+0x80>
	{
		int num = d/div;
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd0:	613b      	str	r3, [r7, #16]
		d = d%div;
 8000fd2:	697a      	ldr	r2, [r7, #20]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fda:	fb02 f201 	mul.w	r2, r2, r1
 8000fde:	1a9b      	subs	r3, r3, r2
 8000fe0:	60bb      	str	r3, [r7, #8]
		div /= base;
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000fea:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	2b09      	cmp	r3, #9
 8000ff0:	dd0a      	ble.n	8001008 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	1c59      	adds	r1, r3, #1
 8000ff8:	68fa      	ldr	r2, [r7, #12]
 8000ffa:	6011      	str	r1, [r2, #0]
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	b2d2      	uxtb	r2, r2
 8001000:	3237      	adds	r2, #55	; 0x37
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e009      	b.n	800101c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	1c59      	adds	r1, r3, #1
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	6011      	str	r1, [r2, #0]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	b2d2      	uxtb	r2, r2
 8001016:	3230      	adds	r2, #48	; 0x30
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d1d2      	bne.n	8000fc8 <ts_itoa+0x2c>
	}
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b088      	sub	sp, #32
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800103c:	e07d      	b.n	800113a <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b25      	cmp	r3, #37	; 0x25
 8001044:	d171      	bne.n	800112a <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	3301      	adds	r3, #1
 800104a:	60bb      	str	r3, [r7, #8]
 800104c:	68bb      	ldr	r3, [r7, #8]
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b64      	cmp	r3, #100	; 0x64
 8001052:	d01e      	beq.n	8001092 <ts_formatstring+0x66>
 8001054:	2b64      	cmp	r3, #100	; 0x64
 8001056:	dc06      	bgt.n	8001066 <ts_formatstring+0x3a>
 8001058:	2b58      	cmp	r3, #88	; 0x58
 800105a:	d050      	beq.n	80010fe <ts_formatstring+0xd2>
 800105c:	2b63      	cmp	r3, #99	; 0x63
 800105e:	d00e      	beq.n	800107e <ts_formatstring+0x52>
 8001060:	2b25      	cmp	r3, #37	; 0x25
 8001062:	d058      	beq.n	8001116 <ts_formatstring+0xea>
 8001064:	e05d      	b.n	8001122 <ts_formatstring+0xf6>
 8001066:	2b73      	cmp	r3, #115	; 0x73
 8001068:	d02b      	beq.n	80010c2 <ts_formatstring+0x96>
 800106a:	2b73      	cmp	r3, #115	; 0x73
 800106c:	dc02      	bgt.n	8001074 <ts_formatstring+0x48>
 800106e:	2b69      	cmp	r3, #105	; 0x69
 8001070:	d00f      	beq.n	8001092 <ts_formatstring+0x66>
 8001072:	e056      	b.n	8001122 <ts_formatstring+0xf6>
 8001074:	2b75      	cmp	r3, #117	; 0x75
 8001076:	d037      	beq.n	80010e8 <ts_formatstring+0xbc>
 8001078:	2b78      	cmp	r3, #120	; 0x78
 800107a:	d040      	beq.n	80010fe <ts_formatstring+0xd2>
 800107c:	e051      	b.n	8001122 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	1c5a      	adds	r2, r3, #1
 8001082:	60fa      	str	r2, [r7, #12]
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	1d11      	adds	r1, r2, #4
 8001088:	6079      	str	r1, [r7, #4]
 800108a:	6812      	ldr	r2, [r2, #0]
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	701a      	strb	r2, [r3, #0]
				break;
 8001090:	e047      	b.n	8001122 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	1d1a      	adds	r2, r3, #4
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da07      	bge.n	80010b2 <ts_formatstring+0x86>
					{
						val *= -1;
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	425b      	negs	r3, r3
 80010a6:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	60fa      	str	r2, [r7, #12]
 80010ae:	222d      	movs	r2, #45	; 0x2d
 80010b0:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80010b2:	69f9      	ldr	r1, [r7, #28]
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	220a      	movs	r2, #10
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff6e 	bl	8000f9c <ts_itoa>
				}
				break;
 80010c0:	e02f      	b.n	8001122 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	1d1a      	adds	r2, r3, #4
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80010cc:	e007      	b.n	80010de <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	1c5a      	adds	r2, r3, #1
 80010d2:	60fa      	str	r2, [r7, #12]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	1c51      	adds	r1, r2, #1
 80010d8:	61b9      	str	r1, [r7, #24]
 80010da:	7812      	ldrb	r2, [r2, #0]
 80010dc:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d1f3      	bne.n	80010ce <ts_formatstring+0xa2>
					}
				}
				break;
 80010e6:	e01c      	b.n	8001122 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	1d1a      	adds	r2, r3, #4
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	6819      	ldr	r1, [r3, #0]
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	220a      	movs	r2, #10
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff50 	bl	8000f9c <ts_itoa>
				break;
 80010fc:	e011      	b.n	8001122 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	1d1a      	adds	r2, r3, #4
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4619      	mov	r1, r3
 8001108:	f107 030c 	add.w	r3, r7, #12
 800110c:	2210      	movs	r2, #16
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ff44 	bl	8000f9c <ts_itoa>
				break;
 8001114:	e005      	b.n	8001122 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	60fa      	str	r2, [r7, #12]
 800111c:	2225      	movs	r2, #37	; 0x25
 800111e:	701a      	strb	r2, [r3, #0]
				  break;
 8001120:	bf00      	nop
			}
			fmt++;
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3301      	adds	r3, #1
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	e007      	b.n	800113a <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	60fa      	str	r2, [r7, #12]
 8001130:	68ba      	ldr	r2, [r7, #8]
 8001132:	1c51      	adds	r1, r2, #1
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	f47f af7d 	bne.w	800103e <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	461a      	mov	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	1ad3      	subs	r3, r2, r3
}
 8001152:	4618      	mov	r0, r3
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 800115a:	b40e      	push	{r1, r2, r3}
 800115c:	b580      	push	{r7, lr}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8001164:	f107 0320 	add.w	r3, r7, #32
 8001168:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 800116a:	68ba      	ldr	r2, [r7, #8]
 800116c:	69f9      	ldr	r1, [r7, #28]
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff5c 	bl	800102c <ts_formatstring>
 8001174:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001182:	b003      	add	sp, #12
 8001184:	4770      	bx	lr
	...

08001188 <__libc_init_array>:
 8001188:	b570      	push	{r4, r5, r6, lr}
 800118a:	2500      	movs	r5, #0
 800118c:	4e0c      	ldr	r6, [pc, #48]	; (80011c0 <__libc_init_array+0x38>)
 800118e:	4c0d      	ldr	r4, [pc, #52]	; (80011c4 <__libc_init_array+0x3c>)
 8001190:	1ba4      	subs	r4, r4, r6
 8001192:	10a4      	asrs	r4, r4, #2
 8001194:	42a5      	cmp	r5, r4
 8001196:	d109      	bne.n	80011ac <__libc_init_array+0x24>
 8001198:	f000 f81a 	bl	80011d0 <_init>
 800119c:	2500      	movs	r5, #0
 800119e:	4e0a      	ldr	r6, [pc, #40]	; (80011c8 <__libc_init_array+0x40>)
 80011a0:	4c0a      	ldr	r4, [pc, #40]	; (80011cc <__libc_init_array+0x44>)
 80011a2:	1ba4      	subs	r4, r4, r6
 80011a4:	10a4      	asrs	r4, r4, #2
 80011a6:	42a5      	cmp	r5, r4
 80011a8:	d105      	bne.n	80011b6 <__libc_init_array+0x2e>
 80011aa:	bd70      	pop	{r4, r5, r6, pc}
 80011ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011b0:	4798      	blx	r3
 80011b2:	3501      	adds	r5, #1
 80011b4:	e7ee      	b.n	8001194 <__libc_init_array+0xc>
 80011b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80011ba:	4798      	blx	r3
 80011bc:	3501      	adds	r5, #1
 80011be:	e7f2      	b.n	80011a6 <__libc_init_array+0x1e>
 80011c0:	080011f4 	.word	0x080011f4
 80011c4:	080011f4 	.word	0x080011f4
 80011c8:	080011f4 	.word	0x080011f4
 80011cc:	080011f8 	.word	0x080011f8

080011d0 <_init>:
 80011d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011d2:	bf00      	nop
 80011d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011d6:	bc08      	pop	{r3}
 80011d8:	469e      	mov	lr, r3
 80011da:	4770      	bx	lr

080011dc <_fini>:
 80011dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011de:	bf00      	nop
 80011e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80011e2:	bc08      	pop	{r3}
 80011e4:	469e      	mov	lr, r3
 80011e6:	4770      	bx	lr
