
lab10exc2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c88  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08004d98  08004d98  00014d98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005028  08005028  00015028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005034  08005034  00015034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000684  20000000  08005038  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000068  20000684  080056bc  00020684  2**2
                  ALLOC
  8 ._user_heap_stack 00000100  200006ec  080056bc  000206ec  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020684  2**0
                  CONTENTS, READONLY
 10 .debug_info   00006408  00000000  00000000  000206ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000f99  00000000  00000000  00026ab5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000820  00000000  00000000  00027a50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000778  00000000  00000000  00028270  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002afd  00000000  00000000  000289e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002800  00000000  00000000  0002b4e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002dce5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e10  00000000  00000000  0002dd64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000684 	.word	0x20000684
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d80 	.word	0x08004d80

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000688 	.word	0x20000688
 800014c:	08004d80 	.word	0x08004d80

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_uldivmod>:
 8000a80:	b953      	cbnz	r3, 8000a98 <__aeabi_uldivmod+0x18>
 8000a82:	b94a      	cbnz	r2, 8000a98 <__aeabi_uldivmod+0x18>
 8000a84:	2900      	cmp	r1, #0
 8000a86:	bf08      	it	eq
 8000a88:	2800      	cmpeq	r0, #0
 8000a8a:	bf1c      	itt	ne
 8000a8c:	f04f 31ff 	movne.w	r1, #4294967295
 8000a90:	f04f 30ff 	movne.w	r0, #4294967295
 8000a94:	f000 b97a 	b.w	8000d8c <__aeabi_idiv0>
 8000a98:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a9c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aa0:	f000 f806 	bl	8000ab0 <__udivmoddi4>
 8000aa4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000aa8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aac:	b004      	add	sp, #16
 8000aae:	4770      	bx	lr

08000ab0 <__udivmoddi4>:
 8000ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ab4:	468c      	mov	ip, r1
 8000ab6:	460e      	mov	r6, r1
 8000ab8:	4604      	mov	r4, r0
 8000aba:	9d08      	ldr	r5, [sp, #32]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d150      	bne.n	8000b62 <__udivmoddi4+0xb2>
 8000ac0:	428a      	cmp	r2, r1
 8000ac2:	4617      	mov	r7, r2
 8000ac4:	d96c      	bls.n	8000ba0 <__udivmoddi4+0xf0>
 8000ac6:	fab2 fe82 	clz	lr, r2
 8000aca:	f1be 0f00 	cmp.w	lr, #0
 8000ace:	d00b      	beq.n	8000ae8 <__udivmoddi4+0x38>
 8000ad0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ad4:	fa01 f60e 	lsl.w	r6, r1, lr
 8000ad8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000adc:	fa02 f70e 	lsl.w	r7, r2, lr
 8000ae0:	ea4c 0c06 	orr.w	ip, ip, r6
 8000ae4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000ae8:	0c3a      	lsrs	r2, r7, #16
 8000aea:	fbbc f9f2 	udiv	r9, ip, r2
 8000aee:	b2bb      	uxth	r3, r7
 8000af0:	fb02 cc19 	mls	ip, r2, r9, ip
 8000af4:	fb09 fa03 	mul.w	sl, r9, r3
 8000af8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8000afc:	ea48 460c 	orr.w	r6, r8, ip, lsl #16
 8000b00:	45b2      	cmp	sl, r6
 8000b02:	d90a      	bls.n	8000b1a <__udivmoddi4+0x6a>
 8000b04:	19f6      	adds	r6, r6, r7
 8000b06:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b0a:	f080 8125 	bcs.w	8000d58 <__udivmoddi4+0x2a8>
 8000b0e:	45b2      	cmp	sl, r6
 8000b10:	f240 8122 	bls.w	8000d58 <__udivmoddi4+0x2a8>
 8000b14:	f1a9 0902 	sub.w	r9, r9, #2
 8000b18:	443e      	add	r6, r7
 8000b1a:	eba6 060a 	sub.w	r6, r6, sl
 8000b1e:	fbb6 f0f2 	udiv	r0, r6, r2
 8000b22:	fb02 6610 	mls	r6, r2, r0, r6
 8000b26:	fb00 f303 	mul.w	r3, r0, r3
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000b30:	42a3      	cmp	r3, r4
 8000b32:	d909      	bls.n	8000b48 <__udivmoddi4+0x98>
 8000b34:	19e4      	adds	r4, r4, r7
 8000b36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b3a:	f080 810b 	bcs.w	8000d54 <__udivmoddi4+0x2a4>
 8000b3e:	42a3      	cmp	r3, r4
 8000b40:	f240 8108 	bls.w	8000d54 <__udivmoddi4+0x2a4>
 8000b44:	3802      	subs	r0, #2
 8000b46:	443c      	add	r4, r7
 8000b48:	2100      	movs	r1, #0
 8000b4a:	1ae4      	subs	r4, r4, r3
 8000b4c:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b50:	2d00      	cmp	r5, #0
 8000b52:	d062      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b54:	2300      	movs	r3, #0
 8000b56:	fa24 f40e 	lsr.w	r4, r4, lr
 8000b5a:	602c      	str	r4, [r5, #0]
 8000b5c:	606b      	str	r3, [r5, #4]
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d907      	bls.n	8000b76 <__udivmoddi4+0xc6>
 8000b66:	2d00      	cmp	r5, #0
 8000b68:	d055      	beq.n	8000c16 <__udivmoddi4+0x166>
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000b70:	4608      	mov	r0, r1
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	f040 808f 	bne.w	8000c9e <__udivmoddi4+0x1ee>
 8000b80:	42b3      	cmp	r3, r6
 8000b82:	d302      	bcc.n	8000b8a <__udivmoddi4+0xda>
 8000b84:	4282      	cmp	r2, r0
 8000b86:	f200 80fc 	bhi.w	8000d82 <__udivmoddi4+0x2d2>
 8000b8a:	1a84      	subs	r4, r0, r2
 8000b8c:	eb66 0603 	sbc.w	r6, r6, r3
 8000b90:	2001      	movs	r0, #1
 8000b92:	46b4      	mov	ip, r6
 8000b94:	2d00      	cmp	r5, #0
 8000b96:	d040      	beq.n	8000c1a <__udivmoddi4+0x16a>
 8000b98:	e885 1010 	stmia.w	r5, {r4, ip}
 8000b9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba0:	b912      	cbnz	r2, 8000ba8 <__udivmoddi4+0xf8>
 8000ba2:	2701      	movs	r7, #1
 8000ba4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000ba8:	fab7 fe87 	clz	lr, r7
 8000bac:	f1be 0f00 	cmp.w	lr, #0
 8000bb0:	d135      	bne.n	8000c1e <__udivmoddi4+0x16e>
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	1bf6      	subs	r6, r6, r7
 8000bb6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000bba:	fa1f f887 	uxth.w	r8, r7
 8000bbe:	fbb6 f2fc 	udiv	r2, r6, ip
 8000bc2:	fb0c 6612 	mls	r6, ip, r2, r6
 8000bc6:	fb08 f002 	mul.w	r0, r8, r2
 8000bca:	0c23      	lsrs	r3, r4, #16
 8000bcc:	ea43 4606 	orr.w	r6, r3, r6, lsl #16
 8000bd0:	42b0      	cmp	r0, r6
 8000bd2:	d907      	bls.n	8000be4 <__udivmoddi4+0x134>
 8000bd4:	19f6      	adds	r6, r6, r7
 8000bd6:	f102 33ff 	add.w	r3, r2, #4294967295
 8000bda:	d202      	bcs.n	8000be2 <__udivmoddi4+0x132>
 8000bdc:	42b0      	cmp	r0, r6
 8000bde:	f200 80d2 	bhi.w	8000d86 <__udivmoddi4+0x2d6>
 8000be2:	461a      	mov	r2, r3
 8000be4:	1a36      	subs	r6, r6, r0
 8000be6:	fbb6 f0fc 	udiv	r0, r6, ip
 8000bea:	fb0c 6610 	mls	r6, ip, r0, r6
 8000bee:	fb08 f800 	mul.w	r8, r8, r0
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	ea43 4406 	orr.w	r4, r3, r6, lsl #16
 8000bf8:	45a0      	cmp	r8, r4
 8000bfa:	d907      	bls.n	8000c0c <__udivmoddi4+0x15c>
 8000bfc:	19e4      	adds	r4, r4, r7
 8000bfe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x15a>
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	f200 80b9 	bhi.w	8000d7c <__udivmoddi4+0x2cc>
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	eba4 0408 	sub.w	r4, r4, r8
 8000c10:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000c14:	e79c      	b.n	8000b50 <__udivmoddi4+0xa0>
 8000c16:	4629      	mov	r1, r5
 8000c18:	4628      	mov	r0, r5
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000c22:	f1ce 0320 	rsb	r3, lr, #32
 8000c26:	fa26 f203 	lsr.w	r2, r6, r3
 8000c2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8000c2e:	fbb2 f1fc 	udiv	r1, r2, ip
 8000c32:	fa1f f887 	uxth.w	r8, r7
 8000c36:	fb0c 2211 	mls	r2, ip, r1, r2
 8000c3a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000c3e:	fa20 f303 	lsr.w	r3, r0, r3
 8000c42:	fb01 f908 	mul.w	r9, r1, r8
 8000c46:	4333      	orrs	r3, r6
 8000c48:	0c1e      	lsrs	r6, r3, #16
 8000c4a:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c4e:	45b1      	cmp	r9, r6
 8000c50:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x1ba>
 8000c56:	19f6      	adds	r6, r6, r7
 8000c58:	f101 32ff 	add.w	r2, r1, #4294967295
 8000c5c:	f080 808c 	bcs.w	8000d78 <__udivmoddi4+0x2c8>
 8000c60:	45b1      	cmp	r9, r6
 8000c62:	f240 8089 	bls.w	8000d78 <__udivmoddi4+0x2c8>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443e      	add	r6, r7
 8000c6a:	eba6 0609 	sub.w	r6, r6, r9
 8000c6e:	fbb6 f0fc 	udiv	r0, r6, ip
 8000c72:	fb0c 6210 	mls	r2, ip, r0, r6
 8000c76:	fb00 f908 	mul.w	r9, r0, r8
 8000c7a:	b29e      	uxth	r6, r3
 8000c7c:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
 8000c80:	45b1      	cmp	r9, r6
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0x1e4>
 8000c84:	19f6      	adds	r6, r6, r7
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	d271      	bcs.n	8000d70 <__udivmoddi4+0x2c0>
 8000c8c:	45b1      	cmp	r9, r6
 8000c8e:	d96f      	bls.n	8000d70 <__udivmoddi4+0x2c0>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443e      	add	r6, r7
 8000c94:	eba6 0609 	sub.w	r6, r6, r9
 8000c98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c9c:	e78f      	b.n	8000bbe <__udivmoddi4+0x10e>
 8000c9e:	f1c1 0720 	rsb	r7, r1, #32
 8000ca2:	fa22 f807 	lsr.w	r8, r2, r7
 8000ca6:	408b      	lsls	r3, r1
 8000ca8:	ea48 0303 	orr.w	r3, r8, r3
 8000cac:	fa26 f407 	lsr.w	r4, r6, r7
 8000cb0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8000cb4:	fbb4 f9fe 	udiv	r9, r4, lr
 8000cb8:	fa1f fc83 	uxth.w	ip, r3
 8000cbc:	fb0e 4419 	mls	r4, lr, r9, r4
 8000cc0:	408e      	lsls	r6, r1
 8000cc2:	fa20 f807 	lsr.w	r8, r0, r7
 8000cc6:	fb09 fa0c 	mul.w	sl, r9, ip
 8000cca:	ea48 0806 	orr.w	r8, r8, r6
 8000cce:	ea4f 4618 	mov.w	r6, r8, lsr #16
 8000cd2:	ea46 4404 	orr.w	r4, r6, r4, lsl #16
 8000cd6:	45a2      	cmp	sl, r4
 8000cd8:	fa02 f201 	lsl.w	r2, r2, r1
 8000cdc:	fa00 f601 	lsl.w	r6, r0, r1
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x244>
 8000ce2:	18e4      	adds	r4, r4, r3
 8000ce4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ce8:	d244      	bcs.n	8000d74 <__udivmoddi4+0x2c4>
 8000cea:	45a2      	cmp	sl, r4
 8000cec:	d942      	bls.n	8000d74 <__udivmoddi4+0x2c4>
 8000cee:	f1a9 0902 	sub.w	r9, r9, #2
 8000cf2:	441c      	add	r4, r3
 8000cf4:	eba4 040a 	sub.w	r4, r4, sl
 8000cf8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000cfc:	fb0e 4410 	mls	r4, lr, r0, r4
 8000d00:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d04:	fa1f f888 	uxth.w	r8, r8
 8000d08:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
 8000d0c:	45a4      	cmp	ip, r4
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x270>
 8000d10:	18e4      	adds	r4, r4, r3
 8000d12:	f100 3eff 	add.w	lr, r0, #4294967295
 8000d16:	d229      	bcs.n	8000d6c <__udivmoddi4+0x2bc>
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d927      	bls.n	8000d6c <__udivmoddi4+0x2bc>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	441c      	add	r4, r3
 8000d20:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d24:	fba0 8902 	umull	r8, r9, r0, r2
 8000d28:	eba4 0c0c 	sub.w	ip, r4, ip
 8000d2c:	45cc      	cmp	ip, r9
 8000d2e:	46c2      	mov	sl, r8
 8000d30:	46ce      	mov	lr, r9
 8000d32:	d315      	bcc.n	8000d60 <__udivmoddi4+0x2b0>
 8000d34:	d012      	beq.n	8000d5c <__udivmoddi4+0x2ac>
 8000d36:	b155      	cbz	r5, 8000d4e <__udivmoddi4+0x29e>
 8000d38:	ebb6 030a 	subs.w	r3, r6, sl
 8000d3c:	eb6c 060e 	sbc.w	r6, ip, lr
 8000d40:	fa06 f707 	lsl.w	r7, r6, r7
 8000d44:	40cb      	lsrs	r3, r1
 8000d46:	431f      	orrs	r7, r3
 8000d48:	40ce      	lsrs	r6, r1
 8000d4a:	602f      	str	r7, [r5, #0]
 8000d4c:	606e      	str	r6, [r5, #4]
 8000d4e:	2100      	movs	r1, #0
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	4610      	mov	r0, r2
 8000d56:	e6f7      	b.n	8000b48 <__udivmoddi4+0x98>
 8000d58:	4689      	mov	r9, r1
 8000d5a:	e6de      	b.n	8000b1a <__udivmoddi4+0x6a>
 8000d5c:	4546      	cmp	r6, r8
 8000d5e:	d2ea      	bcs.n	8000d36 <__udivmoddi4+0x286>
 8000d60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d64:	eb69 0e03 	sbc.w	lr, r9, r3
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7e4      	b.n	8000d36 <__udivmoddi4+0x286>
 8000d6c:	4670      	mov	r0, lr
 8000d6e:	e7d7      	b.n	8000d20 <__udivmoddi4+0x270>
 8000d70:	4618      	mov	r0, r3
 8000d72:	e78f      	b.n	8000c94 <__udivmoddi4+0x1e4>
 8000d74:	4681      	mov	r9, r0
 8000d76:	e7bd      	b.n	8000cf4 <__udivmoddi4+0x244>
 8000d78:	4611      	mov	r1, r2
 8000d7a:	e776      	b.n	8000c6a <__udivmoddi4+0x1ba>
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	443c      	add	r4, r7
 8000d80:	e744      	b.n	8000c0c <__udivmoddi4+0x15c>
 8000d82:	4608      	mov	r0, r1
 8000d84:	e706      	b.n	8000b94 <__udivmoddi4+0xe4>
 8000d86:	3a02      	subs	r2, #2
 8000d88:	443e      	add	r6, r7
 8000d8a:	e72b      	b.n	8000be4 <__udivmoddi4+0x134>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b087      	sub	sp, #28
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	230f      	movs	r3, #15
 8000da2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	78db      	ldrb	r3, [r3, #3]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d03a      	beq.n	8000e22 <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000dac:	4b27      	ldr	r3, [pc, #156]	; (8000e4c <NVIC_Init+0xbc>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	0a1b      	lsrs	r3, r3, #8
 8000db4:	f003 0307 	and.w	r3, r3, #7
 8000db8:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f1c3 0304 	rsb	r3, r3, #4
 8000dc0:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8000dca:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	785b      	ldrb	r3, [r3, #1]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	789b      	ldrb	r3, [r3, #2]
 8000dde:	461a      	mov	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	4013      	ands	r3, r2
 8000de4:	697a      	ldr	r2, [r7, #20]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	011b      	lsls	r3, r3, #4
 8000dee:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000df0:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <NVIC_Init+0xc0>)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	6979      	ldr	r1, [r7, #20]
 8000df8:	b2c9      	uxtb	r1, r1
 8000dfa:	4413      	add	r3, r2
 8000dfc:	460a      	mov	r2, r1
 8000dfe:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e02:	4a13      	ldr	r2, [pc, #76]	; (8000e50 <NVIC_Init+0xc0>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	f003 031f 	and.w	r3, r3, #31
 8000e16:	2101      	movs	r1, #1
 8000e18:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000e20:	e00f      	b.n	8000e42 <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e22:	490b      	ldr	r1, [pc, #44]	; (8000e50 <NVIC_Init+0xc0>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	095b      	lsrs	r3, r3, #5
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	f003 031f 	and.w	r3, r3, #31
 8000e36:	2201      	movs	r2, #1
 8000e38:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000e3a:	f100 0320 	add.w	r3, r0, #32
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e42:	bf00      	nop
 8000e44:	371c      	adds	r7, #28
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	; 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	2300      	movs	r3, #0
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	2300      	movs	r3, #0
 8000e74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	78db      	ldrb	r3, [r3, #3]
 8000e7a:	f003 030f 	and.w	r3, r3, #15
 8000e7e:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	78db      	ldrb	r3, [r3, #3]
 8000e84:	f003 0310 	and.w	r3, r3, #16
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d005      	beq.n	8000e98 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	789b      	ldrb	r3, [r3, #2]
 8000e90:	461a      	mov	r2, r3
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d044      	beq.n	8000f2c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
 8000eac:	e038      	b.n	8000f20 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ec4:	693a      	ldr	r2, [r7, #16]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d126      	bne.n	8000f1a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000ed2:	220f      	movs	r2, #15
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000ee6:	69fa      	ldr	r2, [r7, #28]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	78db      	ldrb	r3, [r3, #3]
 8000ef8:	2b28      	cmp	r3, #40	; 0x28
 8000efa:	d105      	bne.n	8000f08 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000efc:	2201      	movs	r2, #1
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	409a      	lsls	r2, r3
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	615a      	str	r2, [r3, #20]
 8000f06:	e008      	b.n	8000f1a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	2b48      	cmp	r3, #72	; 0x48
 8000f0e:	d104      	bne.n	8000f1a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000f10:	2201      	movs	r2, #1
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	409a      	lsls	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f1a:	69bb      	ldr	r3, [r7, #24]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	61bb      	str	r3, [r7, #24]
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	2b07      	cmp	r3, #7
 8000f24:	d9c3      	bls.n	8000eae <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	2bff      	cmp	r3, #255	; 0xff
 8000f32:	d946      	bls.n	8000fc2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	e03a      	b.n	8000fb6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f40:	69bb      	ldr	r3, [r7, #24]
 8000f42:	3308      	adds	r3, #8
 8000f44:	2201      	movs	r2, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	461a      	mov	r2, r3
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d127      	bne.n	8000fb0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000f66:	220f      	movs	r2, #15
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	4013      	ands	r3, r2
 8000f78:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000f7a:	69fa      	ldr	r2, [r7, #28]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	697a      	ldr	r2, [r7, #20]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	78db      	ldrb	r3, [r3, #3]
 8000f8c:	2b28      	cmp	r3, #40	; 0x28
 8000f8e:	d105      	bne.n	8000f9c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	3308      	adds	r3, #8
 8000f94:	2201      	movs	r2, #1
 8000f96:	409a      	lsls	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	78db      	ldrb	r3, [r3, #3]
 8000fa0:	2b48      	cmp	r3, #72	; 0x48
 8000fa2:	d105      	bne.n	8000fb0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	3308      	adds	r3, #8
 8000fa8:	2201      	movs	r2, #1
 8000faa:	409a      	lsls	r2, r3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	2b07      	cmp	r3, #7
 8000fba:	d9c1      	bls.n	8000f40 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	697a      	ldr	r2, [r7, #20]
 8000fc0:	605a      	str	r2, [r3, #4]
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr

08000fcc <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b08a      	sub	sp, #40	; 0x28
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000fda:	2300      	movs	r3, #0
 8000fdc:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 8000fde:	2304      	movs	r3, #4
 8000fe0:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 8000fe2:	4b57      	ldr	r3, [pc, #348]	; (8001140 <I2C_Init+0x174>)
 8000fe4:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	889b      	ldrh	r3, [r3, #4]
 8000fea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 8000fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000fee:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000ff2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 8000ff4:	f107 0308 	add.w	r3, r7, #8
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 f98d 	bl	8001318 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	4a4f      	ldr	r2, [pc, #316]	; (8001144 <I2C_Init+0x178>)
 8001006:	fba2 2303 	umull	r2, r3, r2, r3
 800100a:	0c9b      	lsrs	r3, r3, #18
 800100c:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 800100e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001010:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001012:	4313      	orrs	r3, r2
 8001014:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800101a:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	b29b      	uxth	r3, r3
 8001022:	f023 0301 	bic.w	r3, r3, #1
 8001026:	b29a      	uxth	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a44      	ldr	r2, [pc, #272]	; (8001148 <I2C_Init+0x17c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d815      	bhi.n	8001066 <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	fbb2 f3f3 	udiv	r3, r2, r3
 8001046:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8001048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800104a:	2b03      	cmp	r3, #3
 800104c:	d801      	bhi.n	8001052 <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 800104e:	2304      	movs	r3, #4
 8001050:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 8001052:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001054:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001056:	4313      	orrs	r3, r2
 8001058:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 800105a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800105c:	3301      	adds	r3, #1
 800105e:	b29a      	uxth	r2, r3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	841a      	strh	r2, [r3, #32]
 8001064:	e040      	b.n	80010e8 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	88db      	ldrh	r3, [r3, #6]
 800106a:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 800106e:	4293      	cmp	r3, r2
 8001070:	d109      	bne.n	8001086 <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	69fa      	ldr	r2, [r7, #28]
 800107e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001082:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001084:	e00e      	b.n	80010a4 <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	009a      	lsls	r2, r3, #2
 8001092:	4413      	add	r3, r2
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	fbb2 f3f3 	udiv	r3, r2, r3
 800109a:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 800109c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800109e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a2:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 80010a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d103      	bne.n	80010b6 <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80010ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80010b0:	f043 0301 	orr.w	r3, r3, #1
 80010b4:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80010b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80010b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80010ba:	4313      	orrs	r3, r2
 80010bc:	b29b      	uxth	r3, r3
 80010be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80010c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80010c6:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80010c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80010ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80010ce:	fb02 f303 	mul.w	r3, r2, r3
 80010d2:	4a1e      	ldr	r2, [pc, #120]	; (800114c <I2C_Init+0x180>)
 80010d4:	fb82 1203 	smull	r1, r2, r2, r3
 80010d8:	1192      	asrs	r2, r2, #6
 80010da:	17db      	asrs	r3, r3, #31
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	b29b      	uxth	r3, r3
 80010e0:	3301      	adds	r3, #1
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80010ec:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	881b      	ldrh	r3, [r3, #0]
 8001102:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001104:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001106:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 800110a:	f023 0302 	bic.w	r3, r3, #2
 800110e:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	889a      	ldrh	r2, [r3, #4]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	895b      	ldrh	r3, [r3, #10]
 8001118:	4313      	orrs	r3, r2
 800111a:	b29a      	uxth	r2, r3
 800111c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800111e:	4313      	orrs	r3, r2
 8001120:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001126:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	899a      	ldrh	r2, [r3, #12]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	891b      	ldrh	r3, [r3, #8]
 8001130:	4313      	orrs	r3, r2
 8001132:	b29a      	uxth	r2, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	811a      	strh	r2, [r3, #8]
}
 8001138:	bf00      	nop
 800113a:	3728      	adds	r7, #40	; 0x28
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	007a1200 	.word	0x007a1200
 8001144:	431bde83 	.word	0x431bde83
 8001148:	000186a0 	.word	0x000186a0
 800114c:	10624dd3 	.word	0x10624dd3

08001150 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800115c:	78fb      	ldrb	r3, [r7, #3]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d008      	beq.n	8001174 <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	881b      	ldrh	r3, [r3, #0]
 8001166:	b29b      	uxth	r3, r3
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	b29a      	uxth	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 8001172:	e007      	b.n	8001184 <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	881b      	ldrh	r3, [r3, #0]
 8001178:	b29b      	uxth	r3, r3
 800117a:	f023 0301 	bic.w	r3, r3, #1
 800117e:	b29a      	uxth	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	801a      	strh	r2, [r3, #0]
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	460b      	mov	r3, r1
 8001198:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800119a:	78fb      	ldrb	r3, [r7, #3]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	881b      	ldrh	r3, [r3, #0]
 80011a4:	b29b      	uxth	r3, r3
 80011a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80011b0:	e007      	b.n	80011c2 <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011bc:	b29a      	uxth	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	801a      	strh	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011d8:	78fb      	ldrb	r3, [r7, #3]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d008      	beq.n	80011f0 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	881b      	ldrh	r3, [r3, #0]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80011ee:	e007      	b.n	8001200 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b29b      	uxth	r3, r3
 80011f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	801a      	strh	r2, [r3, #0]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 800120a:	b480      	push	{r7}
 800120c:	b083      	sub	sp, #12
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	881b      	ldrh	r3, [r3, #0]
 8001220:	b29b      	uxth	r3, r3
 8001222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001226:	b29a      	uxth	r2, r3
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 800122c:	e007      	b.n	800123e <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	881b      	ldrh	r3, [r3, #0]
 8001232:	b29b      	uxth	r3, r3
 8001234:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001238:	b29a      	uxth	r2, r3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	801a      	strh	r2, [r3, #0]
}
 800123e:	bf00      	nop
 8001240:	370c      	adds	r7, #12
 8001242:	46bd      	mov	sp, r7
 8001244:	bc80      	pop	{r7}
 8001246:	4770      	bx	lr

08001248 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	b29a      	uxth	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	821a      	strh	r2, [r3, #16]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	8a1b      	ldrh	r3, [r3, #16]
 8001272:	b29b      	uxth	r3, r3
 8001274:	b2db      	uxtb	r3, r3
}
 8001276:	4618      	mov	r0, r3
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	4613      	mov	r3, r2
 800128e:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8001290:	78bb      	ldrb	r3, [r7, #2]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	70fb      	strb	r3, [r7, #3]
 800129e:	e003      	b.n	80012a8 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80012a8:	78fb      	ldrb	r3, [r7, #3]
 80012aa:	b29a      	uxth	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	821a      	strh	r2, [r3, #16]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bc80      	pop	{r7}
 80012b8:	4770      	bx	lr

080012ba <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80012ba:	b480      	push	{r7}
 80012bc:	b087      	sub	sp, #28
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
 80012c2:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	2300      	movs	r3, #0
 80012ce:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80012d0:	2300      	movs	r3, #0
 80012d2:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	8a9b      	ldrh	r3, [r3, #20]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	8b1b      	ldrh	r3, [r3, #24]
 80012e0:	b29b      	uxth	r3, r3
 80012e2:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	041b      	lsls	r3, r3, #16
 80012e8:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80012f4:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	401a      	ands	r2, r3
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d102      	bne.n	8001308 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
 8001306:	e001      	b.n	800130c <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8001308:	2300      	movs	r3, #0
 800130a:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 800130c:	7dfb      	ldrb	r3, [r7, #23]
}
 800130e:	4618      	mov	r0, r3
 8001310:	371c      	adds	r7, #28
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001320:	2300      	movs	r3, #0
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	2300      	movs	r3, #0
 8001326:	613b      	str	r3, [r7, #16]
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001330:	4b4c      	ldr	r3, [pc, #304]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f003 030c 	and.w	r3, r3, #12
 8001338:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	2b04      	cmp	r3, #4
 800133e:	d007      	beq.n	8001350 <RCC_GetClocksFreq+0x38>
 8001340:	2b08      	cmp	r3, #8
 8001342:	d009      	beq.n	8001358 <RCC_GetClocksFreq+0x40>
 8001344:	2b00      	cmp	r3, #0
 8001346:	d133      	bne.n	80013b0 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a47      	ldr	r2, [pc, #284]	; (8001468 <RCC_GetClocksFreq+0x150>)
 800134c:	601a      	str	r2, [r3, #0]
      break;
 800134e:	e033      	b.n	80013b8 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a45      	ldr	r2, [pc, #276]	; (8001468 <RCC_GetClocksFreq+0x150>)
 8001354:	601a      	str	r2, [r3, #0]
      break;
 8001356:	e02f      	b.n	80013b8 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001358:	4b42      	ldr	r3, [pc, #264]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001360:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001362:	4b40      	ldr	r3, [pc, #256]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	0c9b      	lsrs	r3, r3, #18
 8001370:	3302      	adds	r3, #2
 8001372:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	4a3b      	ldr	r2, [pc, #236]	; (800146c <RCC_GetClocksFreq+0x154>)
 800137e:	fb02 f203 	mul.w	r2, r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001386:	e017      	b.n	80013b8 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001388:	4b36      	ldr	r3, [pc, #216]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d006      	beq.n	80013a2 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4a35      	ldr	r2, [pc, #212]	; (800146c <RCC_GetClocksFreq+0x154>)
 8001398:	fb02 f203 	mul.w	r2, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	601a      	str	r2, [r3, #0]
      break;
 80013a0:	e00a      	b.n	80013b8 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	4a30      	ldr	r2, [pc, #192]	; (8001468 <RCC_GetClocksFreq+0x150>)
 80013a6:	fb02 f203 	mul.w	r2, r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	601a      	str	r2, [r3, #0]
      break;
 80013ae:	e003      	b.n	80013b8 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	4a2d      	ldr	r2, [pc, #180]	; (8001468 <RCC_GetClocksFreq+0x150>)
 80013b4:	601a      	str	r2, [r3, #0]
      break;
 80013b6:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80013b8:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	091b      	lsrs	r3, r3, #4
 80013c6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80013c8:	4a29      	ldr	r2, [pc, #164]	; (8001470 <RCC_GetClocksFreq+0x158>)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	4413      	add	r3, r2
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	40da      	lsrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80013e0:	4b20      	ldr	r3, [pc, #128]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80013e8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	0a1b      	lsrs	r3, r3, #8
 80013ee:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80013f0:	4a1f      	ldr	r2, [pc, #124]	; (8001470 <RCC_GetClocksFreq+0x158>)
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	4413      	add	r3, r2
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	40da      	lsrs	r2, r3
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001410:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	0adb      	lsrs	r3, r3, #11
 8001416:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001418:	4a15      	ldr	r2, [pc, #84]	; (8001470 <RCC_GetClocksFreq+0x158>)
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	40da      	lsrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <RCC_GetClocksFreq+0x14c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001438:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	0b9b      	lsrs	r3, r3, #14
 800143e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001440:	4a0c      	ldr	r2, [pc, #48]	; (8001474 <RCC_GetClocksFreq+0x15c>)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	4413      	add	r3, r2
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68da      	ldr	r2, [r3, #12]
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	fbb2 f2f3 	udiv	r2, r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	611a      	str	r2, [r3, #16]
}
 800145a:	bf00      	nop
 800145c:	371c      	adds	r7, #28
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	40021000 	.word	0x40021000
 8001468:	007a1200 	.word	0x007a1200
 800146c:	003d0900 	.word	0x003d0900
 8001470:	20000000 	.word	0x20000000
 8001474:	20000010 	.word	0x20000010

08001478 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	460b      	mov	r3, r1
 8001482:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d006      	beq.n	8001498 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800148a:	4909      	ldr	r1, [pc, #36]	; (80014b0 <RCC_APB2PeriphClockCmd+0x38>)
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <RCC_APB2PeriphClockCmd+0x38>)
 800148e:	699a      	ldr	r2, [r3, #24]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001496:	e006      	b.n	80014a6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001498:	4905      	ldr	r1, [pc, #20]	; (80014b0 <RCC_APB2PeriphClockCmd+0x38>)
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <RCC_APB2PeriphClockCmd+0x38>)
 800149c:	699a      	ldr	r2, [r3, #24]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	4013      	ands	r3, r2
 80014a4:	618b      	str	r3, [r1, #24]
}
 80014a6:	bf00      	nop
 80014a8:	370c      	adds	r7, #12
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bc80      	pop	{r7}
 80014ae:	4770      	bx	lr
 80014b0:	40021000 	.word	0x40021000

080014b4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80014c6:	4909      	ldr	r1, [pc, #36]	; (80014ec <RCC_APB1PeriphClockCmd+0x38>)
 80014c8:	4b08      	ldr	r3, [pc, #32]	; (80014ec <RCC_APB1PeriphClockCmd+0x38>)
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80014d2:	e006      	b.n	80014e2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80014d4:	4905      	ldr	r1, [pc, #20]	; (80014ec <RCC_APB1PeriphClockCmd+0x38>)
 80014d6:	4b05      	ldr	r3, [pc, #20]	; (80014ec <RCC_APB1PeriphClockCmd+0x38>)
 80014d8:	69da      	ldr	r2, [r3, #28]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	43db      	mvns	r3, r3
 80014de:	4013      	ands	r3, r2
 80014e0:	61cb      	str	r3, [r1, #28]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bc80      	pop	{r7}
 80014ea:	4770      	bx	lr
 80014ec:	40021000 	.word	0x40021000

080014f0 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b085      	sub	sp, #20
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 80014fa:	2300      	movs	r3, #0
 80014fc:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	4a2e      	ldr	r2, [pc, #184]	; (80015c0 <TIM_TimeBaseInit+0xd0>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d013      	beq.n	8001534 <TIM_TimeBaseInit+0x44>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a2d      	ldr	r2, [pc, #180]	; (80015c4 <TIM_TimeBaseInit+0xd4>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d00f      	beq.n	8001534 <TIM_TimeBaseInit+0x44>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800151a:	d00b      	beq.n	8001534 <TIM_TimeBaseInit+0x44>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a2a      	ldr	r2, [pc, #168]	; (80015c8 <TIM_TimeBaseInit+0xd8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <TIM_TimeBaseInit+0x44>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a29      	ldr	r2, [pc, #164]	; (80015cc <TIM_TimeBaseInit+0xdc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d003      	beq.n	8001534 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <TIM_TimeBaseInit+0xe0>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d108      	bne.n	8001546 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8001534:	89fb      	ldrh	r3, [r7, #14]
 8001536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800153a:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	885a      	ldrh	r2, [r3, #2]
 8001540:	89fb      	ldrh	r3, [r7, #14]
 8001542:	4313      	orrs	r3, r2
 8001544:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a22      	ldr	r2, [pc, #136]	; (80015d4 <TIM_TimeBaseInit+0xe4>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00c      	beq.n	8001568 <TIM_TimeBaseInit+0x78>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a21      	ldr	r2, [pc, #132]	; (80015d8 <TIM_TimeBaseInit+0xe8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d008      	beq.n	8001568 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8001556:	89fb      	ldrh	r3, [r7, #14]
 8001558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800155c:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	88da      	ldrh	r2, [r3, #6]
 8001562:	89fb      	ldrh	r3, [r7, #14]
 8001564:	4313      	orrs	r3, r2
 8001566:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	89fa      	ldrh	r2, [r7, #14]
 800156c:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	889a      	ldrh	r2, [r3, #4]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	881a      	ldrh	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a0f      	ldr	r2, [pc, #60]	; (80015c0 <TIM_TimeBaseInit+0xd0>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d00f      	beq.n	80015a6 <TIM_TimeBaseInit+0xb6>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a0e      	ldr	r2, [pc, #56]	; (80015c4 <TIM_TimeBaseInit+0xd4>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d00b      	beq.n	80015a6 <TIM_TimeBaseInit+0xb6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a12      	ldr	r2, [pc, #72]	; (80015dc <TIM_TimeBaseInit+0xec>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d007      	beq.n	80015a6 <TIM_TimeBaseInit+0xb6>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a11      	ldr	r2, [pc, #68]	; (80015e0 <TIM_TimeBaseInit+0xf0>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d003      	beq.n	80015a6 <TIM_TimeBaseInit+0xb6>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a10      	ldr	r2, [pc, #64]	; (80015e4 <TIM_TimeBaseInit+0xf4>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d104      	bne.n	80015b0 <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	7a1b      	ldrb	r3, [r3, #8]
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	829a      	strh	r2, [r3, #20]
}
 80015b6:	bf00      	nop
 80015b8:	3714      	adds	r7, #20
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bc80      	pop	{r7}
 80015be:	4770      	bx	lr
 80015c0:	40012c00 	.word	0x40012c00
 80015c4:	40013400 	.word	0x40013400
 80015c8:	40000400 	.word	0x40000400
 80015cc:	40000800 	.word	0x40000800
 80015d0:	40000c00 	.word	0x40000c00
 80015d4:	40001000 	.word	0x40001000
 80015d8:	40001400 	.word	0x40001400
 80015dc:	40014000 	.word	0x40014000
 80015e0:	40014400 	.word	0x40014400
 80015e4:	40014800 	.word	0x40014800

080015e8 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
 80015f0:	460b      	mov	r3, r1
 80015f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015f4:	78fb      	ldrb	r3, [r7, #3]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d008      	beq.n	800160c <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	b29a      	uxth	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800160a:	e007      	b.n	800161c <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	f023 0301 	bic.w	r3, r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	801a      	strh	r2, [r3, #0]
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	460b      	mov	r3, r1
 8001630:	807b      	strh	r3, [r7, #2]
 8001632:	4613      	mov	r3, r2
 8001634:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001636:	787b      	ldrb	r3, [r7, #1]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d008      	beq.n	800164e <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	899b      	ldrh	r3, [r3, #12]
 8001640:	b29a      	uxth	r2, r3
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	4313      	orrs	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800164c:	e009      	b.n	8001662 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	899b      	ldrh	r3, [r3, #12]
 8001652:	b29a      	uxth	r2, r3
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	43db      	mvns	r3, r3
 8001658:	b29b      	uxth	r3, r3
 800165a:	4013      	ands	r3, r2
 800165c:	b29a      	uxth	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	819a      	strh	r2, [r3, #12]
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr

0800166c <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	43db      	mvns	r3, r3
 800167c:	b29a      	uxth	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	821a      	strh	r2, [r3, #16]
}
 8001682:	bf00      	nop
 8001684:	370c      	adds	r7, #12
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001696:	2300      	movs	r3, #0
 8001698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800169a:	2300      	movs	r3, #0
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800169e:	2300      	movs	r3, #0
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80016a2:	2300      	movs	r3, #0
 80016a4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80016a6:	2300      	movs	r3, #0
 80016a8:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	8a1b      	ldrh	r3, [r3, #16]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80016b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016b8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80016bc:	4013      	ands	r3, r2
 80016be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	88db      	ldrh	r3, [r3, #6]
 80016c4:	461a      	mov	r2, r3
 80016c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016c8:	4313      	orrs	r3, r2
 80016ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80016cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	899b      	ldrh	r3, [r3, #12]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80016dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016de:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80016e2:	4013      	ands	r3, r2
 80016e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	889a      	ldrh	r2, [r3, #4]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	891b      	ldrh	r3, [r3, #8]
 80016ee:	4313      	orrs	r3, r2
 80016f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80016f6:	4313      	orrs	r3, r2
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	461a      	mov	r2, r3
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	4313      	orrs	r3, r2
 8001700:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001704:	b29a      	uxth	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	8a9b      	ldrh	r3, [r3, #20]
 800170e:	b29b      	uxth	r3, r3
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001714:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001718:	4013      	ands	r3, r2
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	899b      	ldrh	r3, [r3, #12]
 8001720:	461a      	mov	r2, r3
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	4313      	orrs	r3, r2
 8001726:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001730:	f107 0308 	add.w	r3, r7, #8
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fdef 	bl	8001318 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	4a2e      	ldr	r2, [pc, #184]	; (80017f8 <USART_Init+0x16c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d102      	bne.n	8001748 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	62bb      	str	r3, [r7, #40]	; 0x28
 8001746:	e001      	b.n	800174c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	899b      	ldrh	r3, [r3, #12]
 8001750:	b29b      	uxth	r3, r3
 8001752:	b21b      	sxth	r3, r3
 8001754:	2b00      	cmp	r3, #0
 8001756:	da0c      	bge.n	8001772 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	009a      	lsls	r2, r3, #2
 8001762:	441a      	add	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	fbb2 f3f3 	udiv	r3, r2, r3
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	e00b      	b.n	800178a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001772:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	009a      	lsls	r2, r3, #2
 800177c:	441a      	add	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	fbb2 f3f3 	udiv	r3, r2, r3
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800178a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178c:	4a1b      	ldr	r2, [pc, #108]	; (80017fc <USART_Init+0x170>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	095b      	lsrs	r3, r3, #5
 8001794:	011b      	lsls	r3, r3, #4
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	091b      	lsrs	r3, r3, #4
 800179c:	2264      	movs	r2, #100	; 0x64
 800179e:	fb02 f303 	mul.w	r3, r2, r3
 80017a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	899b      	ldrh	r3, [r3, #12]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	da0c      	bge.n	80017ce <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	00db      	lsls	r3, r3, #3
 80017b8:	3332      	adds	r3, #50	; 0x32
 80017ba:	4a10      	ldr	r2, [pc, #64]	; (80017fc <USART_Init+0x170>)
 80017bc:	fba2 2303 	umull	r2, r3, r2, r3
 80017c0:	095b      	lsrs	r3, r3, #5
 80017c2:	f003 0307 	and.w	r3, r3, #7
 80017c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c8:	4313      	orrs	r3, r2
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017cc:	e00b      	b.n	80017e6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	3332      	adds	r3, #50	; 0x32
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <USART_Init+0x170>)
 80017d6:	fba2 2303 	umull	r2, r3, r2, r3
 80017da:	095b      	lsrs	r3, r3, #5
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e2:	4313      	orrs	r3, r2
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80017e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	811a      	strh	r2, [r3, #8]
}
 80017ee:	bf00      	nop
 80017f0:	3730      	adds	r7, #48	; 0x30
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40013800 	.word	0x40013800
 80017fc:	51eb851f 	.word	0x51eb851f

08001800 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800180c:	78fb      	ldrb	r3, [r7, #3]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d008      	beq.n	8001824 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	899b      	ldrh	r3, [r3, #12]
 8001816:	b29b      	uxth	r3, r3
 8001818:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800181c:	b29a      	uxth	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001822:	e007      	b.n	8001834 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	899b      	ldrh	r3, [r3, #12]
 8001828:	b29b      	uxth	r3, r3
 800182a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	819a      	strh	r2, [r3, #12]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <USART_SendData>:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 800183e:	b480      	push	{r7}
 8001840:	b083      	sub	sp, #12
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	460b      	mov	r3, r1
 8001848:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 800184a:	887b      	ldrh	r3, [r7, #2]
 800184c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001850:	b29a      	uxth	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	809a      	strh	r2, [r3, #4]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	b29a      	uxth	r2, r3
 8001876:	887b      	ldrh	r3, [r7, #2]
 8001878:	4013      	ands	r3, r2
 800187a:	b29b      	uxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	d002      	beq.n	8001886 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e001      	b.n	800188a <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800188a:	7bfb      	ldrb	r3, [r7, #15]
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
	...

08001898 <Conf_GPIO>:
#include <conf_gpio.h>

void Conf_GPIO(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800189e:	2101      	movs	r1, #1
 80018a0:	2008      	movs	r0, #8
 80018a2:	f7ff fde9 	bl	8001478 <RCC_APB2PeriphClockCmd>
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO, ENABLE);
 80018a6:	2101      	movs	r1, #1
 80018a8:	2001      	movs	r0, #1
 80018aa:	f7ff fde5 	bl	8001478 <RCC_APB2PeriphClockCmd>

  //I2C1 - B6/SCLK B7/SDA
  GPIO_InitTypeDef gpio_structB;
  gpio_structB.GPIO_Mode = GPIO_Mode_AF_OD;
 80018ae:	231c      	movs	r3, #28
 80018b0:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7;
 80018b2:	23c0      	movs	r3, #192	; 0xc0
 80018b4:	80bb      	strh	r3, [r7, #4]
  gpio_structB.GPIO_Speed = GPIO_Speed_50MHz;
 80018b6:	2303      	movs	r3, #3
 80018b8:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOB, &gpio_structB);
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	4619      	mov	r1, r3
 80018be:	480d      	ldr	r0, [pc, #52]	; (80018f4 <Conf_GPIO+0x5c>)
 80018c0:	f7ff fac8 	bl	8000e54 <GPIO_Init>

  //USART3
  gpio_structB.GPIO_Mode = GPIO_Mode_AF_PP;
 80018c4:	2318      	movs	r3, #24
 80018c6:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_10;
 80018c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018cc:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio_structB);
 80018ce:	1d3b      	adds	r3, r7, #4
 80018d0:	4619      	mov	r1, r3
 80018d2:	4808      	ldr	r0, [pc, #32]	; (80018f4 <Conf_GPIO+0x5c>)
 80018d4:	f7ff fabe 	bl	8000e54 <GPIO_Init>

  gpio_structB.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80018d8:	2304      	movs	r3, #4
 80018da:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_11;
 80018dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e0:	80bb      	strh	r3, [r7, #4]
  GPIO_Init(GPIOB, &gpio_structB);
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	4619      	mov	r1, r3
 80018e6:	4803      	ldr	r0, [pc, #12]	; (80018f4 <Conf_GPIO+0x5c>)
 80018e8:	f7ff fab4 	bl	8000e54 <GPIO_Init>
}
 80018ec:	bf00      	nop
 80018ee:	3708      	adds	r7, #8
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40010c00 	.word	0x40010c00

080018f8 <main>:
void I2C_ReadBlock(uint8_t endereco, void *ptr, unsigned char tam);
void I2C_Write(uint8_t endereco, uint8_t comando, uint16_t escravo);
int8_t I2C_Read(uint8_t endereco, uint8_t escravo);

int main()
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b0ac      	sub	sp, #176	; 0xb0
 80018fc:	af00      	add	r7, sp, #0
  char msg[30];
  double dado;

  Conf_GPIO();
 80018fe:	f7ff ffcb 	bl	8001898 <Conf_GPIO>
  Conf_NVIC();
 8001902:	f000 f9c3 	bl	8001c8c <Conf_NVIC>
  Conf_USART3();
 8001906:	f000 f97b 	bl	8001c00 <Conf_USART3>
  Conf_TIM3();
 800190a:	f000 f99d 	bl	8001c48 <Conf_TIM3>
  Conf_I2C1();
 800190e:	f000 f94f 	bl	8001bb0 <Conf_I2C1>

  char latitude[] = "-23.316862494560258";
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <main+0x108>)
 8001914:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8001918:	461d      	mov	r5, r3
 800191a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800191c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800191e:	682b      	ldr	r3, [r5, #0]
 8001920:	6023      	str	r3, [r4, #0]
  char b[80];
  int teste1 = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  char teste2[] = "def";
 8001928:	4b36      	ldr	r3, [pc, #216]	; (8001a04 <main+0x10c>)
 800192a:	613b      	str	r3, [r7, #16]
  char teste3[] = "ghi";
 800192c:	4b36      	ldr	r3, [pc, #216]	; (8001a08 <main+0x110>)
 800192e:	60fb      	str	r3, [r7, #12]
  char teste4[] = "jkl";
 8001930:	4b36      	ldr	r3, [pc, #216]	; (8001a0c <main+0x114>)
 8001932:	60bb      	str	r3, [r7, #8]
  char teste5[] = "mno";
 8001934:	4b36      	ldr	r3, [pc, #216]	; (8001a10 <main+0x118>)
 8001936:	607b      	str	r3, [r7, #4]
int a = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  double d = -23.316862494560258;
 800193e:	a42e      	add	r4, pc, #184	; (adr r4, 80019f8 <main+0x100>)
 8001940:	cc18      	ldmia	r4, {r3, r4}
 8001942:	e9c7 3426 	strd	r3, r4, [r7, #152]	; 0x98
//    sprintf(msg, "%d: %s\r\n", 0, b);
//    Print_USART3(msg);
////    i++;
////  }

  a = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  int i = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  while (i != 256)
 8001952:	e010      	b.n	8001976 <main+0x7e>
  {
    I2C_Write(i, i+3, 0xA1);
 8001954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001958:	b2d8      	uxtb	r0, r3
 800195a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800195e:	b2db      	uxtb	r3, r3
 8001960:	3303      	adds	r3, #3
 8001962:	b2db      	uxtb	r3, r3
 8001964:	22a1      	movs	r2, #161	; 0xa1
 8001966:	4619      	mov	r1, r3
 8001968:	f000 f858 	bl	8001a1c <I2C_Write>
    i++;
 800196c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001970:	3301      	adds	r3, #1
 8001972:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  while (i != 256)
 8001976:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800197a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800197e:	d1e9      	bne.n	8001954 <main+0x5c>
  }

  i = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  while (i != 256)
 8001986:	e01b      	b.n	80019c0 <main+0xc8>
  {
    aux = I2C_Read(i, 0xA0);
 8001988:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800198c:	b2db      	uxtb	r3, r3
 800198e:	21a0      	movs	r1, #160	; 0xa0
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f895 	bl	8001ac0 <I2C_Read>
 8001996:	4603      	mov	r3, r0
 8001998:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    sprintf(msg, "ID: %d\r\n", aux);
 800199c:	f897 2097 	ldrb.w	r2, [r7, #151]	; 0x97
 80019a0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019a4:	491b      	ldr	r1, [pc, #108]	; (8001a14 <main+0x11c>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 fadc 	bl	8001f64 <sprintf>
    Print_USART3(msg);
 80019ac:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 f99d 	bl	8001cf0 <Print_USART3>
    i++;
 80019b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019ba:	3301      	adds	r3, #1
 80019bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  while (i != 256)
 80019c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80019c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019c8:	d1de      	bne.n	8001988 <main+0x90>
  }

  while(1)
  {
    ID = I2C_Read(0x05, 0xA0);
 80019ca:	21a0      	movs	r1, #160	; 0xa0
 80019cc:	2005      	movs	r0, #5
 80019ce:	f000 f877 	bl	8001ac0 <I2C_Read>
 80019d2:	4603      	mov	r3, r0
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <main+0x120>)
 80019d8:	701a      	strb	r2, [r3, #0]
    sprintf(msg, "ID: %d\r\n", ID);
 80019da:	4b0f      	ldr	r3, [pc, #60]	; (8001a18 <main+0x120>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019e4:	490b      	ldr	r1, [pc, #44]	; (8001a14 <main+0x11c>)
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fabc 	bl	8001f64 <sprintf>
    Print_USART3(msg);
 80019ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019f0:	4618      	mov	r0, r3
 80019f2:	f000 f97d 	bl	8001cf0 <Print_USART3>
    ID = I2C_Read(0x05, 0xA0);
 80019f6:	e7e8      	b.n	80019ca <main+0xd2>
 80019f8:	e683771d 	.word	0xe683771d
 80019fc:	c037511d 	.word	0xc037511d
 8001a00:	08004da4 	.word	0x08004da4
 8001a04:	00666564 	.word	0x00666564
 8001a08:	00696867 	.word	0x00696867
 8001a0c:	006c6b6a 	.word	0x006c6b6a
 8001a10:	006f6e6d 	.word	0x006f6e6d
 8001a14:	08004d98 	.word	0x08004d98
 8001a18:	200006dc 	.word	0x200006dc

08001a1c <I2C_Write>:
  while (tam--)
    *data++ = I2C_Read(endereco++, 0xA1);
}

void I2C_Write(uint8_t endereco, uint8_t comando, uint16_t escravo)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
 8001a26:	460b      	mov	r3, r1
 8001a28:	71bb      	strb	r3, [r7, #6]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	80bb      	strh	r3, [r7, #4]
  I2C_GenerateSTART(I2C1, ENABLE);
 8001a2e:	2101      	movs	r1, #1
 8001a30:	481f      	ldr	r0, [pc, #124]	; (8001ab0 <I2C_Write+0x94>)
 8001a32:	f7ff fbac 	bl	800118e <I2C_GenerateSTART>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001a36:	bf00      	nop
 8001a38:	491e      	ldr	r1, [pc, #120]	; (8001ab4 <I2C_Write+0x98>)
 8001a3a:	481d      	ldr	r0, [pc, #116]	; (8001ab0 <I2C_Write+0x94>)
 8001a3c:	f7ff fc3d 	bl	80012ba <I2C_CheckEvent>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f8      	beq.n	8001a38 <I2C_Write+0x1c>

  I2C_Send7bitAddress(I2C1, escravo, I2C_Direction_Transmitter);
 8001a46:	88bb      	ldrh	r3, [r7, #4]
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4818      	ldr	r0, [pc, #96]	; (8001ab0 <I2C_Write+0x94>)
 8001a50:	f7ff fc16 	bl	8001280 <I2C_Send7bitAddress>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001a54:	bf00      	nop
 8001a56:	4918      	ldr	r1, [pc, #96]	; (8001ab8 <I2C_Write+0x9c>)
 8001a58:	4815      	ldr	r0, [pc, #84]	; (8001ab0 <I2C_Write+0x94>)
 8001a5a:	f7ff fc2e 	bl	80012ba <I2C_CheckEvent>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f8      	beq.n	8001a56 <I2C_Write+0x3a>

  I2C_SendData(I2C1, endereco);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4811      	ldr	r0, [pc, #68]	; (8001ab0 <I2C_Write+0x94>)
 8001a6a:	f7ff fbed 	bl	8001248 <I2C_SendData>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001a6e:	bf00      	nop
 8001a70:	4912      	ldr	r1, [pc, #72]	; (8001abc <I2C_Write+0xa0>)
 8001a72:	480f      	ldr	r0, [pc, #60]	; (8001ab0 <I2C_Write+0x94>)
 8001a74:	f7ff fc21 	bl	80012ba <I2C_CheckEvent>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f8      	beq.n	8001a70 <I2C_Write+0x54>

  I2C_SendData(I2C1, comando);
 8001a7e:	79bb      	ldrb	r3, [r7, #6]
 8001a80:	4619      	mov	r1, r3
 8001a82:	480b      	ldr	r0, [pc, #44]	; (8001ab0 <I2C_Write+0x94>)
 8001a84:	f7ff fbe0 	bl	8001248 <I2C_SendData>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001a88:	bf00      	nop
 8001a8a:	490c      	ldr	r1, [pc, #48]	; (8001abc <I2C_Write+0xa0>)
 8001a8c:	4808      	ldr	r0, [pc, #32]	; (8001ab0 <I2C_Write+0x94>)
 8001a8e:	f7ff fc14 	bl	80012ba <I2C_CheckEvent>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0f8      	beq.n	8001a8a <I2C_Write+0x6e>

  I2C_GenerateSTOP(I2C1, ENABLE);
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <I2C_Write+0x94>)
 8001a9c:	f7ff fb96 	bl	80011cc <I2C_GenerateSTOP>
  TIM3_Delay(1000);
 8001aa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aa4:	f000 f906 	bl	8001cb4 <TIM3_Delay>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40005400 	.word	0x40005400
 8001ab4:	00030001 	.word	0x00030001
 8001ab8:	00070082 	.word	0x00070082
 8001abc:	00070084 	.word	0x00070084

08001ac0 <I2C_Read>:

int8_t I2C_Read(uint8_t endereco, uint8_t escravo)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	460a      	mov	r2, r1
 8001aca:	71fb      	strb	r3, [r7, #7]
 8001acc:	4613      	mov	r3, r2
 8001ace:	71bb      	strb	r3, [r7, #6]
  int8_t dado;

  I2C_AcknowledgeConfig(I2C1, ENABLE);
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	4831      	ldr	r0, [pc, #196]	; (8001b98 <I2C_Read+0xd8>)
 8001ad4:	f7ff fb99 	bl	800120a <I2C_AcknowledgeConfig>

  I2C_GenerateSTART(I2C1, ENABLE);
 8001ad8:	2101      	movs	r1, #1
 8001ada:	482f      	ldr	r0, [pc, #188]	; (8001b98 <I2C_Read+0xd8>)
 8001adc:	f7ff fb57 	bl	800118e <I2C_GenerateSTART>

  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001ae0:	bf00      	nop
 8001ae2:	492e      	ldr	r1, [pc, #184]	; (8001b9c <I2C_Read+0xdc>)
 8001ae4:	482c      	ldr	r0, [pc, #176]	; (8001b98 <I2C_Read+0xd8>)
 8001ae6:	f7ff fbe8 	bl	80012ba <I2C_CheckEvent>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0f8      	beq.n	8001ae2 <I2C_Read+0x22>

  I2C_Send7bitAddress(I2C1, escravo, I2C_Direction_Transmitter);
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2200      	movs	r2, #0
 8001af4:	4619      	mov	r1, r3
 8001af6:	4828      	ldr	r0, [pc, #160]	; (8001b98 <I2C_Read+0xd8>)
 8001af8:	f7ff fbc2 	bl	8001280 <I2C_Send7bitAddress>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 8001afc:	bf00      	nop
 8001afe:	4928      	ldr	r1, [pc, #160]	; (8001ba0 <I2C_Read+0xe0>)
 8001b00:	4825      	ldr	r0, [pc, #148]	; (8001b98 <I2C_Read+0xd8>)
 8001b02:	f7ff fbda 	bl	80012ba <I2C_CheckEvent>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d0f8      	beq.n	8001afe <I2C_Read+0x3e>

  I2C_SendData(I2C1, endereco);
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4821      	ldr	r0, [pc, #132]	; (8001b98 <I2C_Read+0xd8>)
 8001b12:	f7ff fb99 	bl	8001248 <I2C_SendData>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED));
 8001b16:	bf00      	nop
 8001b18:	4922      	ldr	r1, [pc, #136]	; (8001ba4 <I2C_Read+0xe4>)
 8001b1a:	481f      	ldr	r0, [pc, #124]	; (8001b98 <I2C_Read+0xd8>)
 8001b1c:	f7ff fbcd 	bl	80012ba <I2C_CheckEvent>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d0f8      	beq.n	8001b18 <I2C_Read+0x58>

  I2C_GenerateSTART(I2C1, ENABLE);
 8001b26:	2101      	movs	r1, #1
 8001b28:	481b      	ldr	r0, [pc, #108]	; (8001b98 <I2C_Read+0xd8>)
 8001b2a:	f7ff fb30 	bl	800118e <I2C_GenerateSTART>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8001b2e:	bf00      	nop
 8001b30:	491a      	ldr	r1, [pc, #104]	; (8001b9c <I2C_Read+0xdc>)
 8001b32:	4819      	ldr	r0, [pc, #100]	; (8001b98 <I2C_Read+0xd8>)
 8001b34:	f7ff fbc1 	bl	80012ba <I2C_CheckEvent>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f8      	beq.n	8001b30 <I2C_Read+0x70>

  I2C_Send7bitAddress(I2C1, escravo, I2C_Direction_Receiver);
 8001b3e:	79bb      	ldrb	r3, [r7, #6]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4619      	mov	r1, r3
 8001b44:	4814      	ldr	r0, [pc, #80]	; (8001b98 <I2C_Read+0xd8>)
 8001b46:	f7ff fb9b 	bl	8001280 <I2C_Send7bitAddress>
  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8001b4a:	bf00      	nop
 8001b4c:	4916      	ldr	r1, [pc, #88]	; (8001ba8 <I2C_Read+0xe8>)
 8001b4e:	4812      	ldr	r0, [pc, #72]	; (8001b98 <I2C_Read+0xd8>)
 8001b50:	f7ff fbb3 	bl	80012ba <I2C_CheckEvent>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d0f8      	beq.n	8001b4c <I2C_Read+0x8c>

  while(!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8001b5a:	bf00      	nop
 8001b5c:	4913      	ldr	r1, [pc, #76]	; (8001bac <I2C_Read+0xec>)
 8001b5e:	480e      	ldr	r0, [pc, #56]	; (8001b98 <I2C_Read+0xd8>)
 8001b60:	f7ff fbab 	bl	80012ba <I2C_CheckEvent>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f8      	beq.n	8001b5c <I2C_Read+0x9c>
  dado = I2C_ReceiveData(I2C1);
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <I2C_Read+0xd8>)
 8001b6c:	f7ff fb7b 	bl	8001266 <I2C_ReceiveData>
 8001b70:	4603      	mov	r3, r0
 8001b72:	73fb      	strb	r3, [r7, #15]

  I2C_AcknowledgeConfig(I2C1, DISABLE);
 8001b74:	2100      	movs	r1, #0
 8001b76:	4808      	ldr	r0, [pc, #32]	; (8001b98 <I2C_Read+0xd8>)
 8001b78:	f7ff fb47 	bl	800120a <I2C_AcknowledgeConfig>

  I2C_GenerateSTOP(I2C1, ENABLE);
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	4806      	ldr	r0, [pc, #24]	; (8001b98 <I2C_Read+0xd8>)
 8001b80:	f7ff fb24 	bl	80011cc <I2C_GenerateSTOP>
  TIM3_Delay(1000);
 8001b84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b88:	f000 f894 	bl	8001cb4 <TIM3_Delay>

  return dado;
 8001b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3710      	adds	r7, #16
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40005400 	.word	0x40005400
 8001b9c:	00030001 	.word	0x00030001
 8001ba0:	00070082 	.word	0x00070082
 8001ba4:	00070084 	.word	0x00070084
 8001ba8:	00030002 	.word	0x00030002
 8001bac:	00030040 	.word	0x00030040

08001bb0 <Conf_I2C1>:

void Conf_I2C1(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001bbc:	f7ff fc7a 	bl	80014b4 <RCC_APB1PeriphClockCmd>

  I2C_InitTypeDef i2c_struct;
  i2c_struct.I2C_Ack = I2C_Ack_Enable;
 8001bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bc4:	817b      	strh	r3, [r7, #10]
  i2c_struct.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8001bc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bca:	81bb      	strh	r3, [r7, #12]
  i2c_struct.I2C_ClockSpeed = I2C_Speed;
 8001bcc:	4b0a      	ldr	r3, [pc, #40]	; (8001bf8 <Conf_I2C1+0x48>)
 8001bce:	603b      	str	r3, [r7, #0]
  i2c_struct.I2C_DutyCycle = I2C_DutyCycle_2;
 8001bd0:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8001bd4:	80fb      	strh	r3, [r7, #6]
  i2c_struct.I2C_Mode = I2C_Mode_I2C;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	80bb      	strh	r3, [r7, #4]
  i2c_struct.I2C_OwnAddress1 = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	813b      	strh	r3, [r7, #8]

  I2C_Init(I2C1, &i2c_struct);
 8001bde:	463b      	mov	r3, r7
 8001be0:	4619      	mov	r1, r3
 8001be2:	4806      	ldr	r0, [pc, #24]	; (8001bfc <Conf_I2C1+0x4c>)
 8001be4:	f7ff f9f2 	bl	8000fcc <I2C_Init>

  I2C_Cmd(I2C1, ENABLE);
 8001be8:	2101      	movs	r1, #1
 8001bea:	4804      	ldr	r0, [pc, #16]	; (8001bfc <Conf_I2C1+0x4c>)
 8001bec:	f7ff fab0 	bl	8001150 <I2C_Cmd>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	000186a0 	.word	0x000186a0
 8001bfc:	40005400 	.word	0x40005400

08001c00 <Conf_USART3>:

void Conf_USART3(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8001c06:	2101      	movs	r1, #1
 8001c08:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c0c:	f7ff fc52 	bl	80014b4 <RCC_APB1PeriphClockCmd>

  USART_InitTypeDef usart_struct;
  usart_struct.USART_BaudRate = 9600;
 8001c10:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001c14:	603b      	str	r3, [r7, #0]
  usart_struct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001c16:	2300      	movs	r3, #0
 8001c18:	81bb      	strh	r3, [r7, #12]
  usart_struct.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 8001c1a:	230c      	movs	r3, #12
 8001c1c:	817b      	strh	r3, [r7, #10]
  usart_struct.USART_Parity = USART_Parity_No;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	813b      	strh	r3, [r7, #8]
  usart_struct.USART_StopBits = USART_StopBits_1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	80fb      	strh	r3, [r7, #6]
  usart_struct.USART_WordLength = USART_WordLength_8b;
 8001c26:	2300      	movs	r3, #0
 8001c28:	80bb      	strh	r3, [r7, #4]
  USART_Init(USART3, &usart_struct);
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4805      	ldr	r0, [pc, #20]	; (8001c44 <Conf_USART3+0x44>)
 8001c30:	f7ff fd2c 	bl	800168c <USART_Init>

  USART_Cmd(USART3, ENABLE);
 8001c34:	2101      	movs	r1, #1
 8001c36:	4803      	ldr	r0, [pc, #12]	; (8001c44 <Conf_USART3+0x44>)
 8001c38:	f7ff fde2 	bl	8001800 <USART_Cmd>
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004800 	.word	0x40004800

08001c48 <Conf_TIM3>:

void Conf_TIM3(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2002      	movs	r0, #2
 8001c52:	f7ff fc2f 	bl	80014b4 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef tim3_struct;
  tim3_struct.TIM_Prescaler = 72-1;
 8001c56:	2347      	movs	r3, #71	; 0x47
 8001c58:	80bb      	strh	r3, [r7, #4]
  tim3_struct.TIM_Period = 2-1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	813b      	strh	r3, [r7, #8]
  tim3_struct.TIM_CounterMode =  TIM_CounterMode_Up;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	80fb      	strh	r3, [r7, #6]
  tim3_struct.TIM_ClockDivision = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	817b      	strh	r3, [r7, #10]
  tim3_struct.TIM_RepetitionCounter = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM3, &tim3_struct);
 8001c6a:	1d3b      	adds	r3, r7, #4
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4806      	ldr	r0, [pc, #24]	; (8001c88 <Conf_TIM3+0x40>)
 8001c70:	f7ff fc3e 	bl	80014f0 <TIM_TimeBaseInit>

  TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8001c74:	2201      	movs	r2, #1
 8001c76:	2101      	movs	r1, #1
 8001c78:	4803      	ldr	r0, [pc, #12]	; (8001c88 <Conf_TIM3+0x40>)
 8001c7a:	f7ff fcd4 	bl	8001626 <TIM_ITConfig>
}
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	40000400 	.word	0x40000400

08001c8c <Conf_NVIC>:

void Conf_NVIC(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef nvic_struct;
  nvic_struct.NVIC_IRQChannel = TIM3_IRQn;
 8001c92:	231d      	movs	r3, #29
 8001c94:	713b      	strb	r3, [r7, #4]
  nvic_struct.NVIC_IRQChannelCmd = ENABLE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	71fb      	strb	r3, [r7, #7]
  nvic_struct.NVIC_IRQChannelPreemptionPriority = 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	717b      	strb	r3, [r7, #5]
  nvic_struct.NVIC_IRQChannelSubPriority = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&nvic_struct);
 8001ca2:	1d3b      	adds	r3, r7, #4
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff f873 	bl	8000d90 <NVIC_Init>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <TIM3_Delay>:

void TIM3_Delay(uint32_t tempo)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  TIM_Cmd(TIM3, ENABLE);
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	480a      	ldr	r0, [pc, #40]	; (8001ce8 <TIM3_Delay+0x34>)
 8001cc0:	f7ff fc92 	bl	80015e8 <TIM_Cmd>

  while(tempo != contador_ms);
 8001cc4:	bf00      	nop
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <TIM3_Delay+0x38>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d1fa      	bne.n	8001cc6 <TIM3_Delay+0x12>

  contador_ms = 0;
 8001cd0:	4b06      	ldr	r3, [pc, #24]	; (8001cec <TIM3_Delay+0x38>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]

  TIM_Cmd(TIM3, DISABLE);
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4803      	ldr	r0, [pc, #12]	; (8001ce8 <TIM3_Delay+0x34>)
 8001cda:	f7ff fc85 	bl	80015e8 <TIM_Cmd>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	200006a0 	.word	0x200006a0

08001cf0 <Print_USART3>:

void Print_USART3(char *string)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  while(*string != 0)
 8001cf8:	e010      	b.n	8001d1c <Print_USART3+0x2c>
  {
    while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == RESET);
 8001cfa:	bf00      	nop
 8001cfc:	2180      	movs	r1, #128	; 0x80
 8001cfe:	480b      	ldr	r0, [pc, #44]	; (8001d2c <Print_USART3+0x3c>)
 8001d00:	f7ff fdae 	bl	8001860 <USART_GetFlagStatus>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f8      	beq.n	8001cfc <Print_USART3+0xc>
    USART_SendData(USART3, *(string++));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	b29b      	uxth	r3, r3
 8001d14:	4619      	mov	r1, r3
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <Print_USART3+0x3c>)
 8001d18:	f7ff fd91 	bl	800183e <USART_SendData>
  while(*string != 0)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1ea      	bne.n	8001cfa <Print_USART3+0xa>
  }
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40004800 	.word	0x40004800

08001d30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d68 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d34:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d36:	e003      	b.n	8001d40 <LoopCopyDataInit>

08001d38 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001d3a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d3c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d3e:	3104      	adds	r1, #4

08001d40 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d40:	480b      	ldr	r0, [pc, #44]	; (8001d70 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001d42:	4b0c      	ldr	r3, [pc, #48]	; (8001d74 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001d44:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d46:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d48:	d3f6      	bcc.n	8001d38 <CopyDataInit>
	ldr	r2, =_sbss
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	; (8001d78 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001d4c:	e002      	b.n	8001d54 <LoopFillZerobss>

08001d4e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d4e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d50:	f842 3b04 	str.w	r3, [r2], #4

08001d54 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001d56:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d58:	d3f9      	bcc.n	8001d4e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001d5a:	f000 f825 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5e:	f000 f8dd 	bl	8001f1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d62:	f7ff fdc9 	bl	80018f8 <main>
	bx	lr
 8001d66:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001d68:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001d6c:	08005038 	.word	0x08005038
	ldr	r0, =_sdata
 8001d70:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d74:	20000684 	.word	0x20000684
	ldr	r2, =_sbss
 8001d78:	20000684 	.word	0x20000684
	ldr	r3, = _ebss
 8001d7c:	200006ec 	.word	0x200006ec

08001d80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d80:	e7fe      	b.n	8001d80 <ADC1_2_IRQHandler>
	...

08001d84 <TIM3_IRQHandler>:
#include "stm32f1xx_it.h"

void TIM3_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  contador_ms++;
 8001d88:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <TIM3_IRQHandler+0x1c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	4a04      	ldr	r2, [pc, #16]	; (8001da0 <TIM3_IRQHandler+0x1c>)
 8001d90:	6013      	str	r3, [r2, #0]

  TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8001d92:	2101      	movs	r1, #1
 8001d94:	4803      	ldr	r0, [pc, #12]	; (8001da4 <TIM3_IRQHandler+0x20>)
 8001d96:	f7ff fc69 	bl	800166c <TIM_ClearITPendingBit>
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	200006a0 	.word	0x200006a0
 8001da4:	40000400 	.word	0x40000400

08001da8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001dac:	4a15      	ldr	r2, [pc, #84]	; (8001e04 <SystemInit+0x5c>)
 8001dae:	4b15      	ldr	r3, [pc, #84]	; (8001e04 <SystemInit+0x5c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8001db8:	4912      	ldr	r1, [pc, #72]	; (8001e04 <SystemInit+0x5c>)
 8001dba:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <SystemInit+0x5c>)
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <SystemInit+0x60>)
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001dc4:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <SystemInit+0x5c>)
 8001dc6:	4b0f      	ldr	r3, [pc, #60]	; (8001e04 <SystemInit+0x5c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001dce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001dd4:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <SystemInit+0x5c>)
 8001dd6:	4b0b      	ldr	r3, [pc, #44]	; (8001e04 <SystemInit+0x5c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dde:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001de0:	4a08      	ldr	r2, [pc, #32]	; (8001e04 <SystemInit+0x5c>)
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <SystemInit+0x5c>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8001dea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <SystemInit+0x5c>)
 8001dee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001df2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8001df4:	f000 f80c 	bl	8001e10 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <SystemInit+0x64>)
 8001dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfe:	609a      	str	r2, [r3, #8]
#endif 
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	f8ff0000 	.word	0xf8ff0000
 8001e0c:	e000ed00 	.word	0xe000ed00

08001e10 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8001e14:	f000 f802 	bl	8001e1c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8001e18:	bf00      	nop
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	2300      	movs	r3, #0
 8001e28:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e2a:	4a3a      	ldr	r2, [pc, #232]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e34:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001e36:	4b37      	ldr	r3, [pc, #220]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3301      	adds	r3, #1
 8001e44:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d103      	bne.n	8001e54 <SetSysClockTo72+0x38>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001e52:	d1f0      	bne.n	8001e36 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001e54:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001e60:	2301      	movs	r3, #1
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	e001      	b.n	8001e6a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001e66:	2300      	movs	r3, #0
 8001e68:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d14b      	bne.n	8001f08 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8001e70:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <SetSysClockTo72+0xfc>)
 8001e72:	4b29      	ldr	r3, [pc, #164]	; (8001f18 <SetSysClockTo72+0xfc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f043 0310 	orr.w	r3, r3, #16
 8001e7a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8001e7c:	4a26      	ldr	r2, [pc, #152]	; (8001f18 <SetSysClockTo72+0xfc>)
 8001e7e:	4b26      	ldr	r3, [pc, #152]	; (8001f18 <SetSysClockTo72+0xfc>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0303 	bic.w	r3, r3, #3
 8001e86:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8001e88:	4a23      	ldr	r2, [pc, #140]	; (8001f18 <SetSysClockTo72+0xfc>)
 8001e8a:	4b23      	ldr	r3, [pc, #140]	; (8001f18 <SetSysClockTo72+0xfc>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001e94:	4a1f      	ldr	r2, [pc, #124]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e96:	4b1f      	ldr	r3, [pc, #124]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001e9e:	4b1d      	ldr	r3, [pc, #116]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8001eb0:	4a18      	ldr	r2, [pc, #96]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001eb2:	4b18      	ldr	r3, [pc, #96]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8001eba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8001ebc:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ebe:	4b15      	ldr	r3, [pc, #84]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8001ec6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001ec8:	4a12      	ldr	r2, [pc, #72]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001eca:	4b12      	ldr	r3, [pc, #72]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001ed4:	bf00      	nop
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f9      	beq.n	8001ed6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001ee2:	4a0c      	ldr	r2, [pc, #48]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f023 0303 	bic.w	r3, r3, #3
 8001eec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001eee:	4a09      	ldr	r2, [pc, #36]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f043 0302 	orr.w	r3, r3, #2
 8001ef8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8001efa:	bf00      	nop
 8001efc:	4b05      	ldr	r3, [pc, #20]	; (8001f14 <SetSysClockTo72+0xf8>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f003 030c 	and.w	r3, r3, #12
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d1f9      	bne.n	8001efc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40022000 	.word	0x40022000

08001f1c <__libc_init_array>:
 8001f1c:	b570      	push	{r4, r5, r6, lr}
 8001f1e:	2500      	movs	r5, #0
 8001f20:	4e0c      	ldr	r6, [pc, #48]	; (8001f54 <__libc_init_array+0x38>)
 8001f22:	4c0d      	ldr	r4, [pc, #52]	; (8001f58 <__libc_init_array+0x3c>)
 8001f24:	1ba4      	subs	r4, r4, r6
 8001f26:	10a4      	asrs	r4, r4, #2
 8001f28:	42a5      	cmp	r5, r4
 8001f2a:	d109      	bne.n	8001f40 <__libc_init_array+0x24>
 8001f2c:	f002 ff28 	bl	8004d80 <_init>
 8001f30:	2500      	movs	r5, #0
 8001f32:	4e0a      	ldr	r6, [pc, #40]	; (8001f5c <__libc_init_array+0x40>)
 8001f34:	4c0a      	ldr	r4, [pc, #40]	; (8001f60 <__libc_init_array+0x44>)
 8001f36:	1ba4      	subs	r4, r4, r6
 8001f38:	10a4      	asrs	r4, r4, #2
 8001f3a:	42a5      	cmp	r5, r4
 8001f3c:	d105      	bne.n	8001f4a <__libc_init_array+0x2e>
 8001f3e:	bd70      	pop	{r4, r5, r6, pc}
 8001f40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f44:	4798      	blx	r3
 8001f46:	3501      	adds	r5, #1
 8001f48:	e7ee      	b.n	8001f28 <__libc_init_array+0xc>
 8001f4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f4e:	4798      	blx	r3
 8001f50:	3501      	adds	r5, #1
 8001f52:	e7f2      	b.n	8001f3a <__libc_init_array+0x1e>
 8001f54:	08005030 	.word	0x08005030
 8001f58:	08005030 	.word	0x08005030
 8001f5c:	08005030 	.word	0x08005030
 8001f60:	08005034 	.word	0x08005034

08001f64 <sprintf>:
 8001f64:	b40e      	push	{r1, r2, r3}
 8001f66:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001f6a:	b500      	push	{lr}
 8001f6c:	b09c      	sub	sp, #112	; 0x70
 8001f6e:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001f72:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f76:	9104      	str	r1, [sp, #16]
 8001f78:	9107      	str	r1, [sp, #28]
 8001f7a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f7e:	ab1d      	add	r3, sp, #116	; 0x74
 8001f80:	9002      	str	r0, [sp, #8]
 8001f82:	9006      	str	r0, [sp, #24]
 8001f84:	4808      	ldr	r0, [pc, #32]	; (8001fa8 <sprintf+0x44>)
 8001f86:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f8a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001f8e:	6800      	ldr	r0, [r0, #0]
 8001f90:	a902      	add	r1, sp, #8
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	f000 f80a 	bl	8001fac <_svfprintf_r>
 8001f98:	2200      	movs	r2, #0
 8001f9a:	9b02      	ldr	r3, [sp, #8]
 8001f9c:	701a      	strb	r2, [r3, #0]
 8001f9e:	b01c      	add	sp, #112	; 0x70
 8001fa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fa4:	b003      	add	sp, #12
 8001fa6:	4770      	bx	lr
 8001fa8:	20000014 	.word	0x20000014

08001fac <_svfprintf_r>:
 8001fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fb0:	b0bf      	sub	sp, #252	; 0xfc
 8001fb2:	4689      	mov	r9, r1
 8001fb4:	4615      	mov	r5, r2
 8001fb6:	461f      	mov	r7, r3
 8001fb8:	4682      	mov	sl, r0
 8001fba:	f001 fe29 	bl	8003c10 <_localeconv_r>
 8001fbe:	6803      	ldr	r3, [r0, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	9311      	str	r3, [sp, #68]	; 0x44
 8001fc4:	f7fe f8c4 	bl	8000150 <strlen>
 8001fc8:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8001fcc:	900a      	str	r0, [sp, #40]	; 0x28
 8001fce:	061b      	lsls	r3, r3, #24
 8001fd0:	d518      	bpl.n	8002004 <_svfprintf_r+0x58>
 8001fd2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8001fd6:	b9ab      	cbnz	r3, 8002004 <_svfprintf_r+0x58>
 8001fd8:	2140      	movs	r1, #64	; 0x40
 8001fda:	4650      	mov	r0, sl
 8001fdc:	f001 fe2e 	bl	8003c3c <_malloc_r>
 8001fe0:	f8c9 0000 	str.w	r0, [r9]
 8001fe4:	f8c9 0010 	str.w	r0, [r9, #16]
 8001fe8:	b948      	cbnz	r0, 8001ffe <_svfprintf_r+0x52>
 8001fea:	230c      	movs	r3, #12
 8001fec:	f8ca 3000 	str.w	r3, [sl]
 8001ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ff4:	930b      	str	r3, [sp, #44]	; 0x2c
 8001ff6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001ff8:	b03f      	add	sp, #252	; 0xfc
 8001ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	f8c9 3014 	str.w	r3, [r9, #20]
 8002004:	2300      	movs	r3, #0
 8002006:	ac2e      	add	r4, sp, #184	; 0xb8
 8002008:	9421      	str	r4, [sp, #132]	; 0x84
 800200a:	9323      	str	r3, [sp, #140]	; 0x8c
 800200c:	9322      	str	r3, [sp, #136]	; 0x88
 800200e:	9509      	str	r5, [sp, #36]	; 0x24
 8002010:	9307      	str	r3, [sp, #28]
 8002012:	930d      	str	r3, [sp, #52]	; 0x34
 8002014:	930e      	str	r3, [sp, #56]	; 0x38
 8002016:	9315      	str	r3, [sp, #84]	; 0x54
 8002018:	9314      	str	r3, [sp, #80]	; 0x50
 800201a:	930b      	str	r3, [sp, #44]	; 0x2c
 800201c:	9312      	str	r3, [sp, #72]	; 0x48
 800201e:	9313      	str	r3, [sp, #76]	; 0x4c
 8002020:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002022:	462b      	mov	r3, r5
 8002024:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002028:	b112      	cbz	r2, 8002030 <_svfprintf_r+0x84>
 800202a:	2a25      	cmp	r2, #37	; 0x25
 800202c:	f040 8083 	bne.w	8002136 <_svfprintf_r+0x18a>
 8002030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002032:	1aee      	subs	r6, r5, r3
 8002034:	d00d      	beq.n	8002052 <_svfprintf_r+0xa6>
 8002036:	e884 0048 	stmia.w	r4, {r3, r6}
 800203a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800203c:	4433      	add	r3, r6
 800203e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002040:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002042:	3301      	adds	r3, #1
 8002044:	2b07      	cmp	r3, #7
 8002046:	9322      	str	r3, [sp, #136]	; 0x88
 8002048:	dc77      	bgt.n	800213a <_svfprintf_r+0x18e>
 800204a:	3408      	adds	r4, #8
 800204c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800204e:	4433      	add	r3, r6
 8002050:	930b      	str	r3, [sp, #44]	; 0x2c
 8002052:	782b      	ldrb	r3, [r5, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	f000 8725 	beq.w	8002ea4 <_svfprintf_r+0xef8>
 800205a:	2300      	movs	r3, #0
 800205c:	1c69      	adds	r1, r5, #1
 800205e:	461a      	mov	r2, r3
 8002060:	f04f 3bff 	mov.w	fp, #4294967295
 8002064:	461d      	mov	r5, r3
 8002066:	200a      	movs	r0, #10
 8002068:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800206c:	930c      	str	r3, [sp, #48]	; 0x30
 800206e:	1c4e      	adds	r6, r1, #1
 8002070:	7809      	ldrb	r1, [r1, #0]
 8002072:	9609      	str	r6, [sp, #36]	; 0x24
 8002074:	9106      	str	r1, [sp, #24]
 8002076:	9906      	ldr	r1, [sp, #24]
 8002078:	3920      	subs	r1, #32
 800207a:	2958      	cmp	r1, #88	; 0x58
 800207c:	f200 8414 	bhi.w	80028a8 <_svfprintf_r+0x8fc>
 8002080:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002084:	041200a5 	.word	0x041200a5
 8002088:	00aa0412 	.word	0x00aa0412
 800208c:	04120412 	.word	0x04120412
 8002090:	04120412 	.word	0x04120412
 8002094:	04120412 	.word	0x04120412
 8002098:	006500ad 	.word	0x006500ad
 800209c:	00b50412 	.word	0x00b50412
 80020a0:	041200b8 	.word	0x041200b8
 80020a4:	00d800d5 	.word	0x00d800d5
 80020a8:	00d800d8 	.word	0x00d800d8
 80020ac:	00d800d8 	.word	0x00d800d8
 80020b0:	00d800d8 	.word	0x00d800d8
 80020b4:	00d800d8 	.word	0x00d800d8
 80020b8:	04120412 	.word	0x04120412
 80020bc:	04120412 	.word	0x04120412
 80020c0:	04120412 	.word	0x04120412
 80020c4:	04120412 	.word	0x04120412
 80020c8:	04120412 	.word	0x04120412
 80020cc:	0122010c 	.word	0x0122010c
 80020d0:	01220412 	.word	0x01220412
 80020d4:	04120412 	.word	0x04120412
 80020d8:	04120412 	.word	0x04120412
 80020dc:	041200eb 	.word	0x041200eb
 80020e0:	033c0412 	.word	0x033c0412
 80020e4:	04120412 	.word	0x04120412
 80020e8:	04120412 	.word	0x04120412
 80020ec:	03a40412 	.word	0x03a40412
 80020f0:	04120412 	.word	0x04120412
 80020f4:	04120085 	.word	0x04120085
 80020f8:	04120412 	.word	0x04120412
 80020fc:	04120412 	.word	0x04120412
 8002100:	04120412 	.word	0x04120412
 8002104:	04120412 	.word	0x04120412
 8002108:	00fe0412 	.word	0x00fe0412
 800210c:	0122006b 	.word	0x0122006b
 8002110:	01220122 	.word	0x01220122
 8002114:	006b00ee 	.word	0x006b00ee
 8002118:	04120412 	.word	0x04120412
 800211c:	041200f1 	.word	0x041200f1
 8002120:	033e031e 	.word	0x033e031e
 8002124:	00f80372 	.word	0x00f80372
 8002128:	03830412 	.word	0x03830412
 800212c:	03a60412 	.word	0x03a60412
 8002130:	04120412 	.word	0x04120412
 8002134:	03be      	.short	0x03be
 8002136:	461d      	mov	r5, r3
 8002138:	e773      	b.n	8002022 <_svfprintf_r+0x76>
 800213a:	aa21      	add	r2, sp, #132	; 0x84
 800213c:	4649      	mov	r1, r9
 800213e:	4650      	mov	r0, sl
 8002140:	f002 fa90 	bl	8004664 <__ssprint_r>
 8002144:	2800      	cmp	r0, #0
 8002146:	f040 868e 	bne.w	8002e66 <_svfprintf_r+0xeba>
 800214a:	ac2e      	add	r4, sp, #184	; 0xb8
 800214c:	e77e      	b.n	800204c <_svfprintf_r+0xa0>
 800214e:	2301      	movs	r3, #1
 8002150:	222b      	movs	r2, #43	; 0x2b
 8002152:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002154:	e78b      	b.n	800206e <_svfprintf_r+0xc2>
 8002156:	460f      	mov	r7, r1
 8002158:	e7fb      	b.n	8002152 <_svfprintf_r+0x1a6>
 800215a:	b10b      	cbz	r3, 8002160 <_svfprintf_r+0x1b4>
 800215c:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002160:	06ae      	lsls	r6, r5, #26
 8002162:	f140 80a1 	bpl.w	80022a8 <_svfprintf_r+0x2fc>
 8002166:	3707      	adds	r7, #7
 8002168:	f027 0707 	bic.w	r7, r7, #7
 800216c:	f107 0308 	add.w	r3, r7, #8
 8002170:	9308      	str	r3, [sp, #32]
 8002172:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002176:	2e00      	cmp	r6, #0
 8002178:	f177 0300 	sbcs.w	r3, r7, #0
 800217c:	da05      	bge.n	800218a <_svfprintf_r+0x1de>
 800217e:	232d      	movs	r3, #45	; 0x2d
 8002180:	4276      	negs	r6, r6
 8002182:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8002186:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 800218a:	2301      	movs	r3, #1
 800218c:	e2c7      	b.n	800271e <_svfprintf_r+0x772>
 800218e:	b10b      	cbz	r3, 8002194 <_svfprintf_r+0x1e8>
 8002190:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002194:	4ba0      	ldr	r3, [pc, #640]	; (8002418 <_svfprintf_r+0x46c>)
 8002196:	9315      	str	r3, [sp, #84]	; 0x54
 8002198:	06ab      	lsls	r3, r5, #26
 800219a:	f140 8336 	bpl.w	800280a <_svfprintf_r+0x85e>
 800219e:	3707      	adds	r7, #7
 80021a0:	f027 0707 	bic.w	r7, r7, #7
 80021a4:	f107 0308 	add.w	r3, r7, #8
 80021a8:	9308      	str	r3, [sp, #32]
 80021aa:	e9d7 6700 	ldrd	r6, r7, [r7]
 80021ae:	07e8      	lsls	r0, r5, #31
 80021b0:	d50b      	bpl.n	80021ca <_svfprintf_r+0x21e>
 80021b2:	ea56 0307 	orrs.w	r3, r6, r7
 80021b6:	d008      	beq.n	80021ca <_svfprintf_r+0x21e>
 80021b8:	2330      	movs	r3, #48	; 0x30
 80021ba:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 80021be:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80021c2:	f045 0502 	orr.w	r5, r5, #2
 80021c6:	f88d 3069 	strb.w	r3, [sp, #105]	; 0x69
 80021ca:	2302      	movs	r3, #2
 80021cc:	e2a4      	b.n	8002718 <_svfprintf_r+0x76c>
 80021ce:	2a00      	cmp	r2, #0
 80021d0:	d1bf      	bne.n	8002152 <_svfprintf_r+0x1a6>
 80021d2:	2301      	movs	r3, #1
 80021d4:	2220      	movs	r2, #32
 80021d6:	e7bc      	b.n	8002152 <_svfprintf_r+0x1a6>
 80021d8:	f045 0501 	orr.w	r5, r5, #1
 80021dc:	e7b9      	b.n	8002152 <_svfprintf_r+0x1a6>
 80021de:	683e      	ldr	r6, [r7, #0]
 80021e0:	1d39      	adds	r1, r7, #4
 80021e2:	2e00      	cmp	r6, #0
 80021e4:	960c      	str	r6, [sp, #48]	; 0x30
 80021e6:	dab6      	bge.n	8002156 <_svfprintf_r+0x1aa>
 80021e8:	460f      	mov	r7, r1
 80021ea:	4276      	negs	r6, r6
 80021ec:	960c      	str	r6, [sp, #48]	; 0x30
 80021ee:	f045 0504 	orr.w	r5, r5, #4
 80021f2:	e7ae      	b.n	8002152 <_svfprintf_r+0x1a6>
 80021f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80021f6:	1c4e      	adds	r6, r1, #1
 80021f8:	7809      	ldrb	r1, [r1, #0]
 80021fa:	292a      	cmp	r1, #42	; 0x2a
 80021fc:	9106      	str	r1, [sp, #24]
 80021fe:	d010      	beq.n	8002222 <_svfprintf_r+0x276>
 8002200:	f04f 0b00 	mov.w	fp, #0
 8002204:	9609      	str	r6, [sp, #36]	; 0x24
 8002206:	9906      	ldr	r1, [sp, #24]
 8002208:	3930      	subs	r1, #48	; 0x30
 800220a:	2909      	cmp	r1, #9
 800220c:	f63f af33 	bhi.w	8002076 <_svfprintf_r+0xca>
 8002210:	fb00 1b0b 	mla	fp, r0, fp, r1
 8002214:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002216:	460e      	mov	r6, r1
 8002218:	f816 1b01 	ldrb.w	r1, [r6], #1
 800221c:	9106      	str	r1, [sp, #24]
 800221e:	9609      	str	r6, [sp, #36]	; 0x24
 8002220:	e7f1      	b.n	8002206 <_svfprintf_r+0x25a>
 8002222:	6839      	ldr	r1, [r7, #0]
 8002224:	9609      	str	r6, [sp, #36]	; 0x24
 8002226:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
 800222a:	3704      	adds	r7, #4
 800222c:	e791      	b.n	8002152 <_svfprintf_r+0x1a6>
 800222e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002232:	e78e      	b.n	8002152 <_svfprintf_r+0x1a6>
 8002234:	2100      	movs	r1, #0
 8002236:	910c      	str	r1, [sp, #48]	; 0x30
 8002238:	9906      	ldr	r1, [sp, #24]
 800223a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800223c:	3930      	subs	r1, #48	; 0x30
 800223e:	fb00 1106 	mla	r1, r0, r6, r1
 8002242:	910c      	str	r1, [sp, #48]	; 0x30
 8002244:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002246:	460e      	mov	r6, r1
 8002248:	f816 1b01 	ldrb.w	r1, [r6], #1
 800224c:	9106      	str	r1, [sp, #24]
 800224e:	9906      	ldr	r1, [sp, #24]
 8002250:	9609      	str	r6, [sp, #36]	; 0x24
 8002252:	3930      	subs	r1, #48	; 0x30
 8002254:	2909      	cmp	r1, #9
 8002256:	d9ef      	bls.n	8002238 <_svfprintf_r+0x28c>
 8002258:	e70d      	b.n	8002076 <_svfprintf_r+0xca>
 800225a:	f045 0508 	orr.w	r5, r5, #8
 800225e:	e778      	b.n	8002152 <_svfprintf_r+0x1a6>
 8002260:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8002264:	e775      	b.n	8002152 <_svfprintf_r+0x1a6>
 8002266:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002268:	7809      	ldrb	r1, [r1, #0]
 800226a:	296c      	cmp	r1, #108	; 0x6c
 800226c:	d105      	bne.n	800227a <_svfprintf_r+0x2ce>
 800226e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002270:	3101      	adds	r1, #1
 8002272:	9109      	str	r1, [sp, #36]	; 0x24
 8002274:	f045 0520 	orr.w	r5, r5, #32
 8002278:	e76b      	b.n	8002152 <_svfprintf_r+0x1a6>
 800227a:	f045 0510 	orr.w	r5, r5, #16
 800227e:	e768      	b.n	8002152 <_svfprintf_r+0x1a6>
 8002280:	2600      	movs	r6, #0
 8002282:	1d3b      	adds	r3, r7, #4
 8002284:	9308      	str	r3, [sp, #32]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800228c:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 8002290:	f04f 0b01 	mov.w	fp, #1
 8002294:	4637      	mov	r7, r6
 8002296:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 800229a:	e11c      	b.n	80024d6 <_svfprintf_r+0x52a>
 800229c:	b10b      	cbz	r3, 80022a2 <_svfprintf_r+0x2f6>
 800229e:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80022a2:	f045 0510 	orr.w	r5, r5, #16
 80022a6:	e75b      	b.n	8002160 <_svfprintf_r+0x1b4>
 80022a8:	f015 0f10 	tst.w	r5, #16
 80022ac:	f107 0304 	add.w	r3, r7, #4
 80022b0:	d003      	beq.n	80022ba <_svfprintf_r+0x30e>
 80022b2:	683e      	ldr	r6, [r7, #0]
 80022b4:	9308      	str	r3, [sp, #32]
 80022b6:	17f7      	asrs	r7, r6, #31
 80022b8:	e75d      	b.n	8002176 <_svfprintf_r+0x1ca>
 80022ba:	683e      	ldr	r6, [r7, #0]
 80022bc:	f015 0f40 	tst.w	r5, #64	; 0x40
 80022c0:	9308      	str	r3, [sp, #32]
 80022c2:	bf18      	it	ne
 80022c4:	b236      	sxthne	r6, r6
 80022c6:	e7f6      	b.n	80022b6 <_svfprintf_r+0x30a>
 80022c8:	b10b      	cbz	r3, 80022ce <_svfprintf_r+0x322>
 80022ca:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80022ce:	3707      	adds	r7, #7
 80022d0:	f027 0707 	bic.w	r7, r7, #7
 80022d4:	f107 0308 	add.w	r3, r7, #8
 80022d8:	9308      	str	r3, [sp, #32]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f04f 32ff 	mov.w	r2, #4294967295
 80022e0:	930d      	str	r3, [sp, #52]	; 0x34
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80022e6:	930e      	str	r3, [sp, #56]	; 0x38
 80022e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80022ea:	4638      	mov	r0, r7
 80022ec:	f023 4600 	bic.w	r6, r3, #2147483648	; 0x80000000
 80022f0:	4631      	mov	r1, r6
 80022f2:	4b4a      	ldr	r3, [pc, #296]	; (800241c <_svfprintf_r+0x470>)
 80022f4:	f7fe fb86 	bl	8000a04 <__aeabi_dcmpun>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	f040 85dc 	bne.w	8002eb6 <_svfprintf_r+0xf0a>
 80022fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <_svfprintf_r+0x470>)
 8002304:	4638      	mov	r0, r7
 8002306:	4631      	mov	r1, r6
 8002308:	f7fe fb5e 	bl	80009c8 <__aeabi_dcmple>
 800230c:	2800      	cmp	r0, #0
 800230e:	f040 85d2 	bne.w	8002eb6 <_svfprintf_r+0xf0a>
 8002312:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002314:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002316:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002318:	990e      	ldr	r1, [sp, #56]	; 0x38
 800231a:	f7fe fb4b 	bl	80009b4 <__aeabi_dcmplt>
 800231e:	b110      	cbz	r0, 8002326 <_svfprintf_r+0x37a>
 8002320:	232d      	movs	r3, #45	; 0x2d
 8002322:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 8002326:	4b3e      	ldr	r3, [pc, #248]	; (8002420 <_svfprintf_r+0x474>)
 8002328:	4a3e      	ldr	r2, [pc, #248]	; (8002424 <_svfprintf_r+0x478>)
 800232a:	9906      	ldr	r1, [sp, #24]
 800232c:	f04f 0b03 	mov.w	fp, #3
 8002330:	2947      	cmp	r1, #71	; 0x47
 8002332:	bfcc      	ite	gt
 8002334:	4690      	movgt	r8, r2
 8002336:	4698      	movle	r8, r3
 8002338:	2600      	movs	r6, #0
 800233a:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800233e:	4637      	mov	r7, r6
 8002340:	e0c9      	b.n	80024d6 <_svfprintf_r+0x52a>
 8002342:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002346:	d026      	beq.n	8002396 <_svfprintf_r+0x3ea>
 8002348:	9b06      	ldr	r3, [sp, #24]
 800234a:	f023 0320 	bic.w	r3, r3, #32
 800234e:	2b47      	cmp	r3, #71	; 0x47
 8002350:	d104      	bne.n	800235c <_svfprintf_r+0x3b0>
 8002352:	f1bb 0f00 	cmp.w	fp, #0
 8002356:	bf08      	it	eq
 8002358:	f04f 0b01 	moveq.w	fp, #1
 800235c:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8002360:	9317      	str	r3, [sp, #92]	; 0x5c
 8002362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002364:	1e1f      	subs	r7, r3, #0
 8002366:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002368:	bfa8      	it	ge
 800236a:	9710      	strge	r7, [sp, #64]	; 0x40
 800236c:	930f      	str	r3, [sp, #60]	; 0x3c
 800236e:	bfbd      	ittte	lt
 8002370:	463b      	movlt	r3, r7
 8002372:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8002376:	9310      	strlt	r3, [sp, #64]	; 0x40
 8002378:	2300      	movge	r3, #0
 800237a:	bfb8      	it	lt
 800237c:	232d      	movlt	r3, #45	; 0x2d
 800237e:	9316      	str	r3, [sp, #88]	; 0x58
 8002380:	9b06      	ldr	r3, [sp, #24]
 8002382:	f023 0720 	bic.w	r7, r3, #32
 8002386:	2f46      	cmp	r7, #70	; 0x46
 8002388:	d008      	beq.n	800239c <_svfprintf_r+0x3f0>
 800238a:	2f45      	cmp	r7, #69	; 0x45
 800238c:	d142      	bne.n	8002414 <_svfprintf_r+0x468>
 800238e:	f10b 0601 	add.w	r6, fp, #1
 8002392:	2302      	movs	r3, #2
 8002394:	e004      	b.n	80023a0 <_svfprintf_r+0x3f4>
 8002396:	f04f 0b06 	mov.w	fp, #6
 800239a:	e7df      	b.n	800235c <_svfprintf_r+0x3b0>
 800239c:	465e      	mov	r6, fp
 800239e:	2303      	movs	r3, #3
 80023a0:	aa1f      	add	r2, sp, #124	; 0x7c
 80023a2:	9204      	str	r2, [sp, #16]
 80023a4:	aa1c      	add	r2, sp, #112	; 0x70
 80023a6:	9203      	str	r2, [sp, #12]
 80023a8:	aa1b      	add	r2, sp, #108	; 0x6c
 80023aa:	9202      	str	r2, [sp, #8]
 80023ac:	e88d 0048 	stmia.w	sp, {r3, r6}
 80023b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80023b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80023b4:	4650      	mov	r0, sl
 80023b6:	f000 fe57 	bl	8003068 <_dtoa_r>
 80023ba:	2f47      	cmp	r7, #71	; 0x47
 80023bc:	4680      	mov	r8, r0
 80023be:	d102      	bne.n	80023c6 <_svfprintf_r+0x41a>
 80023c0:	07e8      	lsls	r0, r5, #31
 80023c2:	f140 8585 	bpl.w	8002ed0 <_svfprintf_r+0xf24>
 80023c6:	eb08 0306 	add.w	r3, r8, r6
 80023ca:	2f46      	cmp	r7, #70	; 0x46
 80023cc:	9307      	str	r3, [sp, #28]
 80023ce:	d111      	bne.n	80023f4 <_svfprintf_r+0x448>
 80023d0:	f898 3000 	ldrb.w	r3, [r8]
 80023d4:	2b30      	cmp	r3, #48	; 0x30
 80023d6:	d109      	bne.n	80023ec <_svfprintf_r+0x440>
 80023d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80023da:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80023dc:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80023de:	9910      	ldr	r1, [sp, #64]	; 0x40
 80023e0:	f7fe fade 	bl	80009a0 <__aeabi_dcmpeq>
 80023e4:	b910      	cbnz	r0, 80023ec <_svfprintf_r+0x440>
 80023e6:	f1c6 0601 	rsb	r6, r6, #1
 80023ea:	961b      	str	r6, [sp, #108]	; 0x6c
 80023ec:	9a07      	ldr	r2, [sp, #28]
 80023ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80023f0:	441a      	add	r2, r3
 80023f2:	9207      	str	r2, [sp, #28]
 80023f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80023f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80023f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80023fa:	9910      	ldr	r1, [sp, #64]	; 0x40
 80023fc:	f7fe fad0 	bl	80009a0 <__aeabi_dcmpeq>
 8002400:	b990      	cbnz	r0, 8002428 <_svfprintf_r+0x47c>
 8002402:	2230      	movs	r2, #48	; 0x30
 8002404:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002406:	9907      	ldr	r1, [sp, #28]
 8002408:	4299      	cmp	r1, r3
 800240a:	d90f      	bls.n	800242c <_svfprintf_r+0x480>
 800240c:	1c59      	adds	r1, r3, #1
 800240e:	911f      	str	r1, [sp, #124]	; 0x7c
 8002410:	701a      	strb	r2, [r3, #0]
 8002412:	e7f7      	b.n	8002404 <_svfprintf_r+0x458>
 8002414:	465e      	mov	r6, fp
 8002416:	e7bc      	b.n	8002392 <_svfprintf_r+0x3e6>
 8002418:	08004dc8 	.word	0x08004dc8
 800241c:	7fefffff 	.word	0x7fefffff
 8002420:	08004db8 	.word	0x08004db8
 8002424:	08004dbc 	.word	0x08004dbc
 8002428:	9b07      	ldr	r3, [sp, #28]
 800242a:	931f      	str	r3, [sp, #124]	; 0x7c
 800242c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800242e:	2f47      	cmp	r7, #71	; 0x47
 8002430:	eba3 0308 	sub.w	r3, r3, r8
 8002434:	9307      	str	r3, [sp, #28]
 8002436:	f040 8100 	bne.w	800263a <_svfprintf_r+0x68e>
 800243a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800243c:	1cd9      	adds	r1, r3, #3
 800243e:	db02      	blt.n	8002446 <_svfprintf_r+0x49a>
 8002440:	459b      	cmp	fp, r3
 8002442:	f280 8126 	bge.w	8002692 <_svfprintf_r+0x6e6>
 8002446:	9b06      	ldr	r3, [sp, #24]
 8002448:	3b02      	subs	r3, #2
 800244a:	9306      	str	r3, [sp, #24]
 800244c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800244e:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8002452:	1e53      	subs	r3, r2, #1
 8002454:	2b00      	cmp	r3, #0
 8002456:	bfa8      	it	ge
 8002458:	222b      	movge	r2, #43	; 0x2b
 800245a:	931b      	str	r3, [sp, #108]	; 0x6c
 800245c:	bfbc      	itt	lt
 800245e:	f1c2 0301 	rsblt	r3, r2, #1
 8002462:	222d      	movlt	r2, #45	; 0x2d
 8002464:	2b09      	cmp	r3, #9
 8002466:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
 800246a:	f88d 2075 	strb.w	r2, [sp, #117]	; 0x75
 800246e:	f340 8100 	ble.w	8002672 <_svfprintf_r+0x6c6>
 8002472:	260a      	movs	r6, #10
 8002474:	f10d 0283 	add.w	r2, sp, #131	; 0x83
 8002478:	fb93 f0f6 	sdiv	r0, r3, r6
 800247c:	fb06 3310 	mls	r3, r6, r0, r3
 8002480:	2809      	cmp	r0, #9
 8002482:	f103 0330 	add.w	r3, r3, #48	; 0x30
 8002486:	f802 3c01 	strb.w	r3, [r2, #-1]
 800248a:	f102 31ff 	add.w	r1, r2, #4294967295
 800248e:	4603      	mov	r3, r0
 8002490:	f300 80e8 	bgt.w	8002664 <_svfprintf_r+0x6b8>
 8002494:	3330      	adds	r3, #48	; 0x30
 8002496:	f801 3c01 	strb.w	r3, [r1, #-1]
 800249a:	3a02      	subs	r2, #2
 800249c:	f10d 0376 	add.w	r3, sp, #118	; 0x76
 80024a0:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 80024a4:	4282      	cmp	r2, r0
 80024a6:	4619      	mov	r1, r3
 80024a8:	f0c0 80de 	bcc.w	8002668 <_svfprintf_r+0x6bc>
 80024ac:	9a07      	ldr	r2, [sp, #28]
 80024ae:	ab1d      	add	r3, sp, #116	; 0x74
 80024b0:	1acb      	subs	r3, r1, r3
 80024b2:	2a01      	cmp	r2, #1
 80024b4:	9314      	str	r3, [sp, #80]	; 0x50
 80024b6:	eb03 0b02 	add.w	fp, r3, r2
 80024ba:	dc02      	bgt.n	80024c2 <_svfprintf_r+0x516>
 80024bc:	f015 0701 	ands.w	r7, r5, #1
 80024c0:	d002      	beq.n	80024c8 <_svfprintf_r+0x51c>
 80024c2:	2700      	movs	r7, #0
 80024c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80024c6:	449b      	add	fp, r3
 80024c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80024ca:	b113      	cbz	r3, 80024d2 <_svfprintf_r+0x526>
 80024cc:	232d      	movs	r3, #45	; 0x2d
 80024ce:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
 80024d2:	2600      	movs	r6, #0
 80024d4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 80024d6:	455e      	cmp	r6, fp
 80024d8:	4633      	mov	r3, r6
 80024da:	bfb8      	it	lt
 80024dc:	465b      	movlt	r3, fp
 80024de:	930f      	str	r3, [sp, #60]	; 0x3c
 80024e0:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80024e4:	b113      	cbz	r3, 80024ec <_svfprintf_r+0x540>
 80024e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80024e8:	3301      	adds	r3, #1
 80024ea:	930f      	str	r3, [sp, #60]	; 0x3c
 80024ec:	f015 0302 	ands.w	r3, r5, #2
 80024f0:	9316      	str	r3, [sp, #88]	; 0x58
 80024f2:	bf1e      	ittt	ne
 80024f4:	9b0f      	ldrne	r3, [sp, #60]	; 0x3c
 80024f6:	3302      	addne	r3, #2
 80024f8:	930f      	strne	r3, [sp, #60]	; 0x3c
 80024fa:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80024fe:	9317      	str	r3, [sp, #92]	; 0x5c
 8002500:	d118      	bne.n	8002534 <_svfprintf_r+0x588>
 8002502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002504:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002506:	1a9b      	subs	r3, r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	9310      	str	r3, [sp, #64]	; 0x40
 800250c:	dd12      	ble.n	8002534 <_svfprintf_r+0x588>
 800250e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002510:	2b10      	cmp	r3, #16
 8002512:	4bab      	ldr	r3, [pc, #684]	; (80027c0 <_svfprintf_r+0x814>)
 8002514:	6023      	str	r3, [r4, #0]
 8002516:	f300 81d9 	bgt.w	80028cc <_svfprintf_r+0x920>
 800251a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800251c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800251e:	6063      	str	r3, [r4, #4]
 8002520:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002522:	4413      	add	r3, r2
 8002524:	9323      	str	r3, [sp, #140]	; 0x8c
 8002526:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002528:	3301      	adds	r3, #1
 800252a:	2b07      	cmp	r3, #7
 800252c:	9322      	str	r3, [sp, #136]	; 0x88
 800252e:	f300 81e6 	bgt.w	80028fe <_svfprintf_r+0x952>
 8002532:	3408      	adds	r4, #8
 8002534:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8002538:	b173      	cbz	r3, 8002558 <_svfprintf_r+0x5ac>
 800253a:	f10d 0367 	add.w	r3, sp, #103	; 0x67
 800253e:	6023      	str	r3, [r4, #0]
 8002540:	2301      	movs	r3, #1
 8002542:	6063      	str	r3, [r4, #4]
 8002544:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002546:	3301      	adds	r3, #1
 8002548:	9323      	str	r3, [sp, #140]	; 0x8c
 800254a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800254c:	3301      	adds	r3, #1
 800254e:	2b07      	cmp	r3, #7
 8002550:	9322      	str	r3, [sp, #136]	; 0x88
 8002552:	f300 81de 	bgt.w	8002912 <_svfprintf_r+0x966>
 8002556:	3408      	adds	r4, #8
 8002558:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800255a:	b16b      	cbz	r3, 8002578 <_svfprintf_r+0x5cc>
 800255c:	ab1a      	add	r3, sp, #104	; 0x68
 800255e:	6023      	str	r3, [r4, #0]
 8002560:	2302      	movs	r3, #2
 8002562:	6063      	str	r3, [r4, #4]
 8002564:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002566:	3302      	adds	r3, #2
 8002568:	9323      	str	r3, [sp, #140]	; 0x8c
 800256a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800256c:	3301      	adds	r3, #1
 800256e:	2b07      	cmp	r3, #7
 8002570:	9322      	str	r3, [sp, #136]	; 0x88
 8002572:	f300 81d8 	bgt.w	8002926 <_svfprintf_r+0x97a>
 8002576:	3408      	adds	r4, #8
 8002578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d118      	bne.n	80025b0 <_svfprintf_r+0x604>
 800257e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	9310      	str	r3, [sp, #64]	; 0x40
 8002588:	dd12      	ble.n	80025b0 <_svfprintf_r+0x604>
 800258a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800258c:	2b10      	cmp	r3, #16
 800258e:	4b8d      	ldr	r3, [pc, #564]	; (80027c4 <_svfprintf_r+0x818>)
 8002590:	6023      	str	r3, [r4, #0]
 8002592:	f300 81d2 	bgt.w	800293a <_svfprintf_r+0x98e>
 8002596:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002598:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800259a:	6063      	str	r3, [r4, #4]
 800259c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800259e:	4413      	add	r3, r2
 80025a0:	9323      	str	r3, [sp, #140]	; 0x8c
 80025a2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80025a4:	3301      	adds	r3, #1
 80025a6:	2b07      	cmp	r3, #7
 80025a8:	9322      	str	r3, [sp, #136]	; 0x88
 80025aa:	f300 81df 	bgt.w	800296c <_svfprintf_r+0x9c0>
 80025ae:	3408      	adds	r4, #8
 80025b0:	eba6 060b 	sub.w	r6, r6, fp
 80025b4:	2e00      	cmp	r6, #0
 80025b6:	dd0f      	ble.n	80025d8 <_svfprintf_r+0x62c>
 80025b8:	4b82      	ldr	r3, [pc, #520]	; (80027c4 <_svfprintf_r+0x818>)
 80025ba:	2e10      	cmp	r6, #16
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	f300 81df 	bgt.w	8002980 <_svfprintf_r+0x9d4>
 80025c2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80025c4:	9823      	ldr	r0, [sp, #140]	; 0x8c
 80025c6:	3301      	adds	r3, #1
 80025c8:	6066      	str	r6, [r4, #4]
 80025ca:	2b07      	cmp	r3, #7
 80025cc:	4406      	add	r6, r0
 80025ce:	9623      	str	r6, [sp, #140]	; 0x8c
 80025d0:	9322      	str	r3, [sp, #136]	; 0x88
 80025d2:	f300 81ec 	bgt.w	80029ae <_svfprintf_r+0xa02>
 80025d6:	3408      	adds	r4, #8
 80025d8:	05eb      	lsls	r3, r5, #23
 80025da:	f100 81f2 	bmi.w	80029c2 <_svfprintf_r+0xa16>
 80025de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80025e0:	e884 0900 	stmia.w	r4, {r8, fp}
 80025e4:	445b      	add	r3, fp
 80025e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80025e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80025ea:	3301      	adds	r3, #1
 80025ec:	2b07      	cmp	r3, #7
 80025ee:	9322      	str	r3, [sp, #136]	; 0x88
 80025f0:	f340 8419 	ble.w	8002e26 <_svfprintf_r+0xe7a>
 80025f4:	aa21      	add	r2, sp, #132	; 0x84
 80025f6:	4649      	mov	r1, r9
 80025f8:	4650      	mov	r0, sl
 80025fa:	f002 f833 	bl	8004664 <__ssprint_r>
 80025fe:	2800      	cmp	r0, #0
 8002600:	f040 8431 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002604:	ac2e      	add	r4, sp, #184	; 0xb8
 8002606:	076b      	lsls	r3, r5, #29
 8002608:	f100 8410 	bmi.w	8002e2c <_svfprintf_r+0xe80>
 800260c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800260e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002610:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002612:	428a      	cmp	r2, r1
 8002614:	bfac      	ite	ge
 8002616:	189b      	addge	r3, r3, r2
 8002618:	185b      	addlt	r3, r3, r1
 800261a:	930b      	str	r3, [sp, #44]	; 0x2c
 800261c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800261e:	b13b      	cbz	r3, 8002630 <_svfprintf_r+0x684>
 8002620:	aa21      	add	r2, sp, #132	; 0x84
 8002622:	4649      	mov	r1, r9
 8002624:	4650      	mov	r0, sl
 8002626:	f002 f81d 	bl	8004664 <__ssprint_r>
 800262a:	2800      	cmp	r0, #0
 800262c:	f040 841b 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002630:	2300      	movs	r3, #0
 8002632:	9f08      	ldr	r7, [sp, #32]
 8002634:	9322      	str	r3, [sp, #136]	; 0x88
 8002636:	ac2e      	add	r4, sp, #184	; 0xb8
 8002638:	e4f2      	b.n	8002020 <_svfprintf_r+0x74>
 800263a:	9b06      	ldr	r3, [sp, #24]
 800263c:	2b65      	cmp	r3, #101	; 0x65
 800263e:	f77f af05 	ble.w	800244c <_svfprintf_r+0x4a0>
 8002642:	9b06      	ldr	r3, [sp, #24]
 8002644:	2b66      	cmp	r3, #102	; 0x66
 8002646:	d124      	bne.n	8002692 <_svfprintf_r+0x6e6>
 8002648:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800264a:	2b00      	cmp	r3, #0
 800264c:	dd19      	ble.n	8002682 <_svfprintf_r+0x6d6>
 800264e:	f1bb 0f00 	cmp.w	fp, #0
 8002652:	d101      	bne.n	8002658 <_svfprintf_r+0x6ac>
 8002654:	07ea      	lsls	r2, r5, #31
 8002656:	d502      	bpl.n	800265e <_svfprintf_r+0x6b2>
 8002658:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800265a:	4413      	add	r3, r2
 800265c:	445b      	add	r3, fp
 800265e:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 8002660:	469b      	mov	fp, r3
 8002662:	e731      	b.n	80024c8 <_svfprintf_r+0x51c>
 8002664:	460a      	mov	r2, r1
 8002666:	e707      	b.n	8002478 <_svfprintf_r+0x4cc>
 8002668:	f812 1b01 	ldrb.w	r1, [r2], #1
 800266c:	f803 1b01 	strb.w	r1, [r3], #1
 8002670:	e718      	b.n	80024a4 <_svfprintf_r+0x4f8>
 8002672:	2230      	movs	r2, #48	; 0x30
 8002674:	4413      	add	r3, r2
 8002676:	f88d 2076 	strb.w	r2, [sp, #118]	; 0x76
 800267a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
 800267e:	a91e      	add	r1, sp, #120	; 0x78
 8002680:	e714      	b.n	80024ac <_svfprintf_r+0x500>
 8002682:	f1bb 0f00 	cmp.w	fp, #0
 8002686:	d101      	bne.n	800268c <_svfprintf_r+0x6e0>
 8002688:	07eb      	lsls	r3, r5, #31
 800268a:	d515      	bpl.n	80026b8 <_svfprintf_r+0x70c>
 800268c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800268e:	3301      	adds	r3, #1
 8002690:	e7e4      	b.n	800265c <_svfprintf_r+0x6b0>
 8002692:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002694:	9b07      	ldr	r3, [sp, #28]
 8002696:	429a      	cmp	r2, r3
 8002698:	db06      	blt.n	80026a8 <_svfprintf_r+0x6fc>
 800269a:	07ef      	lsls	r7, r5, #31
 800269c:	d50e      	bpl.n	80026bc <_svfprintf_r+0x710>
 800269e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80026a0:	4413      	add	r3, r2
 80026a2:	2267      	movs	r2, #103	; 0x67
 80026a4:	9206      	str	r2, [sp, #24]
 80026a6:	e7da      	b.n	800265e <_svfprintf_r+0x6b2>
 80026a8:	9b07      	ldr	r3, [sp, #28]
 80026aa:	990a      	ldr	r1, [sp, #40]	; 0x28
 80026ac:	2a00      	cmp	r2, #0
 80026ae:	440b      	add	r3, r1
 80026b0:	dcf7      	bgt.n	80026a2 <_svfprintf_r+0x6f6>
 80026b2:	f1c2 0201 	rsb	r2, r2, #1
 80026b6:	e7f3      	b.n	80026a0 <_svfprintf_r+0x6f4>
 80026b8:	2301      	movs	r3, #1
 80026ba:	e7d0      	b.n	800265e <_svfprintf_r+0x6b2>
 80026bc:	4613      	mov	r3, r2
 80026be:	e7f0      	b.n	80026a2 <_svfprintf_r+0x6f6>
 80026c0:	b10b      	cbz	r3, 80026c6 <_svfprintf_r+0x71a>
 80026c2:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80026c6:	f015 0f20 	tst.w	r5, #32
 80026ca:	f107 0304 	add.w	r3, r7, #4
 80026ce:	d008      	beq.n	80026e2 <_svfprintf_r+0x736>
 80026d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	17ce      	asrs	r6, r1, #31
 80026d6:	4608      	mov	r0, r1
 80026d8:	4631      	mov	r1, r6
 80026da:	e9c2 0100 	strd	r0, r1, [r2]
 80026de:	461f      	mov	r7, r3
 80026e0:	e49e      	b.n	8002020 <_svfprintf_r+0x74>
 80026e2:	06ee      	lsls	r6, r5, #27
 80026e4:	d503      	bpl.n	80026ee <_svfprintf_r+0x742>
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80026ea:	6011      	str	r1, [r2, #0]
 80026ec:	e7f7      	b.n	80026de <_svfprintf_r+0x732>
 80026ee:	0668      	lsls	r0, r5, #25
 80026f0:	d5f9      	bpl.n	80026e6 <_svfprintf_r+0x73a>
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80026f8:	8011      	strh	r1, [r2, #0]
 80026fa:	e7f0      	b.n	80026de <_svfprintf_r+0x732>
 80026fc:	f045 0510 	orr.w	r5, r5, #16
 8002700:	f015 0320 	ands.w	r3, r5, #32
 8002704:	d022      	beq.n	800274c <_svfprintf_r+0x7a0>
 8002706:	3707      	adds	r7, #7
 8002708:	f027 0707 	bic.w	r7, r7, #7
 800270c:	f107 0308 	add.w	r3, r7, #8
 8002710:	9308      	str	r3, [sp, #32]
 8002712:	e9d7 6700 	ldrd	r6, r7, [r7]
 8002716:	2300      	movs	r3, #0
 8002718:	2200      	movs	r2, #0
 800271a:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 800271e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002722:	f000 83db 	beq.w	8002edc <_svfprintf_r+0xf30>
 8002726:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800272a:	920f      	str	r2, [sp, #60]	; 0x3c
 800272c:	ea56 0207 	orrs.w	r2, r6, r7
 8002730:	f040 83d9 	bne.w	8002ee6 <_svfprintf_r+0xf3a>
 8002734:	f1bb 0f00 	cmp.w	fp, #0
 8002738:	f000 80aa 	beq.w	8002890 <_svfprintf_r+0x8e4>
 800273c:	2b01      	cmp	r3, #1
 800273e:	d076      	beq.n	800282e <_svfprintf_r+0x882>
 8002740:	2b02      	cmp	r3, #2
 8002742:	f000 8091 	beq.w	8002868 <_svfprintf_r+0x8bc>
 8002746:	2600      	movs	r6, #0
 8002748:	2700      	movs	r7, #0
 800274a:	e3d2      	b.n	8002ef2 <_svfprintf_r+0xf46>
 800274c:	1d3a      	adds	r2, r7, #4
 800274e:	f015 0110 	ands.w	r1, r5, #16
 8002752:	9208      	str	r2, [sp, #32]
 8002754:	d002      	beq.n	800275c <_svfprintf_r+0x7b0>
 8002756:	683e      	ldr	r6, [r7, #0]
 8002758:	2700      	movs	r7, #0
 800275a:	e7dd      	b.n	8002718 <_svfprintf_r+0x76c>
 800275c:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8002760:	d0f9      	beq.n	8002756 <_svfprintf_r+0x7aa>
 8002762:	883e      	ldrh	r6, [r7, #0]
 8002764:	2700      	movs	r7, #0
 8002766:	e7d6      	b.n	8002716 <_svfprintf_r+0x76a>
 8002768:	1d3b      	adds	r3, r7, #4
 800276a:	9308      	str	r3, [sp, #32]
 800276c:	2330      	movs	r3, #48	; 0x30
 800276e:	2278      	movs	r2, #120	; 0x78
 8002770:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8002774:	4b14      	ldr	r3, [pc, #80]	; (80027c8 <_svfprintf_r+0x81c>)
 8002776:	683e      	ldr	r6, [r7, #0]
 8002778:	9315      	str	r3, [sp, #84]	; 0x54
 800277a:	2700      	movs	r7, #0
 800277c:	f045 0502 	orr.w	r5, r5, #2
 8002780:	f88d 2069 	strb.w	r2, [sp, #105]	; 0x69
 8002784:	2302      	movs	r3, #2
 8002786:	9206      	str	r2, [sp, #24]
 8002788:	e7c6      	b.n	8002718 <_svfprintf_r+0x76c>
 800278a:	2600      	movs	r6, #0
 800278c:	1d3b      	adds	r3, r7, #4
 800278e:	f1bb 3fff 	cmp.w	fp, #4294967295
 8002792:	9308      	str	r3, [sp, #32]
 8002794:	f8d7 8000 	ldr.w	r8, [r7]
 8002798:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 800279c:	d00a      	beq.n	80027b4 <_svfprintf_r+0x808>
 800279e:	465a      	mov	r2, fp
 80027a0:	4631      	mov	r1, r6
 80027a2:	4640      	mov	r0, r8
 80027a4:	f001 fc56 	bl	8004054 <memchr>
 80027a8:	2800      	cmp	r0, #0
 80027aa:	f000 808d 	beq.w	80028c8 <_svfprintf_r+0x91c>
 80027ae:	eba0 0b08 	sub.w	fp, r0, r8
 80027b2:	e5c4      	b.n	800233e <_svfprintf_r+0x392>
 80027b4:	4640      	mov	r0, r8
 80027b6:	f7fd fccb 	bl	8000150 <strlen>
 80027ba:	4683      	mov	fp, r0
 80027bc:	e5bf      	b.n	800233e <_svfprintf_r+0x392>
 80027be:	bf00      	nop
 80027c0:	08004dec 	.word	0x08004dec
 80027c4:	08004dfc 	.word	0x08004dfc
 80027c8:	08004dd9 	.word	0x08004dd9
 80027cc:	f045 0510 	orr.w	r5, r5, #16
 80027d0:	06a9      	lsls	r1, r5, #26
 80027d2:	d509      	bpl.n	80027e8 <_svfprintf_r+0x83c>
 80027d4:	3707      	adds	r7, #7
 80027d6:	f027 0707 	bic.w	r7, r7, #7
 80027da:	f107 0308 	add.w	r3, r7, #8
 80027de:	9308      	str	r3, [sp, #32]
 80027e0:	e9d7 6700 	ldrd	r6, r7, [r7]
 80027e4:	2301      	movs	r3, #1
 80027e6:	e797      	b.n	8002718 <_svfprintf_r+0x76c>
 80027e8:	1d3b      	adds	r3, r7, #4
 80027ea:	f015 0f10 	tst.w	r5, #16
 80027ee:	9308      	str	r3, [sp, #32]
 80027f0:	d001      	beq.n	80027f6 <_svfprintf_r+0x84a>
 80027f2:	683e      	ldr	r6, [r7, #0]
 80027f4:	e002      	b.n	80027fc <_svfprintf_r+0x850>
 80027f6:	066a      	lsls	r2, r5, #25
 80027f8:	d5fb      	bpl.n	80027f2 <_svfprintf_r+0x846>
 80027fa:	883e      	ldrh	r6, [r7, #0]
 80027fc:	2700      	movs	r7, #0
 80027fe:	e7f1      	b.n	80027e4 <_svfprintf_r+0x838>
 8002800:	b10b      	cbz	r3, 8002806 <_svfprintf_r+0x85a>
 8002802:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 8002806:	4ba3      	ldr	r3, [pc, #652]	; (8002a94 <_svfprintf_r+0xae8>)
 8002808:	e4c5      	b.n	8002196 <_svfprintf_r+0x1ea>
 800280a:	1d3b      	adds	r3, r7, #4
 800280c:	f015 0f10 	tst.w	r5, #16
 8002810:	9308      	str	r3, [sp, #32]
 8002812:	d001      	beq.n	8002818 <_svfprintf_r+0x86c>
 8002814:	683e      	ldr	r6, [r7, #0]
 8002816:	e002      	b.n	800281e <_svfprintf_r+0x872>
 8002818:	066e      	lsls	r6, r5, #25
 800281a:	d5fb      	bpl.n	8002814 <_svfprintf_r+0x868>
 800281c:	883e      	ldrh	r6, [r7, #0]
 800281e:	2700      	movs	r7, #0
 8002820:	e4c5      	b.n	80021ae <_svfprintf_r+0x202>
 8002822:	4643      	mov	r3, r8
 8002824:	e366      	b.n	8002ef4 <_svfprintf_r+0xf48>
 8002826:	2f00      	cmp	r7, #0
 8002828:	bf08      	it	eq
 800282a:	2e0a      	cmpeq	r6, #10
 800282c:	d205      	bcs.n	800283a <_svfprintf_r+0x88e>
 800282e:	3630      	adds	r6, #48	; 0x30
 8002830:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 8002834:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8002838:	e377      	b.n	8002f2a <_svfprintf_r+0xf7e>
 800283a:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 800283e:	4630      	mov	r0, r6
 8002840:	4639      	mov	r1, r7
 8002842:	220a      	movs	r2, #10
 8002844:	2300      	movs	r3, #0
 8002846:	f7fe f91b 	bl	8000a80 <__aeabi_uldivmod>
 800284a:	3230      	adds	r2, #48	; 0x30
 800284c:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8002850:	2300      	movs	r3, #0
 8002852:	4630      	mov	r0, r6
 8002854:	4639      	mov	r1, r7
 8002856:	220a      	movs	r2, #10
 8002858:	f7fe f912 	bl	8000a80 <__aeabi_uldivmod>
 800285c:	4606      	mov	r6, r0
 800285e:	460f      	mov	r7, r1
 8002860:	ea56 0307 	orrs.w	r3, r6, r7
 8002864:	d1eb      	bne.n	800283e <_svfprintf_r+0x892>
 8002866:	e360      	b.n	8002f2a <_svfprintf_r+0xf7e>
 8002868:	2600      	movs	r6, #0
 800286a:	2700      	movs	r7, #0
 800286c:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 8002870:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8002872:	f006 030f 	and.w	r3, r6, #15
 8002876:	5cd3      	ldrb	r3, [r2, r3]
 8002878:	093a      	lsrs	r2, r7, #4
 800287a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800287e:	0933      	lsrs	r3, r6, #4
 8002880:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8002884:	461e      	mov	r6, r3
 8002886:	4617      	mov	r7, r2
 8002888:	ea56 0307 	orrs.w	r3, r6, r7
 800288c:	d1f0      	bne.n	8002870 <_svfprintf_r+0x8c4>
 800288e:	e34c      	b.n	8002f2a <_svfprintf_r+0xf7e>
 8002890:	b93b      	cbnz	r3, 80028a2 <_svfprintf_r+0x8f6>
 8002892:	07ea      	lsls	r2, r5, #31
 8002894:	d505      	bpl.n	80028a2 <_svfprintf_r+0x8f6>
 8002896:	2330      	movs	r3, #48	; 0x30
 8002898:	f10d 08f8 	add.w	r8, sp, #248	; 0xf8
 800289c:	f808 3d41 	strb.w	r3, [r8, #-65]!
 80028a0:	e343      	b.n	8002f2a <_svfprintf_r+0xf7e>
 80028a2:	f10d 08b8 	add.w	r8, sp, #184	; 0xb8
 80028a6:	e340      	b.n	8002f2a <_svfprintf_r+0xf7e>
 80028a8:	b10b      	cbz	r3, 80028ae <_svfprintf_r+0x902>
 80028aa:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
 80028ae:	9b06      	ldr	r3, [sp, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 82f7 	beq.w	8002ea4 <_svfprintf_r+0xef8>
 80028b6:	2600      	movs	r6, #0
 80028b8:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80028bc:	f88d 6067 	strb.w	r6, [sp, #103]	; 0x67
 80028c0:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
 80028c4:	9708      	str	r7, [sp, #32]
 80028c6:	e4e3      	b.n	8002290 <_svfprintf_r+0x2e4>
 80028c8:	4606      	mov	r6, r0
 80028ca:	e538      	b.n	800233e <_svfprintf_r+0x392>
 80028cc:	2310      	movs	r3, #16
 80028ce:	6063      	str	r3, [r4, #4]
 80028d0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80028d2:	3310      	adds	r3, #16
 80028d4:	9323      	str	r3, [sp, #140]	; 0x8c
 80028d6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80028d8:	3301      	adds	r3, #1
 80028da:	2b07      	cmp	r3, #7
 80028dc:	9322      	str	r3, [sp, #136]	; 0x88
 80028de:	dc04      	bgt.n	80028ea <_svfprintf_r+0x93e>
 80028e0:	3408      	adds	r4, #8
 80028e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80028e4:	3b10      	subs	r3, #16
 80028e6:	9310      	str	r3, [sp, #64]	; 0x40
 80028e8:	e611      	b.n	800250e <_svfprintf_r+0x562>
 80028ea:	aa21      	add	r2, sp, #132	; 0x84
 80028ec:	4649      	mov	r1, r9
 80028ee:	4650      	mov	r0, sl
 80028f0:	f001 feb8 	bl	8004664 <__ssprint_r>
 80028f4:	2800      	cmp	r0, #0
 80028f6:	f040 82b6 	bne.w	8002e66 <_svfprintf_r+0xeba>
 80028fa:	ac2e      	add	r4, sp, #184	; 0xb8
 80028fc:	e7f1      	b.n	80028e2 <_svfprintf_r+0x936>
 80028fe:	aa21      	add	r2, sp, #132	; 0x84
 8002900:	4649      	mov	r1, r9
 8002902:	4650      	mov	r0, sl
 8002904:	f001 feae 	bl	8004664 <__ssprint_r>
 8002908:	2800      	cmp	r0, #0
 800290a:	f040 82ac 	bne.w	8002e66 <_svfprintf_r+0xeba>
 800290e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002910:	e610      	b.n	8002534 <_svfprintf_r+0x588>
 8002912:	aa21      	add	r2, sp, #132	; 0x84
 8002914:	4649      	mov	r1, r9
 8002916:	4650      	mov	r0, sl
 8002918:	f001 fea4 	bl	8004664 <__ssprint_r>
 800291c:	2800      	cmp	r0, #0
 800291e:	f040 82a2 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002922:	ac2e      	add	r4, sp, #184	; 0xb8
 8002924:	e618      	b.n	8002558 <_svfprintf_r+0x5ac>
 8002926:	aa21      	add	r2, sp, #132	; 0x84
 8002928:	4649      	mov	r1, r9
 800292a:	4650      	mov	r0, sl
 800292c:	f001 fe9a 	bl	8004664 <__ssprint_r>
 8002930:	2800      	cmp	r0, #0
 8002932:	f040 8298 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002936:	ac2e      	add	r4, sp, #184	; 0xb8
 8002938:	e61e      	b.n	8002578 <_svfprintf_r+0x5cc>
 800293a:	2310      	movs	r3, #16
 800293c:	6063      	str	r3, [r4, #4]
 800293e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002940:	3310      	adds	r3, #16
 8002942:	9323      	str	r3, [sp, #140]	; 0x8c
 8002944:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002946:	3301      	adds	r3, #1
 8002948:	2b07      	cmp	r3, #7
 800294a:	9322      	str	r3, [sp, #136]	; 0x88
 800294c:	dc04      	bgt.n	8002958 <_svfprintf_r+0x9ac>
 800294e:	3408      	adds	r4, #8
 8002950:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002952:	3b10      	subs	r3, #16
 8002954:	9310      	str	r3, [sp, #64]	; 0x40
 8002956:	e618      	b.n	800258a <_svfprintf_r+0x5de>
 8002958:	aa21      	add	r2, sp, #132	; 0x84
 800295a:	4649      	mov	r1, r9
 800295c:	4650      	mov	r0, sl
 800295e:	f001 fe81 	bl	8004664 <__ssprint_r>
 8002962:	2800      	cmp	r0, #0
 8002964:	f040 827f 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002968:	ac2e      	add	r4, sp, #184	; 0xb8
 800296a:	e7f1      	b.n	8002950 <_svfprintf_r+0x9a4>
 800296c:	aa21      	add	r2, sp, #132	; 0x84
 800296e:	4649      	mov	r1, r9
 8002970:	4650      	mov	r0, sl
 8002972:	f001 fe77 	bl	8004664 <__ssprint_r>
 8002976:	2800      	cmp	r0, #0
 8002978:	f040 8275 	bne.w	8002e66 <_svfprintf_r+0xeba>
 800297c:	ac2e      	add	r4, sp, #184	; 0xb8
 800297e:	e617      	b.n	80025b0 <_svfprintf_r+0x604>
 8002980:	2310      	movs	r3, #16
 8002982:	6063      	str	r3, [r4, #4]
 8002984:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002986:	3310      	adds	r3, #16
 8002988:	9323      	str	r3, [sp, #140]	; 0x8c
 800298a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800298c:	3301      	adds	r3, #1
 800298e:	2b07      	cmp	r3, #7
 8002990:	9322      	str	r3, [sp, #136]	; 0x88
 8002992:	dc02      	bgt.n	800299a <_svfprintf_r+0x9ee>
 8002994:	3408      	adds	r4, #8
 8002996:	3e10      	subs	r6, #16
 8002998:	e60e      	b.n	80025b8 <_svfprintf_r+0x60c>
 800299a:	aa21      	add	r2, sp, #132	; 0x84
 800299c:	4649      	mov	r1, r9
 800299e:	4650      	mov	r0, sl
 80029a0:	f001 fe60 	bl	8004664 <__ssprint_r>
 80029a4:	2800      	cmp	r0, #0
 80029a6:	f040 825e 	bne.w	8002e66 <_svfprintf_r+0xeba>
 80029aa:	ac2e      	add	r4, sp, #184	; 0xb8
 80029ac:	e7f3      	b.n	8002996 <_svfprintf_r+0x9ea>
 80029ae:	aa21      	add	r2, sp, #132	; 0x84
 80029b0:	4649      	mov	r1, r9
 80029b2:	4650      	mov	r0, sl
 80029b4:	f001 fe56 	bl	8004664 <__ssprint_r>
 80029b8:	2800      	cmp	r0, #0
 80029ba:	f040 8254 	bne.w	8002e66 <_svfprintf_r+0xeba>
 80029be:	ac2e      	add	r4, sp, #184	; 0xb8
 80029c0:	e60a      	b.n	80025d8 <_svfprintf_r+0x62c>
 80029c2:	9b06      	ldr	r3, [sp, #24]
 80029c4:	2b65      	cmp	r3, #101	; 0x65
 80029c6:	f340 81a9 	ble.w	8002d1c <_svfprintf_r+0xd70>
 80029ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80029cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80029ce:	980d      	ldr	r0, [sp, #52]	; 0x34
 80029d0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80029d2:	f7fd ffe5 	bl	80009a0 <__aeabi_dcmpeq>
 80029d6:	2800      	cmp	r0, #0
 80029d8:	d062      	beq.n	8002aa0 <_svfprintf_r+0xaf4>
 80029da:	4b2f      	ldr	r3, [pc, #188]	; (8002a98 <_svfprintf_r+0xaec>)
 80029dc:	6023      	str	r3, [r4, #0]
 80029de:	2301      	movs	r3, #1
 80029e0:	6063      	str	r3, [r4, #4]
 80029e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80029e4:	3301      	adds	r3, #1
 80029e6:	9323      	str	r3, [sp, #140]	; 0x8c
 80029e8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80029ea:	3301      	adds	r3, #1
 80029ec:	2b07      	cmp	r3, #7
 80029ee:	9322      	str	r3, [sp, #136]	; 0x88
 80029f0:	dc25      	bgt.n	8002a3e <_svfprintf_r+0xa92>
 80029f2:	3408      	adds	r4, #8
 80029f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80029f6:	9a07      	ldr	r2, [sp, #28]
 80029f8:	4293      	cmp	r3, r2
 80029fa:	db02      	blt.n	8002a02 <_svfprintf_r+0xa56>
 80029fc:	07ee      	lsls	r6, r5, #31
 80029fe:	f57f ae02 	bpl.w	8002606 <_svfprintf_r+0x65a>
 8002a02:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002a04:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002a06:	6023      	str	r3, [r4, #0]
 8002a08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002a0a:	6063      	str	r3, [r4, #4]
 8002a0c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a0e:	4413      	add	r3, r2
 8002a10:	9323      	str	r3, [sp, #140]	; 0x8c
 8002a12:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a14:	3301      	adds	r3, #1
 8002a16:	2b07      	cmp	r3, #7
 8002a18:	9322      	str	r3, [sp, #136]	; 0x88
 8002a1a:	dc1a      	bgt.n	8002a52 <_svfprintf_r+0xaa6>
 8002a1c:	3408      	adds	r4, #8
 8002a1e:	9b07      	ldr	r3, [sp, #28]
 8002a20:	1e5e      	subs	r6, r3, #1
 8002a22:	2e00      	cmp	r6, #0
 8002a24:	f77f adef 	ble.w	8002606 <_svfprintf_r+0x65a>
 8002a28:	f04f 0810 	mov.w	r8, #16
 8002a2c:	4f1b      	ldr	r7, [pc, #108]	; (8002a9c <_svfprintf_r+0xaf0>)
 8002a2e:	2e10      	cmp	r6, #16
 8002a30:	6027      	str	r7, [r4, #0]
 8002a32:	dc18      	bgt.n	8002a66 <_svfprintf_r+0xaba>
 8002a34:	6066      	str	r6, [r4, #4]
 8002a36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a38:	441e      	add	r6, r3
 8002a3a:	9623      	str	r6, [sp, #140]	; 0x8c
 8002a3c:	e5d4      	b.n	80025e8 <_svfprintf_r+0x63c>
 8002a3e:	aa21      	add	r2, sp, #132	; 0x84
 8002a40:	4649      	mov	r1, r9
 8002a42:	4650      	mov	r0, sl
 8002a44:	f001 fe0e 	bl	8004664 <__ssprint_r>
 8002a48:	2800      	cmp	r0, #0
 8002a4a:	f040 820c 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002a4e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002a50:	e7d0      	b.n	80029f4 <_svfprintf_r+0xa48>
 8002a52:	aa21      	add	r2, sp, #132	; 0x84
 8002a54:	4649      	mov	r1, r9
 8002a56:	4650      	mov	r0, sl
 8002a58:	f001 fe04 	bl	8004664 <__ssprint_r>
 8002a5c:	2800      	cmp	r0, #0
 8002a5e:	f040 8202 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002a62:	ac2e      	add	r4, sp, #184	; 0xb8
 8002a64:	e7db      	b.n	8002a1e <_svfprintf_r+0xa72>
 8002a66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002a68:	f8c4 8004 	str.w	r8, [r4, #4]
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002a72:	3301      	adds	r3, #1
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	9322      	str	r3, [sp, #136]	; 0x88
 8002a78:	dc02      	bgt.n	8002a80 <_svfprintf_r+0xad4>
 8002a7a:	3408      	adds	r4, #8
 8002a7c:	3e10      	subs	r6, #16
 8002a7e:	e7d6      	b.n	8002a2e <_svfprintf_r+0xa82>
 8002a80:	aa21      	add	r2, sp, #132	; 0x84
 8002a82:	4649      	mov	r1, r9
 8002a84:	4650      	mov	r0, sl
 8002a86:	f001 fded 	bl	8004664 <__ssprint_r>
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f040 81eb 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002a90:	ac2e      	add	r4, sp, #184	; 0xb8
 8002a92:	e7f3      	b.n	8002a7c <_svfprintf_r+0xad0>
 8002a94:	08004dd9 	.word	0x08004dd9
 8002a98:	08004dea 	.word	0x08004dea
 8002a9c:	08004dfc 	.word	0x08004dfc
 8002aa0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	dc7a      	bgt.n	8002b9c <_svfprintf_r+0xbf0>
 8002aa6:	4b9b      	ldr	r3, [pc, #620]	; (8002d14 <_svfprintf_r+0xd68>)
 8002aa8:	6023      	str	r3, [r4, #0]
 8002aaa:	2301      	movs	r3, #1
 8002aac:	6063      	str	r3, [r4, #4]
 8002aae:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ab4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	2b07      	cmp	r3, #7
 8002aba:	9322      	str	r3, [sp, #136]	; 0x88
 8002abc:	dc44      	bgt.n	8002b48 <_svfprintf_r+0xb9c>
 8002abe:	3408      	adds	r4, #8
 8002ac0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002ac2:	b923      	cbnz	r3, 8002ace <_svfprintf_r+0xb22>
 8002ac4:	9b07      	ldr	r3, [sp, #28]
 8002ac6:	b913      	cbnz	r3, 8002ace <_svfprintf_r+0xb22>
 8002ac8:	07e8      	lsls	r0, r5, #31
 8002aca:	f57f ad9c 	bpl.w	8002606 <_svfprintf_r+0x65a>
 8002ace:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002ad0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002ad2:	6023      	str	r3, [r4, #0]
 8002ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ad6:	6063      	str	r3, [r4, #4]
 8002ad8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ada:	4413      	add	r3, r2
 8002adc:	9323      	str	r3, [sp, #140]	; 0x8c
 8002ade:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	2b07      	cmp	r3, #7
 8002ae4:	9322      	str	r3, [sp, #136]	; 0x88
 8002ae6:	dc39      	bgt.n	8002b5c <_svfprintf_r+0xbb0>
 8002ae8:	f104 0308 	add.w	r3, r4, #8
 8002aec:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8002aee:	2e00      	cmp	r6, #0
 8002af0:	da19      	bge.n	8002b26 <_svfprintf_r+0xb7a>
 8002af2:	2410      	movs	r4, #16
 8002af4:	4f88      	ldr	r7, [pc, #544]	; (8002d18 <_svfprintf_r+0xd6c>)
 8002af6:	4276      	negs	r6, r6
 8002af8:	2e10      	cmp	r6, #16
 8002afa:	601f      	str	r7, [r3, #0]
 8002afc:	dc38      	bgt.n	8002b70 <_svfprintf_r+0xbc4>
 8002afe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002b00:	605e      	str	r6, [r3, #4]
 8002b02:	4416      	add	r6, r2
 8002b04:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002b06:	9623      	str	r6, [sp, #140]	; 0x8c
 8002b08:	3201      	adds	r2, #1
 8002b0a:	2a07      	cmp	r2, #7
 8002b0c:	f103 0308 	add.w	r3, r3, #8
 8002b10:	9222      	str	r2, [sp, #136]	; 0x88
 8002b12:	dd08      	ble.n	8002b26 <_svfprintf_r+0xb7a>
 8002b14:	aa21      	add	r2, sp, #132	; 0x84
 8002b16:	4649      	mov	r1, r9
 8002b18:	4650      	mov	r0, sl
 8002b1a:	f001 fda3 	bl	8004664 <__ssprint_r>
 8002b1e:	2800      	cmp	r0, #0
 8002b20:	f040 81a1 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002b24:	ab2e      	add	r3, sp, #184	; 0xb8
 8002b26:	9a07      	ldr	r2, [sp, #28]
 8002b28:	9907      	ldr	r1, [sp, #28]
 8002b2a:	605a      	str	r2, [r3, #4]
 8002b2c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002b2e:	f8c3 8000 	str.w	r8, [r3]
 8002b32:	440a      	add	r2, r1
 8002b34:	9223      	str	r2, [sp, #140]	; 0x8c
 8002b36:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002b38:	3201      	adds	r2, #1
 8002b3a:	2a07      	cmp	r2, #7
 8002b3c:	9222      	str	r2, [sp, #136]	; 0x88
 8002b3e:	f73f ad59 	bgt.w	80025f4 <_svfprintf_r+0x648>
 8002b42:	f103 0408 	add.w	r4, r3, #8
 8002b46:	e55e      	b.n	8002606 <_svfprintf_r+0x65a>
 8002b48:	aa21      	add	r2, sp, #132	; 0x84
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	4650      	mov	r0, sl
 8002b4e:	f001 fd89 	bl	8004664 <__ssprint_r>
 8002b52:	2800      	cmp	r0, #0
 8002b54:	f040 8187 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002b58:	ac2e      	add	r4, sp, #184	; 0xb8
 8002b5a:	e7b1      	b.n	8002ac0 <_svfprintf_r+0xb14>
 8002b5c:	aa21      	add	r2, sp, #132	; 0x84
 8002b5e:	4649      	mov	r1, r9
 8002b60:	4650      	mov	r0, sl
 8002b62:	f001 fd7f 	bl	8004664 <__ssprint_r>
 8002b66:	2800      	cmp	r0, #0
 8002b68:	f040 817d 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002b6c:	ab2e      	add	r3, sp, #184	; 0xb8
 8002b6e:	e7bd      	b.n	8002aec <_svfprintf_r+0xb40>
 8002b70:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8002b72:	605c      	str	r4, [r3, #4]
 8002b74:	3210      	adds	r2, #16
 8002b76:	9223      	str	r2, [sp, #140]	; 0x8c
 8002b78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8002b7a:	3201      	adds	r2, #1
 8002b7c:	2a07      	cmp	r2, #7
 8002b7e:	9222      	str	r2, [sp, #136]	; 0x88
 8002b80:	dc02      	bgt.n	8002b88 <_svfprintf_r+0xbdc>
 8002b82:	3308      	adds	r3, #8
 8002b84:	3e10      	subs	r6, #16
 8002b86:	e7b7      	b.n	8002af8 <_svfprintf_r+0xb4c>
 8002b88:	aa21      	add	r2, sp, #132	; 0x84
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	4650      	mov	r0, sl
 8002b8e:	f001 fd69 	bl	8004664 <__ssprint_r>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	f040 8167 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002b98:	ab2e      	add	r3, sp, #184	; 0xb8
 8002b9a:	e7f3      	b.n	8002b84 <_svfprintf_r+0xbd8>
 8002b9c:	9b07      	ldr	r3, [sp, #28]
 8002b9e:	42bb      	cmp	r3, r7
 8002ba0:	bfa8      	it	ge
 8002ba2:	463b      	movge	r3, r7
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	461e      	mov	r6, r3
 8002ba8:	dd0b      	ble.n	8002bc2 <_svfprintf_r+0xc16>
 8002baa:	6063      	str	r3, [r4, #4]
 8002bac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002bae:	f8c4 8000 	str.w	r8, [r4]
 8002bb2:	4433      	add	r3, r6
 8002bb4:	9323      	str	r3, [sp, #140]	; 0x8c
 8002bb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002bb8:	3301      	adds	r3, #1
 8002bba:	2b07      	cmp	r3, #7
 8002bbc:	9322      	str	r3, [sp, #136]	; 0x88
 8002bbe:	dc5f      	bgt.n	8002c80 <_svfprintf_r+0xcd4>
 8002bc0:	3408      	adds	r4, #8
 8002bc2:	2e00      	cmp	r6, #0
 8002bc4:	bfb4      	ite	lt
 8002bc6:	463e      	movlt	r6, r7
 8002bc8:	1bbe      	subge	r6, r7, r6
 8002bca:	2e00      	cmp	r6, #0
 8002bcc:	dd0f      	ble.n	8002bee <_svfprintf_r+0xc42>
 8002bce:	f8df b148 	ldr.w	fp, [pc, #328]	; 8002d18 <_svfprintf_r+0xd6c>
 8002bd2:	2e10      	cmp	r6, #16
 8002bd4:	f8c4 b000 	str.w	fp, [r4]
 8002bd8:	dc5c      	bgt.n	8002c94 <_svfprintf_r+0xce8>
 8002bda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002bdc:	6066      	str	r6, [r4, #4]
 8002bde:	441e      	add	r6, r3
 8002be0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002be2:	9623      	str	r6, [sp, #140]	; 0x8c
 8002be4:	3301      	adds	r3, #1
 8002be6:	2b07      	cmp	r3, #7
 8002be8:	9322      	str	r3, [sp, #136]	; 0x88
 8002bea:	dc6a      	bgt.n	8002cc2 <_svfprintf_r+0xd16>
 8002bec:	3408      	adds	r4, #8
 8002bee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002bf0:	9a07      	ldr	r2, [sp, #28]
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	db01      	blt.n	8002bfa <_svfprintf_r+0xc4e>
 8002bf6:	07e9      	lsls	r1, r5, #31
 8002bf8:	d50d      	bpl.n	8002c16 <_svfprintf_r+0xc6a>
 8002bfa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002bfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002bfe:	6023      	str	r3, [r4, #0]
 8002c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c02:	6063      	str	r3, [r4, #4]
 8002c04:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c06:	4413      	add	r3, r2
 8002c08:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	2b07      	cmp	r3, #7
 8002c10:	9322      	str	r3, [sp, #136]	; 0x88
 8002c12:	dc60      	bgt.n	8002cd6 <_svfprintf_r+0xd2a>
 8002c14:	3408      	adds	r4, #8
 8002c16:	9b07      	ldr	r3, [sp, #28]
 8002c18:	9a07      	ldr	r2, [sp, #28]
 8002c1a:	1bde      	subs	r6, r3, r7
 8002c1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	429e      	cmp	r6, r3
 8002c22:	bfa8      	it	ge
 8002c24:	461e      	movge	r6, r3
 8002c26:	2e00      	cmp	r6, #0
 8002c28:	dd0b      	ble.n	8002c42 <_svfprintf_r+0xc96>
 8002c2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c2c:	4447      	add	r7, r8
 8002c2e:	4433      	add	r3, r6
 8002c30:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c34:	6027      	str	r7, [r4, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	6066      	str	r6, [r4, #4]
 8002c3c:	9322      	str	r3, [sp, #136]	; 0x88
 8002c3e:	dc54      	bgt.n	8002cea <_svfprintf_r+0xd3e>
 8002c40:	3408      	adds	r4, #8
 8002c42:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8002c44:	9a07      	ldr	r2, [sp, #28]
 8002c46:	2e00      	cmp	r6, #0
 8002c48:	eba2 0303 	sub.w	r3, r2, r3
 8002c4c:	bfb4      	ite	lt
 8002c4e:	461e      	movlt	r6, r3
 8002c50:	1b9e      	subge	r6, r3, r6
 8002c52:	2e00      	cmp	r6, #0
 8002c54:	f77f acd7 	ble.w	8002606 <_svfprintf_r+0x65a>
 8002c58:	f04f 0810 	mov.w	r8, #16
 8002c5c:	4f2e      	ldr	r7, [pc, #184]	; (8002d18 <_svfprintf_r+0xd6c>)
 8002c5e:	2e10      	cmp	r6, #16
 8002c60:	6027      	str	r7, [r4, #0]
 8002c62:	f77f aee7 	ble.w	8002a34 <_svfprintf_r+0xa88>
 8002c66:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c68:	f8c4 8004 	str.w	r8, [r4, #4]
 8002c6c:	3310      	adds	r3, #16
 8002c6e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002c72:	3301      	adds	r3, #1
 8002c74:	2b07      	cmp	r3, #7
 8002c76:	9322      	str	r3, [sp, #136]	; 0x88
 8002c78:	dc41      	bgt.n	8002cfe <_svfprintf_r+0xd52>
 8002c7a:	3408      	adds	r4, #8
 8002c7c:	3e10      	subs	r6, #16
 8002c7e:	e7ee      	b.n	8002c5e <_svfprintf_r+0xcb2>
 8002c80:	aa21      	add	r2, sp, #132	; 0x84
 8002c82:	4649      	mov	r1, r9
 8002c84:	4650      	mov	r0, sl
 8002c86:	f001 fced 	bl	8004664 <__ssprint_r>
 8002c8a:	2800      	cmp	r0, #0
 8002c8c:	f040 80eb 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002c90:	ac2e      	add	r4, sp, #184	; 0xb8
 8002c92:	e796      	b.n	8002bc2 <_svfprintf_r+0xc16>
 8002c94:	2310      	movs	r3, #16
 8002c96:	6063      	str	r3, [r4, #4]
 8002c98:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	2b07      	cmp	r3, #7
 8002ca4:	9322      	str	r3, [sp, #136]	; 0x88
 8002ca6:	dc02      	bgt.n	8002cae <_svfprintf_r+0xd02>
 8002ca8:	3408      	adds	r4, #8
 8002caa:	3e10      	subs	r6, #16
 8002cac:	e791      	b.n	8002bd2 <_svfprintf_r+0xc26>
 8002cae:	aa21      	add	r2, sp, #132	; 0x84
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	4650      	mov	r0, sl
 8002cb4:	f001 fcd6 	bl	8004664 <__ssprint_r>
 8002cb8:	2800      	cmp	r0, #0
 8002cba:	f040 80d4 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002cbe:	ac2e      	add	r4, sp, #184	; 0xb8
 8002cc0:	e7f3      	b.n	8002caa <_svfprintf_r+0xcfe>
 8002cc2:	aa21      	add	r2, sp, #132	; 0x84
 8002cc4:	4649      	mov	r1, r9
 8002cc6:	4650      	mov	r0, sl
 8002cc8:	f001 fccc 	bl	8004664 <__ssprint_r>
 8002ccc:	2800      	cmp	r0, #0
 8002cce:	f040 80ca 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002cd2:	ac2e      	add	r4, sp, #184	; 0xb8
 8002cd4:	e78b      	b.n	8002bee <_svfprintf_r+0xc42>
 8002cd6:	aa21      	add	r2, sp, #132	; 0x84
 8002cd8:	4649      	mov	r1, r9
 8002cda:	4650      	mov	r0, sl
 8002cdc:	f001 fcc2 	bl	8004664 <__ssprint_r>
 8002ce0:	2800      	cmp	r0, #0
 8002ce2:	f040 80c0 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002ce6:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ce8:	e795      	b.n	8002c16 <_svfprintf_r+0xc6a>
 8002cea:	aa21      	add	r2, sp, #132	; 0x84
 8002cec:	4649      	mov	r1, r9
 8002cee:	4650      	mov	r0, sl
 8002cf0:	f001 fcb8 	bl	8004664 <__ssprint_r>
 8002cf4:	2800      	cmp	r0, #0
 8002cf6:	f040 80b6 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002cfa:	ac2e      	add	r4, sp, #184	; 0xb8
 8002cfc:	e7a1      	b.n	8002c42 <_svfprintf_r+0xc96>
 8002cfe:	aa21      	add	r2, sp, #132	; 0x84
 8002d00:	4649      	mov	r1, r9
 8002d02:	4650      	mov	r0, sl
 8002d04:	f001 fcae 	bl	8004664 <__ssprint_r>
 8002d08:	2800      	cmp	r0, #0
 8002d0a:	f040 80ac 	bne.w	8002e66 <_svfprintf_r+0xeba>
 8002d0e:	ac2e      	add	r4, sp, #184	; 0xb8
 8002d10:	e7b4      	b.n	8002c7c <_svfprintf_r+0xcd0>
 8002d12:	bf00      	nop
 8002d14:	08004dea 	.word	0x08004dea
 8002d18:	08004dfc 	.word	0x08004dfc
 8002d1c:	9b07      	ldr	r3, [sp, #28]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	dc01      	bgt.n	8002d26 <_svfprintf_r+0xd7a>
 8002d22:	07ea      	lsls	r2, r5, #31
 8002d24:	d576      	bpl.n	8002e14 <_svfprintf_r+0xe68>
 8002d26:	2301      	movs	r3, #1
 8002d28:	6063      	str	r3, [r4, #4]
 8002d2a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d2c:	f8c4 8000 	str.w	r8, [r4]
 8002d30:	3301      	adds	r3, #1
 8002d32:	9323      	str	r3, [sp, #140]	; 0x8c
 8002d34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d36:	3301      	adds	r3, #1
 8002d38:	2b07      	cmp	r3, #7
 8002d3a:	9322      	str	r3, [sp, #136]	; 0x88
 8002d3c:	dc36      	bgt.n	8002dac <_svfprintf_r+0xe00>
 8002d3e:	3408      	adds	r4, #8
 8002d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002d42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d48:	6063      	str	r3, [r4, #4]
 8002d4a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d4c:	4413      	add	r3, r2
 8002d4e:	9323      	str	r3, [sp, #140]	; 0x8c
 8002d50:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d52:	3301      	adds	r3, #1
 8002d54:	2b07      	cmp	r3, #7
 8002d56:	9322      	str	r3, [sp, #136]	; 0x88
 8002d58:	dc31      	bgt.n	8002dbe <_svfprintf_r+0xe12>
 8002d5a:	3408      	adds	r4, #8
 8002d5c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002d5e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002d60:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002d62:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002d64:	f7fd fe1c 	bl	80009a0 <__aeabi_dcmpeq>
 8002d68:	9b07      	ldr	r3, [sp, #28]
 8002d6a:	1e5e      	subs	r6, r3, #1
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d12f      	bne.n	8002dd0 <_svfprintf_r+0xe24>
 8002d70:	f108 0301 	add.w	r3, r8, #1
 8002d74:	e884 0048 	stmia.w	r4, {r3, r6}
 8002d78:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002d7a:	9a07      	ldr	r2, [sp, #28]
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	4413      	add	r3, r2
 8002d80:	9323      	str	r3, [sp, #140]	; 0x8c
 8002d82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002d84:	3301      	adds	r3, #1
 8002d86:	2b07      	cmp	r3, #7
 8002d88:	9322      	str	r3, [sp, #136]	; 0x88
 8002d8a:	dd4a      	ble.n	8002e22 <_svfprintf_r+0xe76>
 8002d8c:	aa21      	add	r2, sp, #132	; 0x84
 8002d8e:	4649      	mov	r1, r9
 8002d90:	4650      	mov	r0, sl
 8002d92:	f001 fc67 	bl	8004664 <__ssprint_r>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d165      	bne.n	8002e66 <_svfprintf_r+0xeba>
 8002d9a:	ac2e      	add	r4, sp, #184	; 0xb8
 8002d9c:	ab1d      	add	r3, sp, #116	; 0x74
 8002d9e:	6023      	str	r3, [r4, #0]
 8002da0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8002da2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8002da4:	6063      	str	r3, [r4, #4]
 8002da6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002da8:	4413      	add	r3, r2
 8002daa:	e41c      	b.n	80025e6 <_svfprintf_r+0x63a>
 8002dac:	aa21      	add	r2, sp, #132	; 0x84
 8002dae:	4649      	mov	r1, r9
 8002db0:	4650      	mov	r0, sl
 8002db2:	f001 fc57 	bl	8004664 <__ssprint_r>
 8002db6:	2800      	cmp	r0, #0
 8002db8:	d155      	bne.n	8002e66 <_svfprintf_r+0xeba>
 8002dba:	ac2e      	add	r4, sp, #184	; 0xb8
 8002dbc:	e7c0      	b.n	8002d40 <_svfprintf_r+0xd94>
 8002dbe:	aa21      	add	r2, sp, #132	; 0x84
 8002dc0:	4649      	mov	r1, r9
 8002dc2:	4650      	mov	r0, sl
 8002dc4:	f001 fc4e 	bl	8004664 <__ssprint_r>
 8002dc8:	2800      	cmp	r0, #0
 8002dca:	d14c      	bne.n	8002e66 <_svfprintf_r+0xeba>
 8002dcc:	ac2e      	add	r4, sp, #184	; 0xb8
 8002dce:	e7c5      	b.n	8002d5c <_svfprintf_r+0xdb0>
 8002dd0:	2e00      	cmp	r6, #0
 8002dd2:	dde3      	ble.n	8002d9c <_svfprintf_r+0xdf0>
 8002dd4:	f04f 0810 	mov.w	r8, #16
 8002dd8:	4f58      	ldr	r7, [pc, #352]	; (8002f3c <_svfprintf_r+0xf90>)
 8002dda:	2e10      	cmp	r6, #16
 8002ddc:	6027      	str	r7, [r4, #0]
 8002dde:	dc04      	bgt.n	8002dea <_svfprintf_r+0xe3e>
 8002de0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002de2:	6066      	str	r6, [r4, #4]
 8002de4:	441e      	add	r6, r3
 8002de6:	9623      	str	r6, [sp, #140]	; 0x8c
 8002de8:	e7cb      	b.n	8002d82 <_svfprintf_r+0xdd6>
 8002dea:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002dec:	f8c4 8004 	str.w	r8, [r4, #4]
 8002df0:	3310      	adds	r3, #16
 8002df2:	9323      	str	r3, [sp, #140]	; 0x8c
 8002df4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002df6:	3301      	adds	r3, #1
 8002df8:	2b07      	cmp	r3, #7
 8002dfa:	9322      	str	r3, [sp, #136]	; 0x88
 8002dfc:	dc02      	bgt.n	8002e04 <_svfprintf_r+0xe58>
 8002dfe:	3408      	adds	r4, #8
 8002e00:	3e10      	subs	r6, #16
 8002e02:	e7ea      	b.n	8002dda <_svfprintf_r+0xe2e>
 8002e04:	aa21      	add	r2, sp, #132	; 0x84
 8002e06:	4649      	mov	r1, r9
 8002e08:	4650      	mov	r0, sl
 8002e0a:	f001 fc2b 	bl	8004664 <__ssprint_r>
 8002e0e:	bb50      	cbnz	r0, 8002e66 <_svfprintf_r+0xeba>
 8002e10:	ac2e      	add	r4, sp, #184	; 0xb8
 8002e12:	e7f5      	b.n	8002e00 <_svfprintf_r+0xe54>
 8002e14:	2301      	movs	r3, #1
 8002e16:	6063      	str	r3, [r4, #4]
 8002e18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002e1a:	f8c4 8000 	str.w	r8, [r4]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	e7ae      	b.n	8002d80 <_svfprintf_r+0xdd4>
 8002e22:	3408      	adds	r4, #8
 8002e24:	e7ba      	b.n	8002d9c <_svfprintf_r+0xdf0>
 8002e26:	3408      	adds	r4, #8
 8002e28:	f7ff bbed 	b.w	8002606 <_svfprintf_r+0x65a>
 8002e2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002e2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002e30:	1a9d      	subs	r5, r3, r2
 8002e32:	2d00      	cmp	r5, #0
 8002e34:	f77f abea 	ble.w	800260c <_svfprintf_r+0x660>
 8002e38:	2610      	movs	r6, #16
 8002e3a:	4b41      	ldr	r3, [pc, #260]	; (8002f40 <_svfprintf_r+0xf94>)
 8002e3c:	2d10      	cmp	r5, #16
 8002e3e:	6023      	str	r3, [r4, #0]
 8002e40:	dc1b      	bgt.n	8002e7a <_svfprintf_r+0xece>
 8002e42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002e44:	6065      	str	r5, [r4, #4]
 8002e46:	441d      	add	r5, r3
 8002e48:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e4a:	9523      	str	r5, [sp, #140]	; 0x8c
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	2b07      	cmp	r3, #7
 8002e50:	9322      	str	r3, [sp, #136]	; 0x88
 8002e52:	f77f abdb 	ble.w	800260c <_svfprintf_r+0x660>
 8002e56:	aa21      	add	r2, sp, #132	; 0x84
 8002e58:	4649      	mov	r1, r9
 8002e5a:	4650      	mov	r0, sl
 8002e5c:	f001 fc02 	bl	8004664 <__ssprint_r>
 8002e60:	2800      	cmp	r0, #0
 8002e62:	f43f abd3 	beq.w	800260c <_svfprintf_r+0x660>
 8002e66:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8002e6a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002e70:	bf18      	it	ne
 8002e72:	f04f 33ff 	movne.w	r3, #4294967295
 8002e76:	f7ff b8bd 	b.w	8001ff4 <_svfprintf_r+0x48>
 8002e7a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002e7c:	6066      	str	r6, [r4, #4]
 8002e7e:	3310      	adds	r3, #16
 8002e80:	9323      	str	r3, [sp, #140]	; 0x8c
 8002e82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8002e84:	3301      	adds	r3, #1
 8002e86:	2b07      	cmp	r3, #7
 8002e88:	9322      	str	r3, [sp, #136]	; 0x88
 8002e8a:	dc02      	bgt.n	8002e92 <_svfprintf_r+0xee6>
 8002e8c:	3408      	adds	r4, #8
 8002e8e:	3d10      	subs	r5, #16
 8002e90:	e7d3      	b.n	8002e3a <_svfprintf_r+0xe8e>
 8002e92:	aa21      	add	r2, sp, #132	; 0x84
 8002e94:	4649      	mov	r1, r9
 8002e96:	4650      	mov	r0, sl
 8002e98:	f001 fbe4 	bl	8004664 <__ssprint_r>
 8002e9c:	2800      	cmp	r0, #0
 8002e9e:	d1e2      	bne.n	8002e66 <_svfprintf_r+0xeba>
 8002ea0:	ac2e      	add	r4, sp, #184	; 0xb8
 8002ea2:	e7f4      	b.n	8002e8e <_svfprintf_r+0xee2>
 8002ea4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0dd      	beq.n	8002e66 <_svfprintf_r+0xeba>
 8002eaa:	aa21      	add	r2, sp, #132	; 0x84
 8002eac:	4649      	mov	r1, r9
 8002eae:	4650      	mov	r0, sl
 8002eb0:	f001 fbd8 	bl	8004664 <__ssprint_r>
 8002eb4:	e7d7      	b.n	8002e66 <_svfprintf_r+0xeba>
 8002eb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002eba:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002ebc:	990e      	ldr	r1, [sp, #56]	; 0x38
 8002ebe:	f7fd fda1 	bl	8000a04 <__aeabi_dcmpun>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	f43f aa3d 	beq.w	8002342 <_svfprintf_r+0x396>
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	; (8002f44 <_svfprintf_r+0xf98>)
 8002eca:	4a1f      	ldr	r2, [pc, #124]	; (8002f48 <_svfprintf_r+0xf9c>)
 8002ecc:	f7ff ba2d 	b.w	800232a <_svfprintf_r+0x37e>
 8002ed0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8002ed2:	eba3 0308 	sub.w	r3, r3, r8
 8002ed6:	9307      	str	r3, [sp, #28]
 8002ed8:	f7ff baaf 	b.w	800243a <_svfprintf_r+0x48e>
 8002edc:	ea56 0207 	orrs.w	r2, r6, r7
 8002ee0:	950f      	str	r5, [sp, #60]	; 0x3c
 8002ee2:	f43f ac2b 	beq.w	800273c <_svfprintf_r+0x790>
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	f43f ac9d 	beq.w	8002826 <_svfprintf_r+0x87a>
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	f43f acbd 	beq.w	800286c <_svfprintf_r+0x8c0>
 8002ef2:	ab2e      	add	r3, sp, #184	; 0xb8
 8002ef4:	08f1      	lsrs	r1, r6, #3
 8002ef6:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8002efa:	08f8      	lsrs	r0, r7, #3
 8002efc:	f006 0207 	and.w	r2, r6, #7
 8002f00:	4607      	mov	r7, r0
 8002f02:	460e      	mov	r6, r1
 8002f04:	3230      	adds	r2, #48	; 0x30
 8002f06:	ea56 0107 	orrs.w	r1, r6, r7
 8002f0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8002f0e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8002f12:	f47f ac86 	bne.w	8002822 <_svfprintf_r+0x876>
 8002f16:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8002f18:	07c9      	lsls	r1, r1, #31
 8002f1a:	d506      	bpl.n	8002f2a <_svfprintf_r+0xf7e>
 8002f1c:	2a30      	cmp	r2, #48	; 0x30
 8002f1e:	d004      	beq.n	8002f2a <_svfprintf_r+0xf7e>
 8002f20:	2230      	movs	r2, #48	; 0x30
 8002f22:	f808 2c01 	strb.w	r2, [r8, #-1]
 8002f26:	f1a3 0802 	sub.w	r8, r3, #2
 8002f2a:	ab2e      	add	r3, sp, #184	; 0xb8
 8002f2c:	465e      	mov	r6, fp
 8002f2e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002f30:	eba3 0b08 	sub.w	fp, r3, r8
 8002f34:	2700      	movs	r7, #0
 8002f36:	f7ff bace 	b.w	80024d6 <_svfprintf_r+0x52a>
 8002f3a:	bf00      	nop
 8002f3c:	08004dfc 	.word	0x08004dfc
 8002f40:	08004dec 	.word	0x08004dec
 8002f44:	08004dc0 	.word	0x08004dc0
 8002f48:	08004dc4 	.word	0x08004dc4

08002f4c <quorem>:
 8002f4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f50:	6903      	ldr	r3, [r0, #16]
 8002f52:	690c      	ldr	r4, [r1, #16]
 8002f54:	4680      	mov	r8, r0
 8002f56:	429c      	cmp	r4, r3
 8002f58:	f300 8082 	bgt.w	8003060 <quorem+0x114>
 8002f5c:	3c01      	subs	r4, #1
 8002f5e:	f101 0714 	add.w	r7, r1, #20
 8002f62:	f100 0614 	add.w	r6, r0, #20
 8002f66:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8002f6a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002f6e:	3501      	adds	r5, #1
 8002f70:	fbb0 f5f5 	udiv	r5, r0, r5
 8002f74:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8002f78:	eb06 030e 	add.w	r3, r6, lr
 8002f7c:	eb07 090e 	add.w	r9, r7, lr
 8002f80:	9301      	str	r3, [sp, #4]
 8002f82:	b38d      	cbz	r5, 8002fe8 <quorem+0x9c>
 8002f84:	f04f 0a00 	mov.w	sl, #0
 8002f88:	4638      	mov	r0, r7
 8002f8a:	46b4      	mov	ip, r6
 8002f8c:	46d3      	mov	fp, sl
 8002f8e:	f850 2b04 	ldr.w	r2, [r0], #4
 8002f92:	b293      	uxth	r3, r2
 8002f94:	fb05 a303 	mla	r3, r5, r3, sl
 8002f98:	0c12      	lsrs	r2, r2, #16
 8002f9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8002f9e:	fb05 a202 	mla	r2, r5, r2, sl
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	ebab 0303 	sub.w	r3, fp, r3
 8002fa8:	f8bc b000 	ldrh.w	fp, [ip]
 8002fac:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8002fb0:	445b      	add	r3, fp
 8002fb2:	fa1f fb82 	uxth.w	fp, r2
 8002fb6:	f8dc 2000 	ldr.w	r2, [ip]
 8002fba:	4581      	cmp	r9, r0
 8002fbc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8002fc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002fca:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8002fce:	f84c 3b04 	str.w	r3, [ip], #4
 8002fd2:	d2dc      	bcs.n	8002f8e <quorem+0x42>
 8002fd4:	f856 300e 	ldr.w	r3, [r6, lr]
 8002fd8:	b933      	cbnz	r3, 8002fe8 <quorem+0x9c>
 8002fda:	9b01      	ldr	r3, [sp, #4]
 8002fdc:	3b04      	subs	r3, #4
 8002fde:	429e      	cmp	r6, r3
 8002fe0:	461a      	mov	r2, r3
 8002fe2:	d331      	bcc.n	8003048 <quorem+0xfc>
 8002fe4:	f8c8 4010 	str.w	r4, [r8, #16]
 8002fe8:	4640      	mov	r0, r8
 8002fea:	f001 fa62 	bl	80044b2 <__mcmp>
 8002fee:	2800      	cmp	r0, #0
 8002ff0:	db26      	blt.n	8003040 <quorem+0xf4>
 8002ff2:	4630      	mov	r0, r6
 8002ff4:	f04f 0e00 	mov.w	lr, #0
 8002ff8:	3501      	adds	r5, #1
 8002ffa:	f857 1b04 	ldr.w	r1, [r7], #4
 8002ffe:	f8d0 c000 	ldr.w	ip, [r0]
 8003002:	b28b      	uxth	r3, r1
 8003004:	ebae 0303 	sub.w	r3, lr, r3
 8003008:	fa1f f28c 	uxth.w	r2, ip
 800300c:	4413      	add	r3, r2
 800300e:	0c0a      	lsrs	r2, r1, #16
 8003010:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003014:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003018:	b29b      	uxth	r3, r3
 800301a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800301e:	45b9      	cmp	r9, r7
 8003020:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8003024:	f840 3b04 	str.w	r3, [r0], #4
 8003028:	d2e7      	bcs.n	8002ffa <quorem+0xae>
 800302a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800302e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8003032:	b92a      	cbnz	r2, 8003040 <quorem+0xf4>
 8003034:	3b04      	subs	r3, #4
 8003036:	429e      	cmp	r6, r3
 8003038:	461a      	mov	r2, r3
 800303a:	d30b      	bcc.n	8003054 <quorem+0x108>
 800303c:	f8c8 4010 	str.w	r4, [r8, #16]
 8003040:	4628      	mov	r0, r5
 8003042:	b003      	add	sp, #12
 8003044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003048:	6812      	ldr	r2, [r2, #0]
 800304a:	3b04      	subs	r3, #4
 800304c:	2a00      	cmp	r2, #0
 800304e:	d1c9      	bne.n	8002fe4 <quorem+0x98>
 8003050:	3c01      	subs	r4, #1
 8003052:	e7c4      	b.n	8002fde <quorem+0x92>
 8003054:	6812      	ldr	r2, [r2, #0]
 8003056:	3b04      	subs	r3, #4
 8003058:	2a00      	cmp	r2, #0
 800305a:	d1ef      	bne.n	800303c <quorem+0xf0>
 800305c:	3c01      	subs	r4, #1
 800305e:	e7ea      	b.n	8003036 <quorem+0xea>
 8003060:	2000      	movs	r0, #0
 8003062:	e7ee      	b.n	8003042 <quorem+0xf6>
 8003064:	0000      	movs	r0, r0
	...

08003068 <_dtoa_r>:
 8003068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800306c:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800306e:	b095      	sub	sp, #84	; 0x54
 8003070:	4604      	mov	r4, r0
 8003072:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8003074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003078:	b93e      	cbnz	r6, 800308a <_dtoa_r+0x22>
 800307a:	2010      	movs	r0, #16
 800307c:	f000 fdd6 	bl	8003c2c <malloc>
 8003080:	6260      	str	r0, [r4, #36]	; 0x24
 8003082:	6046      	str	r6, [r0, #4]
 8003084:	6086      	str	r6, [r0, #8]
 8003086:	6006      	str	r6, [r0, #0]
 8003088:	60c6      	str	r6, [r0, #12]
 800308a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	b151      	cbz	r1, 80030a6 <_dtoa_r+0x3e>
 8003090:	685a      	ldr	r2, [r3, #4]
 8003092:	2301      	movs	r3, #1
 8003094:	4093      	lsls	r3, r2
 8003096:	604a      	str	r2, [r1, #4]
 8003098:	608b      	str	r3, [r1, #8]
 800309a:	4620      	mov	r0, r4
 800309c:	f001 f834 	bl	8004108 <_Bfree>
 80030a0:	2200      	movs	r2, #0
 80030a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030a4:	601a      	str	r2, [r3, #0]
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfb7      	itett	lt
 80030ac:	2301      	movlt	r3, #1
 80030ae:	2300      	movge	r3, #0
 80030b0:	602b      	strlt	r3, [r5, #0]
 80030b2:	9b03      	ldrlt	r3, [sp, #12]
 80030b4:	bfae      	itee	ge
 80030b6:	602b      	strge	r3, [r5, #0]
 80030b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80030bc:	9303      	strlt	r3, [sp, #12]
 80030be:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80030c2:	4bab      	ldr	r3, [pc, #684]	; (8003370 <_dtoa_r+0x308>)
 80030c4:	ea33 0309 	bics.w	r3, r3, r9
 80030c8:	d11b      	bne.n	8003102 <_dtoa_r+0x9a>
 80030ca:	f242 730f 	movw	r3, #9999	; 0x270f
 80030ce:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	9b02      	ldr	r3, [sp, #8]
 80030d4:	b923      	cbnz	r3, 80030e0 <_dtoa_r+0x78>
 80030d6:	f3c9 0013 	ubfx	r0, r9, #0, #20
 80030da:	2800      	cmp	r0, #0
 80030dc:	f000 8583 	beq.w	8003be6 <_dtoa_r+0xb7e>
 80030e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80030e2:	b953      	cbnz	r3, 80030fa <_dtoa_r+0x92>
 80030e4:	4ba3      	ldr	r3, [pc, #652]	; (8003374 <_dtoa_r+0x30c>)
 80030e6:	e021      	b.n	800312c <_dtoa_r+0xc4>
 80030e8:	4ba3      	ldr	r3, [pc, #652]	; (8003378 <_dtoa_r+0x310>)
 80030ea:	9306      	str	r3, [sp, #24]
 80030ec:	3308      	adds	r3, #8
 80030ee:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	9806      	ldr	r0, [sp, #24]
 80030f4:	b015      	add	sp, #84	; 0x54
 80030f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80030fa:	4b9e      	ldr	r3, [pc, #632]	; (8003374 <_dtoa_r+0x30c>)
 80030fc:	9306      	str	r3, [sp, #24]
 80030fe:	3303      	adds	r3, #3
 8003100:	e7f5      	b.n	80030ee <_dtoa_r+0x86>
 8003102:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003106:	2200      	movs	r2, #0
 8003108:	2300      	movs	r3, #0
 800310a:	4630      	mov	r0, r6
 800310c:	4639      	mov	r1, r7
 800310e:	f7fd fc47 	bl	80009a0 <__aeabi_dcmpeq>
 8003112:	4680      	mov	r8, r0
 8003114:	b160      	cbz	r0, 8003130 <_dtoa_r+0xc8>
 8003116:	2301      	movs	r3, #1
 8003118:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800311a:	6013      	str	r3, [r2, #0]
 800311c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 855e 	beq.w	8003be0 <_dtoa_r+0xb78>
 8003124:	4b95      	ldr	r3, [pc, #596]	; (800337c <_dtoa_r+0x314>)
 8003126:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	3b01      	subs	r3, #1
 800312c:	9306      	str	r3, [sp, #24]
 800312e:	e7e0      	b.n	80030f2 <_dtoa_r+0x8a>
 8003130:	ab12      	add	r3, sp, #72	; 0x48
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	ab13      	add	r3, sp, #76	; 0x4c
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	4632      	mov	r2, r6
 800313a:	463b      	mov	r3, r7
 800313c:	4620      	mov	r0, r4
 800313e:	f001 fa31 	bl	80045a4 <__d2b>
 8003142:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8003146:	4682      	mov	sl, r0
 8003148:	2d00      	cmp	r5, #0
 800314a:	d07d      	beq.n	8003248 <_dtoa_r+0x1e0>
 800314c:	4630      	mov	r0, r6
 800314e:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8003152:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8003156:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800315a:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800315e:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8003162:	2200      	movs	r2, #0
 8003164:	4b86      	ldr	r3, [pc, #536]	; (8003380 <_dtoa_r+0x318>)
 8003166:	f7fc ffff 	bl	8000168 <__aeabi_dsub>
 800316a:	a37b      	add	r3, pc, #492	; (adr r3, 8003358 <_dtoa_r+0x2f0>)
 800316c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003170:	f7fd f9ae 	bl	80004d0 <__aeabi_dmul>
 8003174:	a37a      	add	r3, pc, #488	; (adr r3, 8003360 <_dtoa_r+0x2f8>)
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f7fc fff7 	bl	800016c <__adddf3>
 800317e:	4606      	mov	r6, r0
 8003180:	4628      	mov	r0, r5
 8003182:	460f      	mov	r7, r1
 8003184:	f7fd f93e 	bl	8000404 <__aeabi_i2d>
 8003188:	a377      	add	r3, pc, #476	; (adr r3, 8003368 <_dtoa_r+0x300>)
 800318a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318e:	f7fd f99f 	bl	80004d0 <__aeabi_dmul>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4630      	mov	r0, r6
 8003198:	4639      	mov	r1, r7
 800319a:	f7fc ffe7 	bl	800016c <__adddf3>
 800319e:	4606      	mov	r6, r0
 80031a0:	460f      	mov	r7, r1
 80031a2:	f7fd fc45 	bl	8000a30 <__aeabi_d2iz>
 80031a6:	2200      	movs	r2, #0
 80031a8:	4683      	mov	fp, r0
 80031aa:	2300      	movs	r3, #0
 80031ac:	4630      	mov	r0, r6
 80031ae:	4639      	mov	r1, r7
 80031b0:	f7fd fc00 	bl	80009b4 <__aeabi_dcmplt>
 80031b4:	b158      	cbz	r0, 80031ce <_dtoa_r+0x166>
 80031b6:	4658      	mov	r0, fp
 80031b8:	f7fd f924 	bl	8000404 <__aeabi_i2d>
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4630      	mov	r0, r6
 80031c2:	4639      	mov	r1, r7
 80031c4:	f7fd fbec 	bl	80009a0 <__aeabi_dcmpeq>
 80031c8:	b908      	cbnz	r0, 80031ce <_dtoa_r+0x166>
 80031ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80031ce:	f1bb 0f16 	cmp.w	fp, #22
 80031d2:	d858      	bhi.n	8003286 <_dtoa_r+0x21e>
 80031d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80031d8:	496a      	ldr	r1, [pc, #424]	; (8003384 <_dtoa_r+0x31c>)
 80031da:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80031de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031e2:	f7fd fc05 	bl	80009f0 <__aeabi_dcmpgt>
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d04f      	beq.n	800328a <_dtoa_r+0x222>
 80031ea:	2300      	movs	r3, #0
 80031ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80031f0:	930d      	str	r3, [sp, #52]	; 0x34
 80031f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80031f4:	1b5d      	subs	r5, r3, r5
 80031f6:	1e6b      	subs	r3, r5, #1
 80031f8:	9307      	str	r3, [sp, #28]
 80031fa:	bf43      	ittte	mi
 80031fc:	2300      	movmi	r3, #0
 80031fe:	f1c5 0801 	rsbmi	r8, r5, #1
 8003202:	9307      	strmi	r3, [sp, #28]
 8003204:	f04f 0800 	movpl.w	r8, #0
 8003208:	f1bb 0f00 	cmp.w	fp, #0
 800320c:	db3f      	blt.n	800328e <_dtoa_r+0x226>
 800320e:	9b07      	ldr	r3, [sp, #28]
 8003210:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8003214:	445b      	add	r3, fp
 8003216:	9307      	str	r3, [sp, #28]
 8003218:	2300      	movs	r3, #0
 800321a:	9308      	str	r3, [sp, #32]
 800321c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800321e:	2b09      	cmp	r3, #9
 8003220:	f200 80b4 	bhi.w	800338c <_dtoa_r+0x324>
 8003224:	2b05      	cmp	r3, #5
 8003226:	bfc4      	itt	gt
 8003228:	3b04      	subgt	r3, #4
 800322a:	931e      	strgt	r3, [sp, #120]	; 0x78
 800322c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800322e:	bfc8      	it	gt
 8003230:	2600      	movgt	r6, #0
 8003232:	f1a3 0302 	sub.w	r3, r3, #2
 8003236:	bfd8      	it	le
 8003238:	2601      	movle	r6, #1
 800323a:	2b03      	cmp	r3, #3
 800323c:	f200 80b2 	bhi.w	80033a4 <_dtoa_r+0x33c>
 8003240:	e8df f003 	tbb	[pc, r3]
 8003244:	782d8684 	.word	0x782d8684
 8003248:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800324a:	9d12      	ldr	r5, [sp, #72]	; 0x48
 800324c:	441d      	add	r5, r3
 800324e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8003252:	2b20      	cmp	r3, #32
 8003254:	dd11      	ble.n	800327a <_dtoa_r+0x212>
 8003256:	9a02      	ldr	r2, [sp, #8]
 8003258:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800325c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8003260:	fa22 f000 	lsr.w	r0, r2, r0
 8003264:	fa09 f303 	lsl.w	r3, r9, r3
 8003268:	4318      	orrs	r0, r3
 800326a:	f7fd f8bb 	bl	80003e4 <__aeabi_ui2d>
 800326e:	2301      	movs	r3, #1
 8003270:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8003274:	3d01      	subs	r5, #1
 8003276:	9310      	str	r3, [sp, #64]	; 0x40
 8003278:	e773      	b.n	8003162 <_dtoa_r+0xfa>
 800327a:	f1c3 0020 	rsb	r0, r3, #32
 800327e:	9b02      	ldr	r3, [sp, #8]
 8003280:	fa03 f000 	lsl.w	r0, r3, r0
 8003284:	e7f1      	b.n	800326a <_dtoa_r+0x202>
 8003286:	2301      	movs	r3, #1
 8003288:	e7b2      	b.n	80031f0 <_dtoa_r+0x188>
 800328a:	900d      	str	r0, [sp, #52]	; 0x34
 800328c:	e7b1      	b.n	80031f2 <_dtoa_r+0x18a>
 800328e:	f1cb 0300 	rsb	r3, fp, #0
 8003292:	9308      	str	r3, [sp, #32]
 8003294:	2300      	movs	r3, #0
 8003296:	eba8 080b 	sub.w	r8, r8, fp
 800329a:	930c      	str	r3, [sp, #48]	; 0x30
 800329c:	e7be      	b.n	800321c <_dtoa_r+0x1b4>
 800329e:	2301      	movs	r3, #1
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
 80032a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f340 8080 	ble.w	80033aa <_dtoa_r+0x342>
 80032aa:	4699      	mov	r9, r3
 80032ac:	9304      	str	r3, [sp, #16]
 80032ae:	2200      	movs	r2, #0
 80032b0:	2104      	movs	r1, #4
 80032b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80032b4:	606a      	str	r2, [r5, #4]
 80032b6:	f101 0214 	add.w	r2, r1, #20
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d97a      	bls.n	80033b4 <_dtoa_r+0x34c>
 80032be:	6869      	ldr	r1, [r5, #4]
 80032c0:	4620      	mov	r0, r4
 80032c2:	f000 feed 	bl	80040a0 <_Balloc>
 80032c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80032c8:	6028      	str	r0, [r5, #0]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f1b9 0f0e 	cmp.w	r9, #14
 80032d0:	9306      	str	r3, [sp, #24]
 80032d2:	f200 80f0 	bhi.w	80034b6 <_dtoa_r+0x44e>
 80032d6:	2e00      	cmp	r6, #0
 80032d8:	f000 80ed 	beq.w	80034b6 <_dtoa_r+0x44e>
 80032dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80032e0:	f1bb 0f00 	cmp.w	fp, #0
 80032e4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80032e8:	dd79      	ble.n	80033de <_dtoa_r+0x376>
 80032ea:	4a26      	ldr	r2, [pc, #152]	; (8003384 <_dtoa_r+0x31c>)
 80032ec:	f00b 030f 	and.w	r3, fp, #15
 80032f0:	ea4f 162b 	mov.w	r6, fp, asr #4
 80032f4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80032f8:	06f0      	lsls	r0, r6, #27
 80032fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003302:	d55c      	bpl.n	80033be <_dtoa_r+0x356>
 8003304:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8003308:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <_dtoa_r+0x320>)
 800330a:	2503      	movs	r5, #3
 800330c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003310:	f7fd fa08 	bl	8000724 <__aeabi_ddiv>
 8003314:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003318:	f006 060f 	and.w	r6, r6, #15
 800331c:	4f1a      	ldr	r7, [pc, #104]	; (8003388 <_dtoa_r+0x320>)
 800331e:	2e00      	cmp	r6, #0
 8003320:	d14f      	bne.n	80033c2 <_dtoa_r+0x35a>
 8003322:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003326:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800332a:	f7fd f9fb 	bl	8000724 <__aeabi_ddiv>
 800332e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003332:	e06e      	b.n	8003412 <_dtoa_r+0x3aa>
 8003334:	2301      	movs	r3, #1
 8003336:	9309      	str	r3, [sp, #36]	; 0x24
 8003338:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800333a:	445b      	add	r3, fp
 800333c:	f103 0901 	add.w	r9, r3, #1
 8003340:	9304      	str	r3, [sp, #16]
 8003342:	464b      	mov	r3, r9
 8003344:	2b01      	cmp	r3, #1
 8003346:	bfb8      	it	lt
 8003348:	2301      	movlt	r3, #1
 800334a:	e7b0      	b.n	80032ae <_dtoa_r+0x246>
 800334c:	2300      	movs	r3, #0
 800334e:	e7a7      	b.n	80032a0 <_dtoa_r+0x238>
 8003350:	2300      	movs	r3, #0
 8003352:	e7f0      	b.n	8003336 <_dtoa_r+0x2ce>
 8003354:	f3af 8000 	nop.w
 8003358:	636f4361 	.word	0x636f4361
 800335c:	3fd287a7 	.word	0x3fd287a7
 8003360:	8b60c8b3 	.word	0x8b60c8b3
 8003364:	3fc68a28 	.word	0x3fc68a28
 8003368:	509f79fb 	.word	0x509f79fb
 800336c:	3fd34413 	.word	0x3fd34413
 8003370:	7ff00000 	.word	0x7ff00000
 8003374:	08004e15 	.word	0x08004e15
 8003378:	08004e0c 	.word	0x08004e0c
 800337c:	08004deb 	.word	0x08004deb
 8003380:	3ff80000 	.word	0x3ff80000
 8003384:	08004e48 	.word	0x08004e48
 8003388:	08004e20 	.word	0x08004e20
 800338c:	2601      	movs	r6, #1
 800338e:	2300      	movs	r3, #0
 8003390:	9609      	str	r6, [sp, #36]	; 0x24
 8003392:	931e      	str	r3, [sp, #120]	; 0x78
 8003394:	f04f 33ff 	mov.w	r3, #4294967295
 8003398:	2200      	movs	r2, #0
 800339a:	9304      	str	r3, [sp, #16]
 800339c:	4699      	mov	r9, r3
 800339e:	2312      	movs	r3, #18
 80033a0:	921f      	str	r2, [sp, #124]	; 0x7c
 80033a2:	e784      	b.n	80032ae <_dtoa_r+0x246>
 80033a4:	2301      	movs	r3, #1
 80033a6:	9309      	str	r3, [sp, #36]	; 0x24
 80033a8:	e7f4      	b.n	8003394 <_dtoa_r+0x32c>
 80033aa:	2301      	movs	r3, #1
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	4699      	mov	r9, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	e7f5      	b.n	80033a0 <_dtoa_r+0x338>
 80033b4:	686a      	ldr	r2, [r5, #4]
 80033b6:	0049      	lsls	r1, r1, #1
 80033b8:	3201      	adds	r2, #1
 80033ba:	606a      	str	r2, [r5, #4]
 80033bc:	e77b      	b.n	80032b6 <_dtoa_r+0x24e>
 80033be:	2502      	movs	r5, #2
 80033c0:	e7ac      	b.n	800331c <_dtoa_r+0x2b4>
 80033c2:	07f1      	lsls	r1, r6, #31
 80033c4:	d508      	bpl.n	80033d8 <_dtoa_r+0x370>
 80033c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80033ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ce:	f7fd f87f 	bl	80004d0 <__aeabi_dmul>
 80033d2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80033d6:	3501      	adds	r5, #1
 80033d8:	1076      	asrs	r6, r6, #1
 80033da:	3708      	adds	r7, #8
 80033dc:	e79f      	b.n	800331e <_dtoa_r+0x2b6>
 80033de:	f000 80a5 	beq.w	800352c <_dtoa_r+0x4c4>
 80033e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80033e6:	f1cb 0600 	rsb	r6, fp, #0
 80033ea:	4ba2      	ldr	r3, [pc, #648]	; (8003674 <_dtoa_r+0x60c>)
 80033ec:	f006 020f 	and.w	r2, r6, #15
 80033f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80033f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f8:	f7fd f86a 	bl	80004d0 <__aeabi_dmul>
 80033fc:	2502      	movs	r5, #2
 80033fe:	2300      	movs	r3, #0
 8003400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003404:	4f9c      	ldr	r7, [pc, #624]	; (8003678 <_dtoa_r+0x610>)
 8003406:	1136      	asrs	r6, r6, #4
 8003408:	2e00      	cmp	r6, #0
 800340a:	f040 8084 	bne.w	8003516 <_dtoa_r+0x4ae>
 800340e:	2b00      	cmp	r3, #0
 8003410:	d18d      	bne.n	800332e <_dtoa_r+0x2c6>
 8003412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 808b 	beq.w	8003530 <_dtoa_r+0x4c8>
 800341a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800341e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8003422:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003426:	2200      	movs	r2, #0
 8003428:	4b94      	ldr	r3, [pc, #592]	; (800367c <_dtoa_r+0x614>)
 800342a:	f7fd fac3 	bl	80009b4 <__aeabi_dcmplt>
 800342e:	2800      	cmp	r0, #0
 8003430:	d07e      	beq.n	8003530 <_dtoa_r+0x4c8>
 8003432:	f1b9 0f00 	cmp.w	r9, #0
 8003436:	d07b      	beq.n	8003530 <_dtoa_r+0x4c8>
 8003438:	9b04      	ldr	r3, [sp, #16]
 800343a:	2b00      	cmp	r3, #0
 800343c:	dd37      	ble.n	80034ae <_dtoa_r+0x446>
 800343e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003442:	2200      	movs	r2, #0
 8003444:	4b8e      	ldr	r3, [pc, #568]	; (8003680 <_dtoa_r+0x618>)
 8003446:	f7fd f843 	bl	80004d0 <__aeabi_dmul>
 800344a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800344e:	9e04      	ldr	r6, [sp, #16]
 8003450:	f10b 37ff 	add.w	r7, fp, #4294967295
 8003454:	3501      	adds	r5, #1
 8003456:	4628      	mov	r0, r5
 8003458:	f7fc ffd4 	bl	8000404 <__aeabi_i2d>
 800345c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003460:	f7fd f836 	bl	80004d0 <__aeabi_dmul>
 8003464:	4b87      	ldr	r3, [pc, #540]	; (8003684 <_dtoa_r+0x61c>)
 8003466:	2200      	movs	r2, #0
 8003468:	f7fc fe80 	bl	800016c <__adddf3>
 800346c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003472:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8003476:	950b      	str	r5, [sp, #44]	; 0x2c
 8003478:	2e00      	cmp	r6, #0
 800347a:	d15c      	bne.n	8003536 <_dtoa_r+0x4ce>
 800347c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003480:	2200      	movs	r2, #0
 8003482:	4b81      	ldr	r3, [pc, #516]	; (8003688 <_dtoa_r+0x620>)
 8003484:	f7fc fe70 	bl	8000168 <__aeabi_dsub>
 8003488:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800348a:	462b      	mov	r3, r5
 800348c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003490:	f7fd faae 	bl	80009f0 <__aeabi_dcmpgt>
 8003494:	2800      	cmp	r0, #0
 8003496:	f040 82f7 	bne.w	8003a88 <_dtoa_r+0xa20>
 800349a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800349e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80034a0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80034a4:	f7fd fa86 	bl	80009b4 <__aeabi_dcmplt>
 80034a8:	2800      	cmp	r0, #0
 80034aa:	f040 82eb 	bne.w	8003a84 <_dtoa_r+0xa1c>
 80034ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80034b2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80034b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f2c0 8150 	blt.w	800375e <_dtoa_r+0x6f6>
 80034be:	f1bb 0f0e 	cmp.w	fp, #14
 80034c2:	f300 814c 	bgt.w	800375e <_dtoa_r+0x6f6>
 80034c6:	4b6b      	ldr	r3, [pc, #428]	; (8003674 <_dtoa_r+0x60c>)
 80034c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80034cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f280 80da 	bge.w	8003690 <_dtoa_r+0x628>
 80034dc:	f1b9 0f00 	cmp.w	r9, #0
 80034e0:	f300 80d6 	bgt.w	8003690 <_dtoa_r+0x628>
 80034e4:	f040 82cd 	bne.w	8003a82 <_dtoa_r+0xa1a>
 80034e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80034ec:	2200      	movs	r2, #0
 80034ee:	4b66      	ldr	r3, [pc, #408]	; (8003688 <_dtoa_r+0x620>)
 80034f0:	f7fc ffee 	bl	80004d0 <__aeabi_dmul>
 80034f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034f8:	f7fd fa70 	bl	80009dc <__aeabi_dcmpge>
 80034fc:	464e      	mov	r6, r9
 80034fe:	464f      	mov	r7, r9
 8003500:	2800      	cmp	r0, #0
 8003502:	f040 82a4 	bne.w	8003a4e <_dtoa_r+0x9e6>
 8003506:	9b06      	ldr	r3, [sp, #24]
 8003508:	9a06      	ldr	r2, [sp, #24]
 800350a:	1c5d      	adds	r5, r3, #1
 800350c:	2331      	movs	r3, #49	; 0x31
 800350e:	f10b 0b01 	add.w	fp, fp, #1
 8003512:	7013      	strb	r3, [r2, #0]
 8003514:	e29f      	b.n	8003a56 <_dtoa_r+0x9ee>
 8003516:	07f2      	lsls	r2, r6, #31
 8003518:	d505      	bpl.n	8003526 <_dtoa_r+0x4be>
 800351a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800351e:	f7fc ffd7 	bl	80004d0 <__aeabi_dmul>
 8003522:	2301      	movs	r3, #1
 8003524:	3501      	adds	r5, #1
 8003526:	1076      	asrs	r6, r6, #1
 8003528:	3708      	adds	r7, #8
 800352a:	e76d      	b.n	8003408 <_dtoa_r+0x3a0>
 800352c:	2502      	movs	r5, #2
 800352e:	e770      	b.n	8003412 <_dtoa_r+0x3aa>
 8003530:	465f      	mov	r7, fp
 8003532:	464e      	mov	r6, r9
 8003534:	e78f      	b.n	8003456 <_dtoa_r+0x3ee>
 8003536:	9a06      	ldr	r2, [sp, #24]
 8003538:	4b4e      	ldr	r3, [pc, #312]	; (8003674 <_dtoa_r+0x60c>)
 800353a:	4432      	add	r2, r6
 800353c:	9211      	str	r2, [sp, #68]	; 0x44
 800353e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003540:	1e71      	subs	r1, r6, #1
 8003542:	2a00      	cmp	r2, #0
 8003544:	d048      	beq.n	80035d8 <_dtoa_r+0x570>
 8003546:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	2000      	movs	r0, #0
 8003550:	494e      	ldr	r1, [pc, #312]	; (800368c <_dtoa_r+0x624>)
 8003552:	f7fd f8e7 	bl	8000724 <__aeabi_ddiv>
 8003556:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800355a:	f7fc fe05 	bl	8000168 <__aeabi_dsub>
 800355e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003562:	9d06      	ldr	r5, [sp, #24]
 8003564:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003568:	f7fd fa62 	bl	8000a30 <__aeabi_d2iz>
 800356c:	4606      	mov	r6, r0
 800356e:	f7fc ff49 	bl	8000404 <__aeabi_i2d>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800357a:	f7fc fdf5 	bl	8000168 <__aeabi_dsub>
 800357e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003582:	3630      	adds	r6, #48	; 0x30
 8003584:	f805 6b01 	strb.w	r6, [r5], #1
 8003588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800358c:	f7fd fa12 	bl	80009b4 <__aeabi_dcmplt>
 8003590:	2800      	cmp	r0, #0
 8003592:	d164      	bne.n	800365e <_dtoa_r+0x5f6>
 8003594:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003598:	2000      	movs	r0, #0
 800359a:	4938      	ldr	r1, [pc, #224]	; (800367c <_dtoa_r+0x614>)
 800359c:	f7fc fde4 	bl	8000168 <__aeabi_dsub>
 80035a0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80035a4:	f7fd fa06 	bl	80009b4 <__aeabi_dcmplt>
 80035a8:	2800      	cmp	r0, #0
 80035aa:	f040 80b9 	bne.w	8003720 <_dtoa_r+0x6b8>
 80035ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80035b0:	429d      	cmp	r5, r3
 80035b2:	f43f af7c 	beq.w	80034ae <_dtoa_r+0x446>
 80035b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80035ba:	2200      	movs	r2, #0
 80035bc:	4b30      	ldr	r3, [pc, #192]	; (8003680 <_dtoa_r+0x618>)
 80035be:	f7fc ff87 	bl	80004d0 <__aeabi_dmul>
 80035c2:	2200      	movs	r2, #0
 80035c4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035cc:	4b2c      	ldr	r3, [pc, #176]	; (8003680 <_dtoa_r+0x618>)
 80035ce:	f7fc ff7f 	bl	80004d0 <__aeabi_dmul>
 80035d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80035d6:	e7c5      	b.n	8003564 <_dtoa_r+0x4fc>
 80035d8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80035dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035e0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80035e4:	f7fc ff74 	bl	80004d0 <__aeabi_dmul>
 80035e8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80035ec:	9d06      	ldr	r5, [sp, #24]
 80035ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80035f2:	f7fd fa1d 	bl	8000a30 <__aeabi_d2iz>
 80035f6:	4606      	mov	r6, r0
 80035f8:	f7fc ff04 	bl	8000404 <__aeabi_i2d>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003604:	f7fc fdb0 	bl	8000168 <__aeabi_dsub>
 8003608:	3630      	adds	r6, #48	; 0x30
 800360a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800360c:	f805 6b01 	strb.w	r6, [r5], #1
 8003610:	42ab      	cmp	r3, r5
 8003612:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	d124      	bne.n	8003666 <_dtoa_r+0x5fe>
 800361c:	4b1b      	ldr	r3, [pc, #108]	; (800368c <_dtoa_r+0x624>)
 800361e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003622:	f7fc fda3 	bl	800016c <__adddf3>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800362e:	f7fd f9df 	bl	80009f0 <__aeabi_dcmpgt>
 8003632:	2800      	cmp	r0, #0
 8003634:	d174      	bne.n	8003720 <_dtoa_r+0x6b8>
 8003636:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800363a:	2000      	movs	r0, #0
 800363c:	4913      	ldr	r1, [pc, #76]	; (800368c <_dtoa_r+0x624>)
 800363e:	f7fc fd93 	bl	8000168 <__aeabi_dsub>
 8003642:	4602      	mov	r2, r0
 8003644:	460b      	mov	r3, r1
 8003646:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800364a:	f7fd f9b3 	bl	80009b4 <__aeabi_dcmplt>
 800364e:	2800      	cmp	r0, #0
 8003650:	f43f af2d 	beq.w	80034ae <_dtoa_r+0x446>
 8003654:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003658:	1e6a      	subs	r2, r5, #1
 800365a:	2b30      	cmp	r3, #48	; 0x30
 800365c:	d001      	beq.n	8003662 <_dtoa_r+0x5fa>
 800365e:	46bb      	mov	fp, r7
 8003660:	e04d      	b.n	80036fe <_dtoa_r+0x696>
 8003662:	4615      	mov	r5, r2
 8003664:	e7f6      	b.n	8003654 <_dtoa_r+0x5ec>
 8003666:	4b06      	ldr	r3, [pc, #24]	; (8003680 <_dtoa_r+0x618>)
 8003668:	f7fc ff32 	bl	80004d0 <__aeabi_dmul>
 800366c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003670:	e7bd      	b.n	80035ee <_dtoa_r+0x586>
 8003672:	bf00      	nop
 8003674:	08004e48 	.word	0x08004e48
 8003678:	08004e20 	.word	0x08004e20
 800367c:	3ff00000 	.word	0x3ff00000
 8003680:	40240000 	.word	0x40240000
 8003684:	401c0000 	.word	0x401c0000
 8003688:	40140000 	.word	0x40140000
 800368c:	3fe00000 	.word	0x3fe00000
 8003690:	9d06      	ldr	r5, [sp, #24]
 8003692:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8003696:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800369a:	4630      	mov	r0, r6
 800369c:	4639      	mov	r1, r7
 800369e:	f7fd f841 	bl	8000724 <__aeabi_ddiv>
 80036a2:	f7fd f9c5 	bl	8000a30 <__aeabi_d2iz>
 80036a6:	4680      	mov	r8, r0
 80036a8:	f7fc feac 	bl	8000404 <__aeabi_i2d>
 80036ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80036b0:	f7fc ff0e 	bl	80004d0 <__aeabi_dmul>
 80036b4:	4602      	mov	r2, r0
 80036b6:	460b      	mov	r3, r1
 80036b8:	4630      	mov	r0, r6
 80036ba:	4639      	mov	r1, r7
 80036bc:	f7fc fd54 	bl	8000168 <__aeabi_dsub>
 80036c0:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80036c4:	f805 6b01 	strb.w	r6, [r5], #1
 80036c8:	9e06      	ldr	r6, [sp, #24]
 80036ca:	4602      	mov	r2, r0
 80036cc:	1bae      	subs	r6, r5, r6
 80036ce:	45b1      	cmp	r9, r6
 80036d0:	460b      	mov	r3, r1
 80036d2:	d137      	bne.n	8003744 <_dtoa_r+0x6dc>
 80036d4:	f7fc fd4a 	bl	800016c <__adddf3>
 80036d8:	4606      	mov	r6, r0
 80036da:	460f      	mov	r7, r1
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036e4:	f7fd f966 	bl	80009b4 <__aeabi_dcmplt>
 80036e8:	b9c8      	cbnz	r0, 800371e <_dtoa_r+0x6b6>
 80036ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80036ee:	4632      	mov	r2, r6
 80036f0:	463b      	mov	r3, r7
 80036f2:	f7fd f955 	bl	80009a0 <__aeabi_dcmpeq>
 80036f6:	b110      	cbz	r0, 80036fe <_dtoa_r+0x696>
 80036f8:	f018 0f01 	tst.w	r8, #1
 80036fc:	d10f      	bne.n	800371e <_dtoa_r+0x6b6>
 80036fe:	4651      	mov	r1, sl
 8003700:	4620      	mov	r0, r4
 8003702:	f000 fd01 	bl	8004108 <_Bfree>
 8003706:	2300      	movs	r3, #0
 8003708:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800370a:	702b      	strb	r3, [r5, #0]
 800370c:	f10b 0301 	add.w	r3, fp, #1
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003714:	2b00      	cmp	r3, #0
 8003716:	f43f acec 	beq.w	80030f2 <_dtoa_r+0x8a>
 800371a:	601d      	str	r5, [r3, #0]
 800371c:	e4e9      	b.n	80030f2 <_dtoa_r+0x8a>
 800371e:	465f      	mov	r7, fp
 8003720:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8003724:	1e6b      	subs	r3, r5, #1
 8003726:	2a39      	cmp	r2, #57	; 0x39
 8003728:	d106      	bne.n	8003738 <_dtoa_r+0x6d0>
 800372a:	9a06      	ldr	r2, [sp, #24]
 800372c:	429a      	cmp	r2, r3
 800372e:	d107      	bne.n	8003740 <_dtoa_r+0x6d8>
 8003730:	2330      	movs	r3, #48	; 0x30
 8003732:	7013      	strb	r3, [r2, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	3701      	adds	r7, #1
 8003738:	781a      	ldrb	r2, [r3, #0]
 800373a:	3201      	adds	r2, #1
 800373c:	701a      	strb	r2, [r3, #0]
 800373e:	e78e      	b.n	800365e <_dtoa_r+0x5f6>
 8003740:	461d      	mov	r5, r3
 8003742:	e7ed      	b.n	8003720 <_dtoa_r+0x6b8>
 8003744:	2200      	movs	r2, #0
 8003746:	4bb5      	ldr	r3, [pc, #724]	; (8003a1c <_dtoa_r+0x9b4>)
 8003748:	f7fc fec2 	bl	80004d0 <__aeabi_dmul>
 800374c:	2200      	movs	r2, #0
 800374e:	2300      	movs	r3, #0
 8003750:	4606      	mov	r6, r0
 8003752:	460f      	mov	r7, r1
 8003754:	f7fd f924 	bl	80009a0 <__aeabi_dcmpeq>
 8003758:	2800      	cmp	r0, #0
 800375a:	d09c      	beq.n	8003696 <_dtoa_r+0x62e>
 800375c:	e7cf      	b.n	80036fe <_dtoa_r+0x696>
 800375e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003760:	2a00      	cmp	r2, #0
 8003762:	f000 8129 	beq.w	80039b8 <_dtoa_r+0x950>
 8003766:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003768:	2a01      	cmp	r2, #1
 800376a:	f300 810e 	bgt.w	800398a <_dtoa_r+0x922>
 800376e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003770:	2a00      	cmp	r2, #0
 8003772:	f000 8106 	beq.w	8003982 <_dtoa_r+0x91a>
 8003776:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800377a:	4645      	mov	r5, r8
 800377c:	9e08      	ldr	r6, [sp, #32]
 800377e:	9a07      	ldr	r2, [sp, #28]
 8003780:	2101      	movs	r1, #1
 8003782:	441a      	add	r2, r3
 8003784:	4620      	mov	r0, r4
 8003786:	4498      	add	r8, r3
 8003788:	9207      	str	r2, [sp, #28]
 800378a:	f000 fd5d 	bl	8004248 <__i2b>
 800378e:	4607      	mov	r7, r0
 8003790:	2d00      	cmp	r5, #0
 8003792:	dd0b      	ble.n	80037ac <_dtoa_r+0x744>
 8003794:	9b07      	ldr	r3, [sp, #28]
 8003796:	2b00      	cmp	r3, #0
 8003798:	dd08      	ble.n	80037ac <_dtoa_r+0x744>
 800379a:	42ab      	cmp	r3, r5
 800379c:	bfa8      	it	ge
 800379e:	462b      	movge	r3, r5
 80037a0:	9a07      	ldr	r2, [sp, #28]
 80037a2:	eba8 0803 	sub.w	r8, r8, r3
 80037a6:	1aed      	subs	r5, r5, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	9307      	str	r3, [sp, #28]
 80037ac:	9b08      	ldr	r3, [sp, #32]
 80037ae:	b1fb      	cbz	r3, 80037f0 <_dtoa_r+0x788>
 80037b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8104 	beq.w	80039c0 <_dtoa_r+0x958>
 80037b8:	2e00      	cmp	r6, #0
 80037ba:	dd11      	ble.n	80037e0 <_dtoa_r+0x778>
 80037bc:	4639      	mov	r1, r7
 80037be:	4632      	mov	r2, r6
 80037c0:	4620      	mov	r0, r4
 80037c2:	f000 fdd7 	bl	8004374 <__pow5mult>
 80037c6:	4652      	mov	r2, sl
 80037c8:	4601      	mov	r1, r0
 80037ca:	4607      	mov	r7, r0
 80037cc:	4620      	mov	r0, r4
 80037ce:	f000 fd44 	bl	800425a <__multiply>
 80037d2:	4651      	mov	r1, sl
 80037d4:	900a      	str	r0, [sp, #40]	; 0x28
 80037d6:	4620      	mov	r0, r4
 80037d8:	f000 fc96 	bl	8004108 <_Bfree>
 80037dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037de:	469a      	mov	sl, r3
 80037e0:	9b08      	ldr	r3, [sp, #32]
 80037e2:	1b9a      	subs	r2, r3, r6
 80037e4:	d004      	beq.n	80037f0 <_dtoa_r+0x788>
 80037e6:	4651      	mov	r1, sl
 80037e8:	4620      	mov	r0, r4
 80037ea:	f000 fdc3 	bl	8004374 <__pow5mult>
 80037ee:	4682      	mov	sl, r0
 80037f0:	2101      	movs	r1, #1
 80037f2:	4620      	mov	r0, r4
 80037f4:	f000 fd28 	bl	8004248 <__i2b>
 80037f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80037fa:	4606      	mov	r6, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f340 80e1 	ble.w	80039c4 <_dtoa_r+0x95c>
 8003802:	461a      	mov	r2, r3
 8003804:	4601      	mov	r1, r0
 8003806:	4620      	mov	r0, r4
 8003808:	f000 fdb4 	bl	8004374 <__pow5mult>
 800380c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800380e:	4606      	mov	r6, r0
 8003810:	2b01      	cmp	r3, #1
 8003812:	f340 80da 	ble.w	80039ca <_dtoa_r+0x962>
 8003816:	2300      	movs	r3, #0
 8003818:	9308      	str	r3, [sp, #32]
 800381a:	6933      	ldr	r3, [r6, #16]
 800381c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8003820:	6918      	ldr	r0, [r3, #16]
 8003822:	f000 fcc3 	bl	80041ac <__hi0bits>
 8003826:	f1c0 0020 	rsb	r0, r0, #32
 800382a:	9b07      	ldr	r3, [sp, #28]
 800382c:	4418      	add	r0, r3
 800382e:	f010 001f 	ands.w	r0, r0, #31
 8003832:	f000 80f0 	beq.w	8003a16 <_dtoa_r+0x9ae>
 8003836:	f1c0 0320 	rsb	r3, r0, #32
 800383a:	2b04      	cmp	r3, #4
 800383c:	f340 80e2 	ble.w	8003a04 <_dtoa_r+0x99c>
 8003840:	9b07      	ldr	r3, [sp, #28]
 8003842:	f1c0 001c 	rsb	r0, r0, #28
 8003846:	4480      	add	r8, r0
 8003848:	4405      	add	r5, r0
 800384a:	4403      	add	r3, r0
 800384c:	9307      	str	r3, [sp, #28]
 800384e:	f1b8 0f00 	cmp.w	r8, #0
 8003852:	dd05      	ble.n	8003860 <_dtoa_r+0x7f8>
 8003854:	4651      	mov	r1, sl
 8003856:	4642      	mov	r2, r8
 8003858:	4620      	mov	r0, r4
 800385a:	f000 fdd9 	bl	8004410 <__lshift>
 800385e:	4682      	mov	sl, r0
 8003860:	9b07      	ldr	r3, [sp, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	dd05      	ble.n	8003872 <_dtoa_r+0x80a>
 8003866:	4631      	mov	r1, r6
 8003868:	461a      	mov	r2, r3
 800386a:	4620      	mov	r0, r4
 800386c:	f000 fdd0 	bl	8004410 <__lshift>
 8003870:	4606      	mov	r6, r0
 8003872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003874:	2b00      	cmp	r3, #0
 8003876:	f000 80d3 	beq.w	8003a20 <_dtoa_r+0x9b8>
 800387a:	4631      	mov	r1, r6
 800387c:	4650      	mov	r0, sl
 800387e:	f000 fe18 	bl	80044b2 <__mcmp>
 8003882:	2800      	cmp	r0, #0
 8003884:	f280 80cc 	bge.w	8003a20 <_dtoa_r+0x9b8>
 8003888:	2300      	movs	r3, #0
 800388a:	4651      	mov	r1, sl
 800388c:	220a      	movs	r2, #10
 800388e:	4620      	mov	r0, r4
 8003890:	f000 fc51 	bl	8004136 <__multadd>
 8003894:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003896:	f10b 3bff 	add.w	fp, fp, #4294967295
 800389a:	4682      	mov	sl, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 81a9 	beq.w	8003bf4 <_dtoa_r+0xb8c>
 80038a2:	2300      	movs	r3, #0
 80038a4:	4639      	mov	r1, r7
 80038a6:	220a      	movs	r2, #10
 80038a8:	4620      	mov	r0, r4
 80038aa:	f000 fc44 	bl	8004136 <__multadd>
 80038ae:	9b04      	ldr	r3, [sp, #16]
 80038b0:	4607      	mov	r7, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	dc03      	bgt.n	80038be <_dtoa_r+0x856>
 80038b6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	f300 80b9 	bgt.w	8003a30 <_dtoa_r+0x9c8>
 80038be:	2d00      	cmp	r5, #0
 80038c0:	dd05      	ble.n	80038ce <_dtoa_r+0x866>
 80038c2:	4639      	mov	r1, r7
 80038c4:	462a      	mov	r2, r5
 80038c6:	4620      	mov	r0, r4
 80038c8:	f000 fda2 	bl	8004410 <__lshift>
 80038cc:	4607      	mov	r7, r0
 80038ce:	9b08      	ldr	r3, [sp, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 8110 	beq.w	8003af6 <_dtoa_r+0xa8e>
 80038d6:	6879      	ldr	r1, [r7, #4]
 80038d8:	4620      	mov	r0, r4
 80038da:	f000 fbe1 	bl	80040a0 <_Balloc>
 80038de:	4605      	mov	r5, r0
 80038e0:	693a      	ldr	r2, [r7, #16]
 80038e2:	f107 010c 	add.w	r1, r7, #12
 80038e6:	3202      	adds	r2, #2
 80038e8:	0092      	lsls	r2, r2, #2
 80038ea:	300c      	adds	r0, #12
 80038ec:	f000 fbc0 	bl	8004070 <memcpy>
 80038f0:	2201      	movs	r2, #1
 80038f2:	4629      	mov	r1, r5
 80038f4:	4620      	mov	r0, r4
 80038f6:	f000 fd8b 	bl	8004410 <__lshift>
 80038fa:	9707      	str	r7, [sp, #28]
 80038fc:	4607      	mov	r7, r0
 80038fe:	9b02      	ldr	r3, [sp, #8]
 8003900:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	9308      	str	r3, [sp, #32]
 800390a:	4631      	mov	r1, r6
 800390c:	4650      	mov	r0, sl
 800390e:	f7ff fb1d 	bl	8002f4c <quorem>
 8003912:	9907      	ldr	r1, [sp, #28]
 8003914:	4605      	mov	r5, r0
 8003916:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800391a:	4650      	mov	r0, sl
 800391c:	f000 fdc9 	bl	80044b2 <__mcmp>
 8003920:	463a      	mov	r2, r7
 8003922:	9002      	str	r0, [sp, #8]
 8003924:	4631      	mov	r1, r6
 8003926:	4620      	mov	r0, r4
 8003928:	f000 fddd 	bl	80044e6 <__mdiff>
 800392c:	68c3      	ldr	r3, [r0, #12]
 800392e:	4602      	mov	r2, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	f040 80e2 	bne.w	8003afa <_dtoa_r+0xa92>
 8003936:	4601      	mov	r1, r0
 8003938:	9009      	str	r0, [sp, #36]	; 0x24
 800393a:	4650      	mov	r0, sl
 800393c:	f000 fdb9 	bl	80044b2 <__mcmp>
 8003940:	4603      	mov	r3, r0
 8003942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003944:	4611      	mov	r1, r2
 8003946:	4620      	mov	r0, r4
 8003948:	9309      	str	r3, [sp, #36]	; 0x24
 800394a:	f000 fbdd 	bl	8004108 <_Bfree>
 800394e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003950:	2b00      	cmp	r3, #0
 8003952:	f040 80d4 	bne.w	8003afe <_dtoa_r+0xa96>
 8003956:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003958:	2a00      	cmp	r2, #0
 800395a:	f040 80d0 	bne.w	8003afe <_dtoa_r+0xa96>
 800395e:	9a08      	ldr	r2, [sp, #32]
 8003960:	2a00      	cmp	r2, #0
 8003962:	f040 80cc 	bne.w	8003afe <_dtoa_r+0xa96>
 8003966:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800396a:	f000 80e8 	beq.w	8003b3e <_dtoa_r+0xad6>
 800396e:	9b02      	ldr	r3, [sp, #8]
 8003970:	2b00      	cmp	r3, #0
 8003972:	dd01      	ble.n	8003978 <_dtoa_r+0x910>
 8003974:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8003978:	f108 0501 	add.w	r5, r8, #1
 800397c:	f888 9000 	strb.w	r9, [r8]
 8003980:	e06b      	b.n	8003a5a <_dtoa_r+0x9f2>
 8003982:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003984:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8003988:	e6f7      	b.n	800377a <_dtoa_r+0x712>
 800398a:	9b08      	ldr	r3, [sp, #32]
 800398c:	f109 36ff 	add.w	r6, r9, #4294967295
 8003990:	42b3      	cmp	r3, r6
 8003992:	bfb7      	itett	lt
 8003994:	9b08      	ldrlt	r3, [sp, #32]
 8003996:	1b9e      	subge	r6, r3, r6
 8003998:	1af2      	sublt	r2, r6, r3
 800399a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 800399c:	bfbf      	itttt	lt
 800399e:	9608      	strlt	r6, [sp, #32]
 80039a0:	189b      	addlt	r3, r3, r2
 80039a2:	930c      	strlt	r3, [sp, #48]	; 0x30
 80039a4:	2600      	movlt	r6, #0
 80039a6:	f1b9 0f00 	cmp.w	r9, #0
 80039aa:	bfb9      	ittee	lt
 80039ac:	eba8 0509 	sublt.w	r5, r8, r9
 80039b0:	2300      	movlt	r3, #0
 80039b2:	4645      	movge	r5, r8
 80039b4:	464b      	movge	r3, r9
 80039b6:	e6e2      	b.n	800377e <_dtoa_r+0x716>
 80039b8:	9e08      	ldr	r6, [sp, #32]
 80039ba:	4645      	mov	r5, r8
 80039bc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80039be:	e6e7      	b.n	8003790 <_dtoa_r+0x728>
 80039c0:	9a08      	ldr	r2, [sp, #32]
 80039c2:	e710      	b.n	80037e6 <_dtoa_r+0x77e>
 80039c4:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	dc18      	bgt.n	80039fc <_dtoa_r+0x994>
 80039ca:	9b02      	ldr	r3, [sp, #8]
 80039cc:	b9b3      	cbnz	r3, 80039fc <_dtoa_r+0x994>
 80039ce:	9b03      	ldr	r3, [sp, #12]
 80039d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80039d4:	b9a3      	cbnz	r3, 8003a00 <_dtoa_r+0x998>
 80039d6:	9b03      	ldr	r3, [sp, #12]
 80039d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80039dc:	0d1b      	lsrs	r3, r3, #20
 80039de:	051b      	lsls	r3, r3, #20
 80039e0:	b12b      	cbz	r3, 80039ee <_dtoa_r+0x986>
 80039e2:	9b07      	ldr	r3, [sp, #28]
 80039e4:	f108 0801 	add.w	r8, r8, #1
 80039e8:	3301      	adds	r3, #1
 80039ea:	9307      	str	r3, [sp, #28]
 80039ec:	2301      	movs	r3, #1
 80039ee:	9308      	str	r3, [sp, #32]
 80039f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f47f af11 	bne.w	800381a <_dtoa_r+0x7b2>
 80039f8:	2001      	movs	r0, #1
 80039fa:	e716      	b.n	800382a <_dtoa_r+0x7c2>
 80039fc:	2300      	movs	r3, #0
 80039fe:	e7f6      	b.n	80039ee <_dtoa_r+0x986>
 8003a00:	9b02      	ldr	r3, [sp, #8]
 8003a02:	e7f4      	b.n	80039ee <_dtoa_r+0x986>
 8003a04:	f43f af23 	beq.w	800384e <_dtoa_r+0x7e6>
 8003a08:	9a07      	ldr	r2, [sp, #28]
 8003a0a:	331c      	adds	r3, #28
 8003a0c:	441a      	add	r2, r3
 8003a0e:	4498      	add	r8, r3
 8003a10:	441d      	add	r5, r3
 8003a12:	4613      	mov	r3, r2
 8003a14:	e71a      	b.n	800384c <_dtoa_r+0x7e4>
 8003a16:	4603      	mov	r3, r0
 8003a18:	e7f6      	b.n	8003a08 <_dtoa_r+0x9a0>
 8003a1a:	bf00      	nop
 8003a1c:	40240000 	.word	0x40240000
 8003a20:	f1b9 0f00 	cmp.w	r9, #0
 8003a24:	dc33      	bgt.n	8003a8e <_dtoa_r+0xa26>
 8003a26:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	dd30      	ble.n	8003a8e <_dtoa_r+0xa26>
 8003a2c:	f8cd 9010 	str.w	r9, [sp, #16]
 8003a30:	9b04      	ldr	r3, [sp, #16]
 8003a32:	b963      	cbnz	r3, 8003a4e <_dtoa_r+0x9e6>
 8003a34:	4631      	mov	r1, r6
 8003a36:	2205      	movs	r2, #5
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f000 fb7c 	bl	8004136 <__multadd>
 8003a3e:	4601      	mov	r1, r0
 8003a40:	4606      	mov	r6, r0
 8003a42:	4650      	mov	r0, sl
 8003a44:	f000 fd35 	bl	80044b2 <__mcmp>
 8003a48:	2800      	cmp	r0, #0
 8003a4a:	f73f ad5c 	bgt.w	8003506 <_dtoa_r+0x49e>
 8003a4e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003a50:	9d06      	ldr	r5, [sp, #24]
 8003a52:	ea6f 0b03 	mvn.w	fp, r3
 8003a56:	2300      	movs	r3, #0
 8003a58:	9307      	str	r3, [sp, #28]
 8003a5a:	4631      	mov	r1, r6
 8003a5c:	4620      	mov	r0, r4
 8003a5e:	f000 fb53 	bl	8004108 <_Bfree>
 8003a62:	2f00      	cmp	r7, #0
 8003a64:	f43f ae4b 	beq.w	80036fe <_dtoa_r+0x696>
 8003a68:	9b07      	ldr	r3, [sp, #28]
 8003a6a:	b12b      	cbz	r3, 8003a78 <_dtoa_r+0xa10>
 8003a6c:	42bb      	cmp	r3, r7
 8003a6e:	d003      	beq.n	8003a78 <_dtoa_r+0xa10>
 8003a70:	4619      	mov	r1, r3
 8003a72:	4620      	mov	r0, r4
 8003a74:	f000 fb48 	bl	8004108 <_Bfree>
 8003a78:	4639      	mov	r1, r7
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	f000 fb44 	bl	8004108 <_Bfree>
 8003a80:	e63d      	b.n	80036fe <_dtoa_r+0x696>
 8003a82:	2600      	movs	r6, #0
 8003a84:	4637      	mov	r7, r6
 8003a86:	e7e2      	b.n	8003a4e <_dtoa_r+0x9e6>
 8003a88:	46bb      	mov	fp, r7
 8003a8a:	4637      	mov	r7, r6
 8003a8c:	e53b      	b.n	8003506 <_dtoa_r+0x49e>
 8003a8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a90:	f8cd 9010 	str.w	r9, [sp, #16]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f47f af12 	bne.w	80038be <_dtoa_r+0x856>
 8003a9a:	9d06      	ldr	r5, [sp, #24]
 8003a9c:	4631      	mov	r1, r6
 8003a9e:	4650      	mov	r0, sl
 8003aa0:	f7ff fa54 	bl	8002f4c <quorem>
 8003aa4:	9b06      	ldr	r3, [sp, #24]
 8003aa6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8003aaa:	f805 9b01 	strb.w	r9, [r5], #1
 8003aae:	9a04      	ldr	r2, [sp, #16]
 8003ab0:	1aeb      	subs	r3, r5, r3
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	f300 8081 	bgt.w	8003bba <_dtoa_r+0xb52>
 8003ab8:	9b06      	ldr	r3, [sp, #24]
 8003aba:	2a01      	cmp	r2, #1
 8003abc:	bfac      	ite	ge
 8003abe:	189b      	addge	r3, r3, r2
 8003ac0:	3301      	addlt	r3, #1
 8003ac2:	4698      	mov	r8, r3
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9307      	str	r3, [sp, #28]
 8003ac8:	4651      	mov	r1, sl
 8003aca:	2201      	movs	r2, #1
 8003acc:	4620      	mov	r0, r4
 8003ace:	f000 fc9f 	bl	8004410 <__lshift>
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4682      	mov	sl, r0
 8003ad6:	f000 fcec 	bl	80044b2 <__mcmp>
 8003ada:	2800      	cmp	r0, #0
 8003adc:	dc34      	bgt.n	8003b48 <_dtoa_r+0xae0>
 8003ade:	d102      	bne.n	8003ae6 <_dtoa_r+0xa7e>
 8003ae0:	f019 0f01 	tst.w	r9, #1
 8003ae4:	d130      	bne.n	8003b48 <_dtoa_r+0xae0>
 8003ae6:	4645      	mov	r5, r8
 8003ae8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003aec:	1e6a      	subs	r2, r5, #1
 8003aee:	2b30      	cmp	r3, #48	; 0x30
 8003af0:	d1b3      	bne.n	8003a5a <_dtoa_r+0x9f2>
 8003af2:	4615      	mov	r5, r2
 8003af4:	e7f8      	b.n	8003ae8 <_dtoa_r+0xa80>
 8003af6:	4638      	mov	r0, r7
 8003af8:	e6ff      	b.n	80038fa <_dtoa_r+0x892>
 8003afa:	2301      	movs	r3, #1
 8003afc:	e722      	b.n	8003944 <_dtoa_r+0x8dc>
 8003afe:	9a02      	ldr	r2, [sp, #8]
 8003b00:	2a00      	cmp	r2, #0
 8003b02:	db04      	blt.n	8003b0e <_dtoa_r+0xaa6>
 8003b04:	d128      	bne.n	8003b58 <_dtoa_r+0xaf0>
 8003b06:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8003b08:	bb32      	cbnz	r2, 8003b58 <_dtoa_r+0xaf0>
 8003b0a:	9a08      	ldr	r2, [sp, #32]
 8003b0c:	bb22      	cbnz	r2, 8003b58 <_dtoa_r+0xaf0>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f77f af32 	ble.w	8003978 <_dtoa_r+0x910>
 8003b14:	4651      	mov	r1, sl
 8003b16:	2201      	movs	r2, #1
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f000 fc79 	bl	8004410 <__lshift>
 8003b1e:	4631      	mov	r1, r6
 8003b20:	4682      	mov	sl, r0
 8003b22:	f000 fcc6 	bl	80044b2 <__mcmp>
 8003b26:	2800      	cmp	r0, #0
 8003b28:	dc05      	bgt.n	8003b36 <_dtoa_r+0xace>
 8003b2a:	f47f af25 	bne.w	8003978 <_dtoa_r+0x910>
 8003b2e:	f019 0f01 	tst.w	r9, #1
 8003b32:	f43f af21 	beq.w	8003978 <_dtoa_r+0x910>
 8003b36:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003b3a:	f47f af1b 	bne.w	8003974 <_dtoa_r+0x90c>
 8003b3e:	2339      	movs	r3, #57	; 0x39
 8003b40:	f108 0801 	add.w	r8, r8, #1
 8003b44:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003b48:	4645      	mov	r5, r8
 8003b4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8003b4e:	1e6a      	subs	r2, r5, #1
 8003b50:	2b39      	cmp	r3, #57	; 0x39
 8003b52:	d03a      	beq.n	8003bca <_dtoa_r+0xb62>
 8003b54:	3301      	adds	r3, #1
 8003b56:	e03f      	b.n	8003bd8 <_dtoa_r+0xb70>
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	f108 0501 	add.w	r5, r8, #1
 8003b5e:	dd05      	ble.n	8003b6c <_dtoa_r+0xb04>
 8003b60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8003b64:	d0eb      	beq.n	8003b3e <_dtoa_r+0xad6>
 8003b66:	f109 0901 	add.w	r9, r9, #1
 8003b6a:	e707      	b.n	800397c <_dtoa_r+0x914>
 8003b6c:	9b06      	ldr	r3, [sp, #24]
 8003b6e:	9a04      	ldr	r2, [sp, #16]
 8003b70:	1aeb      	subs	r3, r5, r3
 8003b72:	4293      	cmp	r3, r2
 8003b74:	46a8      	mov	r8, r5
 8003b76:	f805 9c01 	strb.w	r9, [r5, #-1]
 8003b7a:	d0a5      	beq.n	8003ac8 <_dtoa_r+0xa60>
 8003b7c:	4651      	mov	r1, sl
 8003b7e:	2300      	movs	r3, #0
 8003b80:	220a      	movs	r2, #10
 8003b82:	4620      	mov	r0, r4
 8003b84:	f000 fad7 	bl	8004136 <__multadd>
 8003b88:	9b07      	ldr	r3, [sp, #28]
 8003b8a:	4682      	mov	sl, r0
 8003b8c:	42bb      	cmp	r3, r7
 8003b8e:	f04f 020a 	mov.w	r2, #10
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	9907      	ldr	r1, [sp, #28]
 8003b98:	4620      	mov	r0, r4
 8003b9a:	d104      	bne.n	8003ba6 <_dtoa_r+0xb3e>
 8003b9c:	f000 facb 	bl	8004136 <__multadd>
 8003ba0:	9007      	str	r0, [sp, #28]
 8003ba2:	4607      	mov	r7, r0
 8003ba4:	e6b1      	b.n	800390a <_dtoa_r+0x8a2>
 8003ba6:	f000 fac6 	bl	8004136 <__multadd>
 8003baa:	2300      	movs	r3, #0
 8003bac:	9007      	str	r0, [sp, #28]
 8003bae:	220a      	movs	r2, #10
 8003bb0:	4639      	mov	r1, r7
 8003bb2:	4620      	mov	r0, r4
 8003bb4:	f000 fabf 	bl	8004136 <__multadd>
 8003bb8:	e7f3      	b.n	8003ba2 <_dtoa_r+0xb3a>
 8003bba:	4651      	mov	r1, sl
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	220a      	movs	r2, #10
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	f000 fab8 	bl	8004136 <__multadd>
 8003bc6:	4682      	mov	sl, r0
 8003bc8:	e768      	b.n	8003a9c <_dtoa_r+0xa34>
 8003bca:	9b06      	ldr	r3, [sp, #24]
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d105      	bne.n	8003bdc <_dtoa_r+0xb74>
 8003bd0:	2331      	movs	r3, #49	; 0x31
 8003bd2:	9a06      	ldr	r2, [sp, #24]
 8003bd4:	f10b 0b01 	add.w	fp, fp, #1
 8003bd8:	7013      	strb	r3, [r2, #0]
 8003bda:	e73e      	b.n	8003a5a <_dtoa_r+0x9f2>
 8003bdc:	4615      	mov	r5, r2
 8003bde:	e7b4      	b.n	8003b4a <_dtoa_r+0xae2>
 8003be0:	4b09      	ldr	r3, [pc, #36]	; (8003c08 <_dtoa_r+0xba0>)
 8003be2:	f7ff baa3 	b.w	800312c <_dtoa_r+0xc4>
 8003be6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f47f aa7d 	bne.w	80030e8 <_dtoa_r+0x80>
 8003bee:	4b07      	ldr	r3, [pc, #28]	; (8003c0c <_dtoa_r+0xba4>)
 8003bf0:	f7ff ba9c 	b.w	800312c <_dtoa_r+0xc4>
 8003bf4:	9b04      	ldr	r3, [sp, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f73f af4f 	bgt.w	8003a9a <_dtoa_r+0xa32>
 8003bfc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	f77f af4b 	ble.w	8003a9a <_dtoa_r+0xa32>
 8003c04:	e714      	b.n	8003a30 <_dtoa_r+0x9c8>
 8003c06:	bf00      	nop
 8003c08:	08004dea 	.word	0x08004dea
 8003c0c:	08004e0c 	.word	0x08004e0c

08003c10 <_localeconv_r>:
 8003c10:	4b04      	ldr	r3, [pc, #16]	; (8003c24 <_localeconv_r+0x14>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6a18      	ldr	r0, [r3, #32]
 8003c16:	4b04      	ldr	r3, [pc, #16]	; (8003c28 <_localeconv_r+0x18>)
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	bf08      	it	eq
 8003c1c:	4618      	moveq	r0, r3
 8003c1e:	30f0      	adds	r0, #240	; 0xf0
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000014 	.word	0x20000014
 8003c28:	20000518 	.word	0x20000518

08003c2c <malloc>:
 8003c2c:	4b02      	ldr	r3, [pc, #8]	; (8003c38 <malloc+0xc>)
 8003c2e:	4601      	mov	r1, r0
 8003c30:	6818      	ldr	r0, [r3, #0]
 8003c32:	f000 b803 	b.w	8003c3c <_malloc_r>
 8003c36:	bf00      	nop
 8003c38:	20000014 	.word	0x20000014

08003c3c <_malloc_r>:
 8003c3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c40:	f101 040b 	add.w	r4, r1, #11
 8003c44:	2c16      	cmp	r4, #22
 8003c46:	4681      	mov	r9, r0
 8003c48:	d907      	bls.n	8003c5a <_malloc_r+0x1e>
 8003c4a:	f034 0407 	bics.w	r4, r4, #7
 8003c4e:	d505      	bpl.n	8003c5c <_malloc_r+0x20>
 8003c50:	230c      	movs	r3, #12
 8003c52:	f8c9 3000 	str.w	r3, [r9]
 8003c56:	2600      	movs	r6, #0
 8003c58:	e131      	b.n	8003ebe <_malloc_r+0x282>
 8003c5a:	2410      	movs	r4, #16
 8003c5c:	428c      	cmp	r4, r1
 8003c5e:	d3f7      	bcc.n	8003c50 <_malloc_r+0x14>
 8003c60:	4648      	mov	r0, r9
 8003c62:	f000 fa11 	bl	8004088 <__malloc_lock>
 8003c66:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003c6a:	4d9b      	ldr	r5, [pc, #620]	; (8003ed8 <_malloc_r+0x29c>)
 8003c6c:	d236      	bcs.n	8003cdc <_malloc_r+0xa0>
 8003c6e:	f104 0208 	add.w	r2, r4, #8
 8003c72:	442a      	add	r2, r5
 8003c74:	6856      	ldr	r6, [r2, #4]
 8003c76:	f1a2 0108 	sub.w	r1, r2, #8
 8003c7a:	428e      	cmp	r6, r1
 8003c7c:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003c80:	d102      	bne.n	8003c88 <_malloc_r+0x4c>
 8003c82:	68d6      	ldr	r6, [r2, #12]
 8003c84:	42b2      	cmp	r2, r6
 8003c86:	d010      	beq.n	8003caa <_malloc_r+0x6e>
 8003c88:	6873      	ldr	r3, [r6, #4]
 8003c8a:	68f2      	ldr	r2, [r6, #12]
 8003c8c:	68b1      	ldr	r1, [r6, #8]
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	60ca      	str	r2, [r1, #12]
 8003c94:	4433      	add	r3, r6
 8003c96:	6091      	str	r1, [r2, #8]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	f042 0201 	orr.w	r2, r2, #1
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	4648      	mov	r0, r9
 8003ca2:	f000 f9f7 	bl	8004094 <__malloc_unlock>
 8003ca6:	3608      	adds	r6, #8
 8003ca8:	e109      	b.n	8003ebe <_malloc_r+0x282>
 8003caa:	3302      	adds	r3, #2
 8003cac:	4a8b      	ldr	r2, [pc, #556]	; (8003edc <_malloc_r+0x2a0>)
 8003cae:	692e      	ldr	r6, [r5, #16]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4296      	cmp	r6, r2
 8003cb4:	d06d      	beq.n	8003d92 <_malloc_r+0x156>
 8003cb6:	6870      	ldr	r0, [r6, #4]
 8003cb8:	f020 0003 	bic.w	r0, r0, #3
 8003cbc:	1b07      	subs	r7, r0, r4
 8003cbe:	2f0f      	cmp	r7, #15
 8003cc0:	dd47      	ble.n	8003d52 <_malloc_r+0x116>
 8003cc2:	1933      	adds	r3, r6, r4
 8003cc4:	f044 0401 	orr.w	r4, r4, #1
 8003cc8:	6074      	str	r4, [r6, #4]
 8003cca:	616b      	str	r3, [r5, #20]
 8003ccc:	612b      	str	r3, [r5, #16]
 8003cce:	60da      	str	r2, [r3, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
 8003cd2:	f047 0201 	orr.w	r2, r7, #1
 8003cd6:	605a      	str	r2, [r3, #4]
 8003cd8:	5037      	str	r7, [r6, r0]
 8003cda:	e7e1      	b.n	8003ca0 <_malloc_r+0x64>
 8003cdc:	0a63      	lsrs	r3, r4, #9
 8003cde:	d02a      	beq.n	8003d36 <_malloc_r+0xfa>
 8003ce0:	2b04      	cmp	r3, #4
 8003ce2:	d812      	bhi.n	8003d0a <_malloc_r+0xce>
 8003ce4:	09a3      	lsrs	r3, r4, #6
 8003ce6:	3338      	adds	r3, #56	; 0x38
 8003ce8:	1c5a      	adds	r2, r3, #1
 8003cea:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003cee:	6856      	ldr	r6, [r2, #4]
 8003cf0:	f1a2 0008 	sub.w	r0, r2, #8
 8003cf4:	4286      	cmp	r6, r0
 8003cf6:	d006      	beq.n	8003d06 <_malloc_r+0xca>
 8003cf8:	6872      	ldr	r2, [r6, #4]
 8003cfa:	f022 0203 	bic.w	r2, r2, #3
 8003cfe:	1b11      	subs	r1, r2, r4
 8003d00:	290f      	cmp	r1, #15
 8003d02:	dd1c      	ble.n	8003d3e <_malloc_r+0x102>
 8003d04:	3b01      	subs	r3, #1
 8003d06:	3301      	adds	r3, #1
 8003d08:	e7d0      	b.n	8003cac <_malloc_r+0x70>
 8003d0a:	2b14      	cmp	r3, #20
 8003d0c:	d801      	bhi.n	8003d12 <_malloc_r+0xd6>
 8003d0e:	335b      	adds	r3, #91	; 0x5b
 8003d10:	e7ea      	b.n	8003ce8 <_malloc_r+0xac>
 8003d12:	2b54      	cmp	r3, #84	; 0x54
 8003d14:	d802      	bhi.n	8003d1c <_malloc_r+0xe0>
 8003d16:	0b23      	lsrs	r3, r4, #12
 8003d18:	336e      	adds	r3, #110	; 0x6e
 8003d1a:	e7e5      	b.n	8003ce8 <_malloc_r+0xac>
 8003d1c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003d20:	d802      	bhi.n	8003d28 <_malloc_r+0xec>
 8003d22:	0be3      	lsrs	r3, r4, #15
 8003d24:	3377      	adds	r3, #119	; 0x77
 8003d26:	e7df      	b.n	8003ce8 <_malloc_r+0xac>
 8003d28:	f240 5254 	movw	r2, #1364	; 0x554
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d804      	bhi.n	8003d3a <_malloc_r+0xfe>
 8003d30:	0ca3      	lsrs	r3, r4, #18
 8003d32:	337c      	adds	r3, #124	; 0x7c
 8003d34:	e7d8      	b.n	8003ce8 <_malloc_r+0xac>
 8003d36:	233f      	movs	r3, #63	; 0x3f
 8003d38:	e7d6      	b.n	8003ce8 <_malloc_r+0xac>
 8003d3a:	237e      	movs	r3, #126	; 0x7e
 8003d3c:	e7d4      	b.n	8003ce8 <_malloc_r+0xac>
 8003d3e:	2900      	cmp	r1, #0
 8003d40:	68f1      	ldr	r1, [r6, #12]
 8003d42:	db04      	blt.n	8003d4e <_malloc_r+0x112>
 8003d44:	68b3      	ldr	r3, [r6, #8]
 8003d46:	60d9      	str	r1, [r3, #12]
 8003d48:	608b      	str	r3, [r1, #8]
 8003d4a:	18b3      	adds	r3, r6, r2
 8003d4c:	e7a4      	b.n	8003c98 <_malloc_r+0x5c>
 8003d4e:	460e      	mov	r6, r1
 8003d50:	e7d0      	b.n	8003cf4 <_malloc_r+0xb8>
 8003d52:	2f00      	cmp	r7, #0
 8003d54:	616a      	str	r2, [r5, #20]
 8003d56:	612a      	str	r2, [r5, #16]
 8003d58:	db05      	blt.n	8003d66 <_malloc_r+0x12a>
 8003d5a:	4430      	add	r0, r6
 8003d5c:	6843      	ldr	r3, [r0, #4]
 8003d5e:	f043 0301 	orr.w	r3, r3, #1
 8003d62:	6043      	str	r3, [r0, #4]
 8003d64:	e79c      	b.n	8003ca0 <_malloc_r+0x64>
 8003d66:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003d6a:	d244      	bcs.n	8003df6 <_malloc_r+0x1ba>
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	08c0      	lsrs	r0, r0, #3
 8003d70:	1087      	asrs	r7, r0, #2
 8003d72:	fa02 f707 	lsl.w	r7, r2, r7
 8003d76:	686a      	ldr	r2, [r5, #4]
 8003d78:	3001      	adds	r0, #1
 8003d7a:	433a      	orrs	r2, r7
 8003d7c:	606a      	str	r2, [r5, #4]
 8003d7e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003d82:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003d86:	3a08      	subs	r2, #8
 8003d88:	60f2      	str	r2, [r6, #12]
 8003d8a:	60b7      	str	r7, [r6, #8]
 8003d8c:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003d90:	60fe      	str	r6, [r7, #12]
 8003d92:	2001      	movs	r0, #1
 8003d94:	109a      	asrs	r2, r3, #2
 8003d96:	fa00 f202 	lsl.w	r2, r0, r2
 8003d9a:	6868      	ldr	r0, [r5, #4]
 8003d9c:	4282      	cmp	r2, r0
 8003d9e:	f200 809f 	bhi.w	8003ee0 <_malloc_r+0x2a4>
 8003da2:	4202      	tst	r2, r0
 8003da4:	d106      	bne.n	8003db4 <_malloc_r+0x178>
 8003da6:	f023 0303 	bic.w	r3, r3, #3
 8003daa:	0052      	lsls	r2, r2, #1
 8003dac:	4202      	tst	r2, r0
 8003dae:	f103 0304 	add.w	r3, r3, #4
 8003db2:	d0fa      	beq.n	8003daa <_malloc_r+0x16e>
 8003db4:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003db8:	46e0      	mov	r8, ip
 8003dba:	469e      	mov	lr, r3
 8003dbc:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003dc0:	4546      	cmp	r6, r8
 8003dc2:	d153      	bne.n	8003e6c <_malloc_r+0x230>
 8003dc4:	f10e 0e01 	add.w	lr, lr, #1
 8003dc8:	f01e 0f03 	tst.w	lr, #3
 8003dcc:	f108 0808 	add.w	r8, r8, #8
 8003dd0:	d1f4      	bne.n	8003dbc <_malloc_r+0x180>
 8003dd2:	0798      	lsls	r0, r3, #30
 8003dd4:	d179      	bne.n	8003eca <_malloc_r+0x28e>
 8003dd6:	686b      	ldr	r3, [r5, #4]
 8003dd8:	ea23 0302 	bic.w	r3, r3, r2
 8003ddc:	606b      	str	r3, [r5, #4]
 8003dde:	6868      	ldr	r0, [r5, #4]
 8003de0:	0052      	lsls	r2, r2, #1
 8003de2:	4282      	cmp	r2, r0
 8003de4:	d87c      	bhi.n	8003ee0 <_malloc_r+0x2a4>
 8003de6:	2a00      	cmp	r2, #0
 8003de8:	d07a      	beq.n	8003ee0 <_malloc_r+0x2a4>
 8003dea:	4673      	mov	r3, lr
 8003dec:	4202      	tst	r2, r0
 8003dee:	d1e1      	bne.n	8003db4 <_malloc_r+0x178>
 8003df0:	3304      	adds	r3, #4
 8003df2:	0052      	lsls	r2, r2, #1
 8003df4:	e7fa      	b.n	8003dec <_malloc_r+0x1b0>
 8003df6:	0a42      	lsrs	r2, r0, #9
 8003df8:	2a04      	cmp	r2, #4
 8003dfa:	d815      	bhi.n	8003e28 <_malloc_r+0x1ec>
 8003dfc:	0982      	lsrs	r2, r0, #6
 8003dfe:	3238      	adds	r2, #56	; 0x38
 8003e00:	1c57      	adds	r7, r2, #1
 8003e02:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003e06:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003e0a:	45be      	cmp	lr, r7
 8003e0c:	d126      	bne.n	8003e5c <_malloc_r+0x220>
 8003e0e:	2001      	movs	r0, #1
 8003e10:	1092      	asrs	r2, r2, #2
 8003e12:	fa00 f202 	lsl.w	r2, r0, r2
 8003e16:	6868      	ldr	r0, [r5, #4]
 8003e18:	4310      	orrs	r0, r2
 8003e1a:	6068      	str	r0, [r5, #4]
 8003e1c:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003e20:	60b7      	str	r7, [r6, #8]
 8003e22:	f8ce 6008 	str.w	r6, [lr, #8]
 8003e26:	e7b3      	b.n	8003d90 <_malloc_r+0x154>
 8003e28:	2a14      	cmp	r2, #20
 8003e2a:	d801      	bhi.n	8003e30 <_malloc_r+0x1f4>
 8003e2c:	325b      	adds	r2, #91	; 0x5b
 8003e2e:	e7e7      	b.n	8003e00 <_malloc_r+0x1c4>
 8003e30:	2a54      	cmp	r2, #84	; 0x54
 8003e32:	d802      	bhi.n	8003e3a <_malloc_r+0x1fe>
 8003e34:	0b02      	lsrs	r2, r0, #12
 8003e36:	326e      	adds	r2, #110	; 0x6e
 8003e38:	e7e2      	b.n	8003e00 <_malloc_r+0x1c4>
 8003e3a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003e3e:	d802      	bhi.n	8003e46 <_malloc_r+0x20a>
 8003e40:	0bc2      	lsrs	r2, r0, #15
 8003e42:	3277      	adds	r2, #119	; 0x77
 8003e44:	e7dc      	b.n	8003e00 <_malloc_r+0x1c4>
 8003e46:	f240 5754 	movw	r7, #1364	; 0x554
 8003e4a:	42ba      	cmp	r2, r7
 8003e4c:	bf9a      	itte	ls
 8003e4e:	0c82      	lsrls	r2, r0, #18
 8003e50:	327c      	addls	r2, #124	; 0x7c
 8003e52:	227e      	movhi	r2, #126	; 0x7e
 8003e54:	e7d4      	b.n	8003e00 <_malloc_r+0x1c4>
 8003e56:	68bf      	ldr	r7, [r7, #8]
 8003e58:	45be      	cmp	lr, r7
 8003e5a:	d004      	beq.n	8003e66 <_malloc_r+0x22a>
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	f022 0203 	bic.w	r2, r2, #3
 8003e62:	4290      	cmp	r0, r2
 8003e64:	d3f7      	bcc.n	8003e56 <_malloc_r+0x21a>
 8003e66:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003e6a:	e7d7      	b.n	8003e1c <_malloc_r+0x1e0>
 8003e6c:	6870      	ldr	r0, [r6, #4]
 8003e6e:	68f7      	ldr	r7, [r6, #12]
 8003e70:	f020 0003 	bic.w	r0, r0, #3
 8003e74:	eba0 0a04 	sub.w	sl, r0, r4
 8003e78:	f1ba 0f0f 	cmp.w	sl, #15
 8003e7c:	dd10      	ble.n	8003ea0 <_malloc_r+0x264>
 8003e7e:	68b2      	ldr	r2, [r6, #8]
 8003e80:	1933      	adds	r3, r6, r4
 8003e82:	f044 0401 	orr.w	r4, r4, #1
 8003e86:	6074      	str	r4, [r6, #4]
 8003e88:	60d7      	str	r7, [r2, #12]
 8003e8a:	60ba      	str	r2, [r7, #8]
 8003e8c:	f04a 0201 	orr.w	r2, sl, #1
 8003e90:	616b      	str	r3, [r5, #20]
 8003e92:	612b      	str	r3, [r5, #16]
 8003e94:	60d9      	str	r1, [r3, #12]
 8003e96:	6099      	str	r1, [r3, #8]
 8003e98:	605a      	str	r2, [r3, #4]
 8003e9a:	f846 a000 	str.w	sl, [r6, r0]
 8003e9e:	e6ff      	b.n	8003ca0 <_malloc_r+0x64>
 8003ea0:	f1ba 0f00 	cmp.w	sl, #0
 8003ea4:	db0f      	blt.n	8003ec6 <_malloc_r+0x28a>
 8003ea6:	4430      	add	r0, r6
 8003ea8:	6843      	ldr	r3, [r0, #4]
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6043      	str	r3, [r0, #4]
 8003eb0:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003eb4:	4648      	mov	r0, r9
 8003eb6:	60df      	str	r7, [r3, #12]
 8003eb8:	60bb      	str	r3, [r7, #8]
 8003eba:	f000 f8eb 	bl	8004094 <__malloc_unlock>
 8003ebe:	4630      	mov	r0, r6
 8003ec0:	b003      	add	sp, #12
 8003ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ec6:	463e      	mov	r6, r7
 8003ec8:	e77a      	b.n	8003dc0 <_malloc_r+0x184>
 8003eca:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	4584      	cmp	ip, r0
 8003ed2:	f43f af7e 	beq.w	8003dd2 <_malloc_r+0x196>
 8003ed6:	e782      	b.n	8003dde <_malloc_r+0x1a2>
 8003ed8:	20000108 	.word	0x20000108
 8003edc:	20000110 	.word	0x20000110
 8003ee0:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003ee4:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003ee8:	f026 0603 	bic.w	r6, r6, #3
 8003eec:	42b4      	cmp	r4, r6
 8003eee:	d803      	bhi.n	8003ef8 <_malloc_r+0x2bc>
 8003ef0:	1b33      	subs	r3, r6, r4
 8003ef2:	2b0f      	cmp	r3, #15
 8003ef4:	f300 8095 	bgt.w	8004022 <_malloc_r+0x3e6>
 8003ef8:	4a4f      	ldr	r2, [pc, #316]	; (8004038 <_malloc_r+0x3fc>)
 8003efa:	eb0b 0306 	add.w	r3, fp, r6
 8003efe:	6817      	ldr	r7, [r2, #0]
 8003f00:	4a4e      	ldr	r2, [pc, #312]	; (800403c <_malloc_r+0x400>)
 8003f02:	3710      	adds	r7, #16
 8003f04:	6811      	ldr	r1, [r2, #0]
 8003f06:	4427      	add	r7, r4
 8003f08:	3101      	adds	r1, #1
 8003f0a:	d005      	beq.n	8003f18 <_malloc_r+0x2dc>
 8003f0c:	494c      	ldr	r1, [pc, #304]	; (8004040 <_malloc_r+0x404>)
 8003f0e:	3901      	subs	r1, #1
 8003f10:	440f      	add	r7, r1
 8003f12:	3101      	adds	r1, #1
 8003f14:	4249      	negs	r1, r1
 8003f16:	400f      	ands	r7, r1
 8003f18:	4639      	mov	r1, r7
 8003f1a:	4648      	mov	r0, r9
 8003f1c:	9201      	str	r2, [sp, #4]
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	f000 fb90 	bl	8004644 <_sbrk_r>
 8003f24:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003f28:	4680      	mov	r8, r0
 8003f2a:	d055      	beq.n	8003fd8 <_malloc_r+0x39c>
 8003f2c:	9b00      	ldr	r3, [sp, #0]
 8003f2e:	9a01      	ldr	r2, [sp, #4]
 8003f30:	4283      	cmp	r3, r0
 8003f32:	d901      	bls.n	8003f38 <_malloc_r+0x2fc>
 8003f34:	45ab      	cmp	fp, r5
 8003f36:	d14f      	bne.n	8003fd8 <_malloc_r+0x39c>
 8003f38:	4842      	ldr	r0, [pc, #264]	; (8004044 <_malloc_r+0x408>)
 8003f3a:	4543      	cmp	r3, r8
 8003f3c:	6801      	ldr	r1, [r0, #0]
 8003f3e:	4682      	mov	sl, r0
 8003f40:	eb07 0e01 	add.w	lr, r7, r1
 8003f44:	f8c0 e000 	str.w	lr, [r0]
 8003f48:	493f      	ldr	r1, [pc, #252]	; (8004048 <_malloc_r+0x40c>)
 8003f4a:	d113      	bne.n	8003f74 <_malloc_r+0x338>
 8003f4c:	420b      	tst	r3, r1
 8003f4e:	d111      	bne.n	8003f74 <_malloc_r+0x338>
 8003f50:	68ab      	ldr	r3, [r5, #8]
 8003f52:	443e      	add	r6, r7
 8003f54:	f046 0601 	orr.w	r6, r6, #1
 8003f58:	605e      	str	r6, [r3, #4]
 8003f5a:	4a3c      	ldr	r2, [pc, #240]	; (800404c <_malloc_r+0x410>)
 8003f5c:	f8da 3000 	ldr.w	r3, [sl]
 8003f60:	6811      	ldr	r1, [r2, #0]
 8003f62:	428b      	cmp	r3, r1
 8003f64:	bf88      	it	hi
 8003f66:	6013      	strhi	r3, [r2, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	; (8004050 <_malloc_r+0x414>)
 8003f6a:	6811      	ldr	r1, [r2, #0]
 8003f6c:	428b      	cmp	r3, r1
 8003f6e:	bf88      	it	hi
 8003f70:	6013      	strhi	r3, [r2, #0]
 8003f72:	e031      	b.n	8003fd8 <_malloc_r+0x39c>
 8003f74:	6810      	ldr	r0, [r2, #0]
 8003f76:	3001      	adds	r0, #1
 8003f78:	bf1b      	ittet	ne
 8003f7a:	eba8 0303 	subne.w	r3, r8, r3
 8003f7e:	4473      	addne	r3, lr
 8003f80:	f8c2 8000 	streq.w	r8, [r2]
 8003f84:	f8ca 3000 	strne.w	r3, [sl]
 8003f88:	f018 0007 	ands.w	r0, r8, #7
 8003f8c:	bf1c      	itt	ne
 8003f8e:	f1c0 0008 	rsbne	r0, r0, #8
 8003f92:	4480      	addne	r8, r0
 8003f94:	4b2a      	ldr	r3, [pc, #168]	; (8004040 <_malloc_r+0x404>)
 8003f96:	4447      	add	r7, r8
 8003f98:	4418      	add	r0, r3
 8003f9a:	400f      	ands	r7, r1
 8003f9c:	1bc7      	subs	r7, r0, r7
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4648      	mov	r0, r9
 8003fa2:	f000 fb4f 	bl	8004644 <_sbrk_r>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	bf04      	itt	eq
 8003faa:	4640      	moveq	r0, r8
 8003fac:	2700      	moveq	r7, #0
 8003fae:	f8da 3000 	ldr.w	r3, [sl]
 8003fb2:	eba0 0008 	sub.w	r0, r0, r8
 8003fb6:	443b      	add	r3, r7
 8003fb8:	4407      	add	r7, r0
 8003fba:	f047 0701 	orr.w	r7, r7, #1
 8003fbe:	45ab      	cmp	fp, r5
 8003fc0:	f8c5 8008 	str.w	r8, [r5, #8]
 8003fc4:	f8ca 3000 	str.w	r3, [sl]
 8003fc8:	f8c8 7004 	str.w	r7, [r8, #4]
 8003fcc:	d0c5      	beq.n	8003f5a <_malloc_r+0x31e>
 8003fce:	2e0f      	cmp	r6, #15
 8003fd0:	d810      	bhi.n	8003ff4 <_malloc_r+0x3b8>
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	f8c8 3004 	str.w	r3, [r8, #4]
 8003fd8:	68ab      	ldr	r3, [r5, #8]
 8003fda:	685a      	ldr	r2, [r3, #4]
 8003fdc:	f022 0203 	bic.w	r2, r2, #3
 8003fe0:	4294      	cmp	r4, r2
 8003fe2:	eba2 0304 	sub.w	r3, r2, r4
 8003fe6:	d801      	bhi.n	8003fec <_malloc_r+0x3b0>
 8003fe8:	2b0f      	cmp	r3, #15
 8003fea:	dc1a      	bgt.n	8004022 <_malloc_r+0x3e6>
 8003fec:	4648      	mov	r0, r9
 8003fee:	f000 f851 	bl	8004094 <__malloc_unlock>
 8003ff2:	e630      	b.n	8003c56 <_malloc_r+0x1a>
 8003ff4:	2205      	movs	r2, #5
 8003ff6:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003ffa:	3e0c      	subs	r6, #12
 8003ffc:	f026 0607 	bic.w	r6, r6, #7
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	4333      	orrs	r3, r6
 8004006:	f8cb 3004 	str.w	r3, [fp, #4]
 800400a:	2e0f      	cmp	r6, #15
 800400c:	eb0b 0306 	add.w	r3, fp, r6
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	609a      	str	r2, [r3, #8]
 8004014:	d9a1      	bls.n	8003f5a <_malloc_r+0x31e>
 8004016:	f10b 0108 	add.w	r1, fp, #8
 800401a:	4648      	mov	r0, r9
 800401c:	f000 fc20 	bl	8004860 <_free_r>
 8004020:	e79b      	b.n	8003f5a <_malloc_r+0x31e>
 8004022:	68ae      	ldr	r6, [r5, #8]
 8004024:	f044 0201 	orr.w	r2, r4, #1
 8004028:	f043 0301 	orr.w	r3, r3, #1
 800402c:	4434      	add	r4, r6
 800402e:	6072      	str	r2, [r6, #4]
 8004030:	60ac      	str	r4, [r5, #8]
 8004032:	6063      	str	r3, [r4, #4]
 8004034:	e634      	b.n	8003ca0 <_malloc_r+0x64>
 8004036:	bf00      	nop
 8004038:	200006d4 	.word	0x200006d4
 800403c:	20000510 	.word	0x20000510
 8004040:	00000080 	.word	0x00000080
 8004044:	200006a4 	.word	0x200006a4
 8004048:	0000007f 	.word	0x0000007f
 800404c:	200006cc 	.word	0x200006cc
 8004050:	200006d0 	.word	0x200006d0

08004054 <memchr>:
 8004054:	b510      	push	{r4, lr}
 8004056:	b2c9      	uxtb	r1, r1
 8004058:	4402      	add	r2, r0
 800405a:	4290      	cmp	r0, r2
 800405c:	4603      	mov	r3, r0
 800405e:	d101      	bne.n	8004064 <memchr+0x10>
 8004060:	2000      	movs	r0, #0
 8004062:	bd10      	pop	{r4, pc}
 8004064:	781c      	ldrb	r4, [r3, #0]
 8004066:	3001      	adds	r0, #1
 8004068:	428c      	cmp	r4, r1
 800406a:	d1f6      	bne.n	800405a <memchr+0x6>
 800406c:	4618      	mov	r0, r3
 800406e:	bd10      	pop	{r4, pc}

08004070 <memcpy>:
 8004070:	b510      	push	{r4, lr}
 8004072:	1e43      	subs	r3, r0, #1
 8004074:	440a      	add	r2, r1
 8004076:	4291      	cmp	r1, r2
 8004078:	d100      	bne.n	800407c <memcpy+0xc>
 800407a:	bd10      	pop	{r4, pc}
 800407c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004080:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004084:	e7f7      	b.n	8004076 <memcpy+0x6>
	...

08004088 <__malloc_lock>:
 8004088:	4801      	ldr	r0, [pc, #4]	; (8004090 <__malloc_lock+0x8>)
 800408a:	f000 bca5 	b.w	80049d8 <__retarget_lock_acquire_recursive>
 800408e:	bf00      	nop
 8004090:	200006e1 	.word	0x200006e1

08004094 <__malloc_unlock>:
 8004094:	4801      	ldr	r0, [pc, #4]	; (800409c <__malloc_unlock+0x8>)
 8004096:	f000 bca0 	b.w	80049da <__retarget_lock_release_recursive>
 800409a:	bf00      	nop
 800409c:	200006e1 	.word	0x200006e1

080040a0 <_Balloc>:
 80040a0:	b570      	push	{r4, r5, r6, lr}
 80040a2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80040a4:	4604      	mov	r4, r0
 80040a6:	460e      	mov	r6, r1
 80040a8:	b93d      	cbnz	r5, 80040ba <_Balloc+0x1a>
 80040aa:	2010      	movs	r0, #16
 80040ac:	f7ff fdbe 	bl	8003c2c <malloc>
 80040b0:	6260      	str	r0, [r4, #36]	; 0x24
 80040b2:	6045      	str	r5, [r0, #4]
 80040b4:	6085      	str	r5, [r0, #8]
 80040b6:	6005      	str	r5, [r0, #0]
 80040b8:	60c5      	str	r5, [r0, #12]
 80040ba:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80040bc:	68eb      	ldr	r3, [r5, #12]
 80040be:	b183      	cbz	r3, 80040e2 <_Balloc+0x42>
 80040c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80040c8:	b9b8      	cbnz	r0, 80040fa <_Balloc+0x5a>
 80040ca:	2101      	movs	r1, #1
 80040cc:	fa01 f506 	lsl.w	r5, r1, r6
 80040d0:	1d6a      	adds	r2, r5, #5
 80040d2:	0092      	lsls	r2, r2, #2
 80040d4:	4620      	mov	r0, r4
 80040d6:	f000 fb3f 	bl	8004758 <_calloc_r>
 80040da:	b160      	cbz	r0, 80040f6 <_Balloc+0x56>
 80040dc:	6046      	str	r6, [r0, #4]
 80040de:	6085      	str	r5, [r0, #8]
 80040e0:	e00e      	b.n	8004100 <_Balloc+0x60>
 80040e2:	2221      	movs	r2, #33	; 0x21
 80040e4:	2104      	movs	r1, #4
 80040e6:	4620      	mov	r0, r4
 80040e8:	f000 fb36 	bl	8004758 <_calloc_r>
 80040ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80040ee:	60e8      	str	r0, [r5, #12]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1e4      	bne.n	80040c0 <_Balloc+0x20>
 80040f6:	2000      	movs	r0, #0
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
 80040fa:	6802      	ldr	r2, [r0, #0]
 80040fc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8004100:	2300      	movs	r3, #0
 8004102:	6103      	str	r3, [r0, #16]
 8004104:	60c3      	str	r3, [r0, #12]
 8004106:	bd70      	pop	{r4, r5, r6, pc}

08004108 <_Bfree>:
 8004108:	b570      	push	{r4, r5, r6, lr}
 800410a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800410c:	4606      	mov	r6, r0
 800410e:	460d      	mov	r5, r1
 8004110:	b93c      	cbnz	r4, 8004122 <_Bfree+0x1a>
 8004112:	2010      	movs	r0, #16
 8004114:	f7ff fd8a 	bl	8003c2c <malloc>
 8004118:	6270      	str	r0, [r6, #36]	; 0x24
 800411a:	6044      	str	r4, [r0, #4]
 800411c:	6084      	str	r4, [r0, #8]
 800411e:	6004      	str	r4, [r0, #0]
 8004120:	60c4      	str	r4, [r0, #12]
 8004122:	b13d      	cbz	r5, 8004134 <_Bfree+0x2c>
 8004124:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8004126:	686a      	ldr	r2, [r5, #4]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800412e:	6029      	str	r1, [r5, #0]
 8004130:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8004134:	bd70      	pop	{r4, r5, r6, pc}

08004136 <__multadd>:
 8004136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800413a:	461f      	mov	r7, r3
 800413c:	4606      	mov	r6, r0
 800413e:	460c      	mov	r4, r1
 8004140:	2300      	movs	r3, #0
 8004142:	690d      	ldr	r5, [r1, #16]
 8004144:	f101 0e14 	add.w	lr, r1, #20
 8004148:	f8de 0000 	ldr.w	r0, [lr]
 800414c:	3301      	adds	r3, #1
 800414e:	b281      	uxth	r1, r0
 8004150:	fb02 7101 	mla	r1, r2, r1, r7
 8004154:	0c00      	lsrs	r0, r0, #16
 8004156:	0c0f      	lsrs	r7, r1, #16
 8004158:	fb02 7000 	mla	r0, r2, r0, r7
 800415c:	b289      	uxth	r1, r1
 800415e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8004162:	429d      	cmp	r5, r3
 8004164:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8004168:	f84e 1b04 	str.w	r1, [lr], #4
 800416c:	dcec      	bgt.n	8004148 <__multadd+0x12>
 800416e:	b1d7      	cbz	r7, 80041a6 <__multadd+0x70>
 8004170:	68a3      	ldr	r3, [r4, #8]
 8004172:	429d      	cmp	r5, r3
 8004174:	db12      	blt.n	800419c <__multadd+0x66>
 8004176:	6861      	ldr	r1, [r4, #4]
 8004178:	4630      	mov	r0, r6
 800417a:	3101      	adds	r1, #1
 800417c:	f7ff ff90 	bl	80040a0 <_Balloc>
 8004180:	4680      	mov	r8, r0
 8004182:	6922      	ldr	r2, [r4, #16]
 8004184:	f104 010c 	add.w	r1, r4, #12
 8004188:	3202      	adds	r2, #2
 800418a:	0092      	lsls	r2, r2, #2
 800418c:	300c      	adds	r0, #12
 800418e:	f7ff ff6f 	bl	8004070 <memcpy>
 8004192:	4621      	mov	r1, r4
 8004194:	4630      	mov	r0, r6
 8004196:	f7ff ffb7 	bl	8004108 <_Bfree>
 800419a:	4644      	mov	r4, r8
 800419c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80041a0:	3501      	adds	r5, #1
 80041a2:	615f      	str	r7, [r3, #20]
 80041a4:	6125      	str	r5, [r4, #16]
 80041a6:	4620      	mov	r0, r4
 80041a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080041ac <__hi0bits>:
 80041ac:	0c02      	lsrs	r2, r0, #16
 80041ae:	0412      	lsls	r2, r2, #16
 80041b0:	4603      	mov	r3, r0
 80041b2:	b9b2      	cbnz	r2, 80041e2 <__hi0bits+0x36>
 80041b4:	0403      	lsls	r3, r0, #16
 80041b6:	2010      	movs	r0, #16
 80041b8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80041bc:	bf04      	itt	eq
 80041be:	021b      	lsleq	r3, r3, #8
 80041c0:	3008      	addeq	r0, #8
 80041c2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80041c6:	bf04      	itt	eq
 80041c8:	011b      	lsleq	r3, r3, #4
 80041ca:	3004      	addeq	r0, #4
 80041cc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80041d0:	bf04      	itt	eq
 80041d2:	009b      	lsleq	r3, r3, #2
 80041d4:	3002      	addeq	r0, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	db06      	blt.n	80041e8 <__hi0bits+0x3c>
 80041da:	005b      	lsls	r3, r3, #1
 80041dc:	d503      	bpl.n	80041e6 <__hi0bits+0x3a>
 80041de:	3001      	adds	r0, #1
 80041e0:	4770      	bx	lr
 80041e2:	2000      	movs	r0, #0
 80041e4:	e7e8      	b.n	80041b8 <__hi0bits+0xc>
 80041e6:	2020      	movs	r0, #32
 80041e8:	4770      	bx	lr

080041ea <__lo0bits>:
 80041ea:	6803      	ldr	r3, [r0, #0]
 80041ec:	4601      	mov	r1, r0
 80041ee:	f013 0207 	ands.w	r2, r3, #7
 80041f2:	d00b      	beq.n	800420c <__lo0bits+0x22>
 80041f4:	07da      	lsls	r2, r3, #31
 80041f6:	d423      	bmi.n	8004240 <__lo0bits+0x56>
 80041f8:	0798      	lsls	r0, r3, #30
 80041fa:	bf49      	itett	mi
 80041fc:	085b      	lsrmi	r3, r3, #1
 80041fe:	089b      	lsrpl	r3, r3, #2
 8004200:	2001      	movmi	r0, #1
 8004202:	600b      	strmi	r3, [r1, #0]
 8004204:	bf5c      	itt	pl
 8004206:	600b      	strpl	r3, [r1, #0]
 8004208:	2002      	movpl	r0, #2
 800420a:	4770      	bx	lr
 800420c:	b298      	uxth	r0, r3
 800420e:	b9a8      	cbnz	r0, 800423c <__lo0bits+0x52>
 8004210:	2010      	movs	r0, #16
 8004212:	0c1b      	lsrs	r3, r3, #16
 8004214:	f013 0fff 	tst.w	r3, #255	; 0xff
 8004218:	bf04      	itt	eq
 800421a:	0a1b      	lsreq	r3, r3, #8
 800421c:	3008      	addeq	r0, #8
 800421e:	071a      	lsls	r2, r3, #28
 8004220:	bf04      	itt	eq
 8004222:	091b      	lsreq	r3, r3, #4
 8004224:	3004      	addeq	r0, #4
 8004226:	079a      	lsls	r2, r3, #30
 8004228:	bf04      	itt	eq
 800422a:	089b      	lsreq	r3, r3, #2
 800422c:	3002      	addeq	r0, #2
 800422e:	07da      	lsls	r2, r3, #31
 8004230:	d402      	bmi.n	8004238 <__lo0bits+0x4e>
 8004232:	085b      	lsrs	r3, r3, #1
 8004234:	d006      	beq.n	8004244 <__lo0bits+0x5a>
 8004236:	3001      	adds	r0, #1
 8004238:	600b      	str	r3, [r1, #0]
 800423a:	4770      	bx	lr
 800423c:	4610      	mov	r0, r2
 800423e:	e7e9      	b.n	8004214 <__lo0bits+0x2a>
 8004240:	2000      	movs	r0, #0
 8004242:	4770      	bx	lr
 8004244:	2020      	movs	r0, #32
 8004246:	4770      	bx	lr

08004248 <__i2b>:
 8004248:	b510      	push	{r4, lr}
 800424a:	460c      	mov	r4, r1
 800424c:	2101      	movs	r1, #1
 800424e:	f7ff ff27 	bl	80040a0 <_Balloc>
 8004252:	2201      	movs	r2, #1
 8004254:	6144      	str	r4, [r0, #20]
 8004256:	6102      	str	r2, [r0, #16]
 8004258:	bd10      	pop	{r4, pc}

0800425a <__multiply>:
 800425a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800425e:	4614      	mov	r4, r2
 8004260:	690a      	ldr	r2, [r1, #16]
 8004262:	6923      	ldr	r3, [r4, #16]
 8004264:	4689      	mov	r9, r1
 8004266:	429a      	cmp	r2, r3
 8004268:	bfbe      	ittt	lt
 800426a:	460b      	movlt	r3, r1
 800426c:	46a1      	movlt	r9, r4
 800426e:	461c      	movlt	r4, r3
 8004270:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8004274:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8004278:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800427c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8004280:	eb07 060a 	add.w	r6, r7, sl
 8004284:	429e      	cmp	r6, r3
 8004286:	bfc8      	it	gt
 8004288:	3101      	addgt	r1, #1
 800428a:	f7ff ff09 	bl	80040a0 <_Balloc>
 800428e:	f100 0514 	add.w	r5, r0, #20
 8004292:	462b      	mov	r3, r5
 8004294:	2200      	movs	r2, #0
 8004296:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800429a:	4543      	cmp	r3, r8
 800429c:	d316      	bcc.n	80042cc <__multiply+0x72>
 800429e:	f104 0214 	add.w	r2, r4, #20
 80042a2:	f109 0114 	add.w	r1, r9, #20
 80042a6:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80042aa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	9c01      	ldr	r4, [sp, #4]
 80042b2:	4613      	mov	r3, r2
 80042b4:	4294      	cmp	r4, r2
 80042b6:	d80c      	bhi.n	80042d2 <__multiply+0x78>
 80042b8:	2e00      	cmp	r6, #0
 80042ba:	dd03      	ble.n	80042c4 <__multiply+0x6a>
 80042bc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d054      	beq.n	800436e <__multiply+0x114>
 80042c4:	6106      	str	r6, [r0, #16]
 80042c6:	b003      	add	sp, #12
 80042c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042cc:	f843 2b04 	str.w	r2, [r3], #4
 80042d0:	e7e3      	b.n	800429a <__multiply+0x40>
 80042d2:	f8b3 a000 	ldrh.w	sl, [r3]
 80042d6:	3204      	adds	r2, #4
 80042d8:	f1ba 0f00 	cmp.w	sl, #0
 80042dc:	d020      	beq.n	8004320 <__multiply+0xc6>
 80042de:	46ae      	mov	lr, r5
 80042e0:	4689      	mov	r9, r1
 80042e2:	f04f 0c00 	mov.w	ip, #0
 80042e6:	f859 4b04 	ldr.w	r4, [r9], #4
 80042ea:	f8be b000 	ldrh.w	fp, [lr]
 80042ee:	b2a3      	uxth	r3, r4
 80042f0:	fb0a b303 	mla	r3, sl, r3, fp
 80042f4:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80042f8:	f8de 4000 	ldr.w	r4, [lr]
 80042fc:	4463      	add	r3, ip
 80042fe:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004302:	fb0a c40b 	mla	r4, sl, fp, ip
 8004306:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800430a:	b29b      	uxth	r3, r3
 800430c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004310:	454f      	cmp	r7, r9
 8004312:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8004316:	f84e 3b04 	str.w	r3, [lr], #4
 800431a:	d8e4      	bhi.n	80042e6 <__multiply+0x8c>
 800431c:	f8ce c000 	str.w	ip, [lr]
 8004320:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8004324:	f1b9 0f00 	cmp.w	r9, #0
 8004328:	d01f      	beq.n	800436a <__multiply+0x110>
 800432a:	46ae      	mov	lr, r5
 800432c:	468c      	mov	ip, r1
 800432e:	f04f 0a00 	mov.w	sl, #0
 8004332:	682b      	ldr	r3, [r5, #0]
 8004334:	f8bc 4000 	ldrh.w	r4, [ip]
 8004338:	f8be b002 	ldrh.w	fp, [lr, #2]
 800433c:	b29b      	uxth	r3, r3
 800433e:	fb09 b404 	mla	r4, r9, r4, fp
 8004342:	44a2      	add	sl, r4
 8004344:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8004348:	f84e 3b04 	str.w	r3, [lr], #4
 800434c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004350:	f8be 4000 	ldrh.w	r4, [lr]
 8004354:	0c1b      	lsrs	r3, r3, #16
 8004356:	fb09 4303 	mla	r3, r9, r3, r4
 800435a:	4567      	cmp	r7, ip
 800435c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8004360:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004364:	d8e6      	bhi.n	8004334 <__multiply+0xda>
 8004366:	f8ce 3000 	str.w	r3, [lr]
 800436a:	3504      	adds	r5, #4
 800436c:	e7a0      	b.n	80042b0 <__multiply+0x56>
 800436e:	3e01      	subs	r6, #1
 8004370:	e7a2      	b.n	80042b8 <__multiply+0x5e>
	...

08004374 <__pow5mult>:
 8004374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004378:	4615      	mov	r5, r2
 800437a:	f012 0203 	ands.w	r2, r2, #3
 800437e:	4606      	mov	r6, r0
 8004380:	460f      	mov	r7, r1
 8004382:	d007      	beq.n	8004394 <__pow5mult+0x20>
 8004384:	4c21      	ldr	r4, [pc, #132]	; (800440c <__pow5mult+0x98>)
 8004386:	3a01      	subs	r2, #1
 8004388:	2300      	movs	r3, #0
 800438a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800438e:	f7ff fed2 	bl	8004136 <__multadd>
 8004392:	4607      	mov	r7, r0
 8004394:	10ad      	asrs	r5, r5, #2
 8004396:	d035      	beq.n	8004404 <__pow5mult+0x90>
 8004398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800439a:	b93c      	cbnz	r4, 80043ac <__pow5mult+0x38>
 800439c:	2010      	movs	r0, #16
 800439e:	f7ff fc45 	bl	8003c2c <malloc>
 80043a2:	6270      	str	r0, [r6, #36]	; 0x24
 80043a4:	6044      	str	r4, [r0, #4]
 80043a6:	6084      	str	r4, [r0, #8]
 80043a8:	6004      	str	r4, [r0, #0]
 80043aa:	60c4      	str	r4, [r0, #12]
 80043ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80043b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80043b4:	b94c      	cbnz	r4, 80043ca <__pow5mult+0x56>
 80043b6:	f240 2171 	movw	r1, #625	; 0x271
 80043ba:	4630      	mov	r0, r6
 80043bc:	f7ff ff44 	bl	8004248 <__i2b>
 80043c0:	2300      	movs	r3, #0
 80043c2:	4604      	mov	r4, r0
 80043c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80043c8:	6003      	str	r3, [r0, #0]
 80043ca:	f04f 0800 	mov.w	r8, #0
 80043ce:	07eb      	lsls	r3, r5, #31
 80043d0:	d50a      	bpl.n	80043e8 <__pow5mult+0x74>
 80043d2:	4639      	mov	r1, r7
 80043d4:	4622      	mov	r2, r4
 80043d6:	4630      	mov	r0, r6
 80043d8:	f7ff ff3f 	bl	800425a <__multiply>
 80043dc:	4681      	mov	r9, r0
 80043de:	4639      	mov	r1, r7
 80043e0:	4630      	mov	r0, r6
 80043e2:	f7ff fe91 	bl	8004108 <_Bfree>
 80043e6:	464f      	mov	r7, r9
 80043e8:	106d      	asrs	r5, r5, #1
 80043ea:	d00b      	beq.n	8004404 <__pow5mult+0x90>
 80043ec:	6820      	ldr	r0, [r4, #0]
 80043ee:	b938      	cbnz	r0, 8004400 <__pow5mult+0x8c>
 80043f0:	4622      	mov	r2, r4
 80043f2:	4621      	mov	r1, r4
 80043f4:	4630      	mov	r0, r6
 80043f6:	f7ff ff30 	bl	800425a <__multiply>
 80043fa:	6020      	str	r0, [r4, #0]
 80043fc:	f8c0 8000 	str.w	r8, [r0]
 8004400:	4604      	mov	r4, r0
 8004402:	e7e4      	b.n	80043ce <__pow5mult+0x5a>
 8004404:	4638      	mov	r0, r7
 8004406:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800440a:	bf00      	nop
 800440c:	08004f10 	.word	0x08004f10

08004410 <__lshift>:
 8004410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004414:	460c      	mov	r4, r1
 8004416:	4607      	mov	r7, r0
 8004418:	4616      	mov	r6, r2
 800441a:	6923      	ldr	r3, [r4, #16]
 800441c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004420:	eb0a 0903 	add.w	r9, sl, r3
 8004424:	6849      	ldr	r1, [r1, #4]
 8004426:	68a3      	ldr	r3, [r4, #8]
 8004428:	f109 0501 	add.w	r5, r9, #1
 800442c:	42ab      	cmp	r3, r5
 800442e:	db31      	blt.n	8004494 <__lshift+0x84>
 8004430:	4638      	mov	r0, r7
 8004432:	f7ff fe35 	bl	80040a0 <_Balloc>
 8004436:	2200      	movs	r2, #0
 8004438:	4680      	mov	r8, r0
 800443a:	4611      	mov	r1, r2
 800443c:	f100 0314 	add.w	r3, r0, #20
 8004440:	4552      	cmp	r2, sl
 8004442:	db2a      	blt.n	800449a <__lshift+0x8a>
 8004444:	6920      	ldr	r0, [r4, #16]
 8004446:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800444a:	f104 0114 	add.w	r1, r4, #20
 800444e:	f016 021f 	ands.w	r2, r6, #31
 8004452:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8004456:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800445a:	d022      	beq.n	80044a2 <__lshift+0x92>
 800445c:	2000      	movs	r0, #0
 800445e:	f1c2 0c20 	rsb	ip, r2, #32
 8004462:	680e      	ldr	r6, [r1, #0]
 8004464:	4096      	lsls	r6, r2
 8004466:	4330      	orrs	r0, r6
 8004468:	f843 0b04 	str.w	r0, [r3], #4
 800446c:	f851 0b04 	ldr.w	r0, [r1], #4
 8004470:	458e      	cmp	lr, r1
 8004472:	fa20 f00c 	lsr.w	r0, r0, ip
 8004476:	d8f4      	bhi.n	8004462 <__lshift+0x52>
 8004478:	6018      	str	r0, [r3, #0]
 800447a:	b108      	cbz	r0, 8004480 <__lshift+0x70>
 800447c:	f109 0502 	add.w	r5, r9, #2
 8004480:	3d01      	subs	r5, #1
 8004482:	4638      	mov	r0, r7
 8004484:	f8c8 5010 	str.w	r5, [r8, #16]
 8004488:	4621      	mov	r1, r4
 800448a:	f7ff fe3d 	bl	8004108 <_Bfree>
 800448e:	4640      	mov	r0, r8
 8004490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004494:	3101      	adds	r1, #1
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	e7c8      	b.n	800442c <__lshift+0x1c>
 800449a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800449e:	3201      	adds	r2, #1
 80044a0:	e7ce      	b.n	8004440 <__lshift+0x30>
 80044a2:	3b04      	subs	r3, #4
 80044a4:	f851 2b04 	ldr.w	r2, [r1], #4
 80044a8:	458e      	cmp	lr, r1
 80044aa:	f843 2f04 	str.w	r2, [r3, #4]!
 80044ae:	d8f9      	bhi.n	80044a4 <__lshift+0x94>
 80044b0:	e7e6      	b.n	8004480 <__lshift+0x70>

080044b2 <__mcmp>:
 80044b2:	6903      	ldr	r3, [r0, #16]
 80044b4:	690a      	ldr	r2, [r1, #16]
 80044b6:	b530      	push	{r4, r5, lr}
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	d10c      	bne.n	80044d6 <__mcmp+0x24>
 80044bc:	0092      	lsls	r2, r2, #2
 80044be:	3014      	adds	r0, #20
 80044c0:	3114      	adds	r1, #20
 80044c2:	1884      	adds	r4, r0, r2
 80044c4:	4411      	add	r1, r2
 80044c6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80044ca:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80044ce:	4295      	cmp	r5, r2
 80044d0:	d003      	beq.n	80044da <__mcmp+0x28>
 80044d2:	d305      	bcc.n	80044e0 <__mcmp+0x2e>
 80044d4:	2301      	movs	r3, #1
 80044d6:	4618      	mov	r0, r3
 80044d8:	bd30      	pop	{r4, r5, pc}
 80044da:	42a0      	cmp	r0, r4
 80044dc:	d3f3      	bcc.n	80044c6 <__mcmp+0x14>
 80044de:	e7fa      	b.n	80044d6 <__mcmp+0x24>
 80044e0:	f04f 33ff 	mov.w	r3, #4294967295
 80044e4:	e7f7      	b.n	80044d6 <__mcmp+0x24>

080044e6 <__mdiff>:
 80044e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ea:	460d      	mov	r5, r1
 80044ec:	4607      	mov	r7, r0
 80044ee:	4611      	mov	r1, r2
 80044f0:	4628      	mov	r0, r5
 80044f2:	4614      	mov	r4, r2
 80044f4:	f7ff ffdd 	bl	80044b2 <__mcmp>
 80044f8:	1e06      	subs	r6, r0, #0
 80044fa:	d108      	bne.n	800450e <__mdiff+0x28>
 80044fc:	4631      	mov	r1, r6
 80044fe:	4638      	mov	r0, r7
 8004500:	f7ff fdce 	bl	80040a0 <_Balloc>
 8004504:	2301      	movs	r3, #1
 8004506:	6146      	str	r6, [r0, #20]
 8004508:	6103      	str	r3, [r0, #16]
 800450a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800450e:	bfa4      	itt	ge
 8004510:	4623      	movge	r3, r4
 8004512:	462c      	movge	r4, r5
 8004514:	4638      	mov	r0, r7
 8004516:	6861      	ldr	r1, [r4, #4]
 8004518:	bfa6      	itte	ge
 800451a:	461d      	movge	r5, r3
 800451c:	2600      	movge	r6, #0
 800451e:	2601      	movlt	r6, #1
 8004520:	f7ff fdbe 	bl	80040a0 <_Balloc>
 8004524:	f04f 0c00 	mov.w	ip, #0
 8004528:	60c6      	str	r6, [r0, #12]
 800452a:	692b      	ldr	r3, [r5, #16]
 800452c:	6926      	ldr	r6, [r4, #16]
 800452e:	f104 0214 	add.w	r2, r4, #20
 8004532:	f105 0914 	add.w	r9, r5, #20
 8004536:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800453a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800453e:	f100 0114 	add.w	r1, r0, #20
 8004542:	f852 ab04 	ldr.w	sl, [r2], #4
 8004546:	f859 5b04 	ldr.w	r5, [r9], #4
 800454a:	fa1f f38a 	uxth.w	r3, sl
 800454e:	4463      	add	r3, ip
 8004550:	b2ac      	uxth	r4, r5
 8004552:	1b1b      	subs	r3, r3, r4
 8004554:	0c2c      	lsrs	r4, r5, #16
 8004556:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800455a:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800455e:	b29b      	uxth	r3, r3
 8004560:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8004564:	45c8      	cmp	r8, r9
 8004566:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800456a:	4696      	mov	lr, r2
 800456c:	f841 4b04 	str.w	r4, [r1], #4
 8004570:	d8e7      	bhi.n	8004542 <__mdiff+0x5c>
 8004572:	45be      	cmp	lr, r7
 8004574:	d305      	bcc.n	8004582 <__mdiff+0x9c>
 8004576:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800457a:	b18b      	cbz	r3, 80045a0 <__mdiff+0xba>
 800457c:	6106      	str	r6, [r0, #16]
 800457e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004582:	f85e 4b04 	ldr.w	r4, [lr], #4
 8004586:	b2a2      	uxth	r2, r4
 8004588:	4462      	add	r2, ip
 800458a:	1413      	asrs	r3, r2, #16
 800458c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8004590:	b292      	uxth	r2, r2
 8004592:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004596:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800459a:	f841 2b04 	str.w	r2, [r1], #4
 800459e:	e7e8      	b.n	8004572 <__mdiff+0x8c>
 80045a0:	3e01      	subs	r6, #1
 80045a2:	e7e8      	b.n	8004576 <__mdiff+0x90>

080045a4 <__d2b>:
 80045a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80045a8:	461c      	mov	r4, r3
 80045aa:	2101      	movs	r1, #1
 80045ac:	4690      	mov	r8, r2
 80045ae:	9e08      	ldr	r6, [sp, #32]
 80045b0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80045b2:	f7ff fd75 	bl	80040a0 <_Balloc>
 80045b6:	f3c4 0213 	ubfx	r2, r4, #0, #20
 80045ba:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80045be:	4607      	mov	r7, r0
 80045c0:	bb34      	cbnz	r4, 8004610 <__d2b+0x6c>
 80045c2:	9201      	str	r2, [sp, #4]
 80045c4:	f1b8 0f00 	cmp.w	r8, #0
 80045c8:	d027      	beq.n	800461a <__d2b+0x76>
 80045ca:	a802      	add	r0, sp, #8
 80045cc:	f840 8d08 	str.w	r8, [r0, #-8]!
 80045d0:	f7ff fe0b 	bl	80041ea <__lo0bits>
 80045d4:	9900      	ldr	r1, [sp, #0]
 80045d6:	b1f0      	cbz	r0, 8004616 <__d2b+0x72>
 80045d8:	9a01      	ldr	r2, [sp, #4]
 80045da:	f1c0 0320 	rsb	r3, r0, #32
 80045de:	fa02 f303 	lsl.w	r3, r2, r3
 80045e2:	430b      	orrs	r3, r1
 80045e4:	40c2      	lsrs	r2, r0
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	9201      	str	r2, [sp, #4]
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2102      	movne	r1, #2
 80045f2:	2101      	moveq	r1, #1
 80045f4:	61bb      	str	r3, [r7, #24]
 80045f6:	6139      	str	r1, [r7, #16]
 80045f8:	b1c4      	cbz	r4, 800462c <__d2b+0x88>
 80045fa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80045fe:	4404      	add	r4, r0
 8004600:	6034      	str	r4, [r6, #0]
 8004602:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8004606:	6028      	str	r0, [r5, #0]
 8004608:	4638      	mov	r0, r7
 800460a:	b002      	add	sp, #8
 800460c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004610:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004614:	e7d5      	b.n	80045c2 <__d2b+0x1e>
 8004616:	6179      	str	r1, [r7, #20]
 8004618:	e7e7      	b.n	80045ea <__d2b+0x46>
 800461a:	a801      	add	r0, sp, #4
 800461c:	f7ff fde5 	bl	80041ea <__lo0bits>
 8004620:	2101      	movs	r1, #1
 8004622:	9b01      	ldr	r3, [sp, #4]
 8004624:	6139      	str	r1, [r7, #16]
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	3020      	adds	r0, #32
 800462a:	e7e5      	b.n	80045f8 <__d2b+0x54>
 800462c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8004630:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8004634:	6030      	str	r0, [r6, #0]
 8004636:	6918      	ldr	r0, [r3, #16]
 8004638:	f7ff fdb8 	bl	80041ac <__hi0bits>
 800463c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8004640:	e7e1      	b.n	8004606 <__d2b+0x62>
	...

08004644 <_sbrk_r>:
 8004644:	b538      	push	{r3, r4, r5, lr}
 8004646:	2300      	movs	r3, #0
 8004648:	4c05      	ldr	r4, [pc, #20]	; (8004660 <_sbrk_r+0x1c>)
 800464a:	4605      	mov	r5, r0
 800464c:	4608      	mov	r0, r1
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	f000 fb88 	bl	8004d64 <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d102      	bne.n	800465e <_sbrk_r+0x1a>
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	b103      	cbz	r3, 800465e <_sbrk_r+0x1a>
 800465c:	602b      	str	r3, [r5, #0]
 800465e:	bd38      	pop	{r3, r4, r5, pc}
 8004660:	200006e8 	.word	0x200006e8

08004664 <__ssprint_r>:
 8004664:	6893      	ldr	r3, [r2, #8]
 8004666:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466a:	4681      	mov	r9, r0
 800466c:	460c      	mov	r4, r1
 800466e:	4617      	mov	r7, r2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d060      	beq.n	8004736 <__ssprint_r+0xd2>
 8004674:	f04f 0b00 	mov.w	fp, #0
 8004678:	465e      	mov	r6, fp
 800467a:	f8d2 a000 	ldr.w	sl, [r2]
 800467e:	b356      	cbz	r6, 80046d6 <__ssprint_r+0x72>
 8004680:	68a3      	ldr	r3, [r4, #8]
 8004682:	429e      	cmp	r6, r3
 8004684:	d344      	bcc.n	8004710 <__ssprint_r+0xac>
 8004686:	89a2      	ldrh	r2, [r4, #12]
 8004688:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800468c:	d03e      	beq.n	800470c <__ssprint_r+0xa8>
 800468e:	2302      	movs	r3, #2
 8004690:	6825      	ldr	r5, [r4, #0]
 8004692:	6921      	ldr	r1, [r4, #16]
 8004694:	eba5 0801 	sub.w	r8, r5, r1
 8004698:	6965      	ldr	r5, [r4, #20]
 800469a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800469e:	fb95 f5f3 	sdiv	r5, r5, r3
 80046a2:	f108 0301 	add.w	r3, r8, #1
 80046a6:	4433      	add	r3, r6
 80046a8:	429d      	cmp	r5, r3
 80046aa:	bf38      	it	cc
 80046ac:	461d      	movcc	r5, r3
 80046ae:	0553      	lsls	r3, r2, #21
 80046b0:	d546      	bpl.n	8004740 <__ssprint_r+0xdc>
 80046b2:	4629      	mov	r1, r5
 80046b4:	4648      	mov	r0, r9
 80046b6:	f7ff fac1 	bl	8003c3c <_malloc_r>
 80046ba:	b998      	cbnz	r0, 80046e4 <__ssprint_r+0x80>
 80046bc:	230c      	movs	r3, #12
 80046be:	f8c9 3000 	str.w	r3, [r9]
 80046c2:	89a3      	ldrh	r3, [r4, #12]
 80046c4:	f04f 30ff 	mov.w	r0, #4294967295
 80046c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046cc:	81a3      	strh	r3, [r4, #12]
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e031      	b.n	800473a <__ssprint_r+0xd6>
 80046d6:	f8da b000 	ldr.w	fp, [sl]
 80046da:	f8da 6004 	ldr.w	r6, [sl, #4]
 80046de:	f10a 0a08 	add.w	sl, sl, #8
 80046e2:	e7cc      	b.n	800467e <__ssprint_r+0x1a>
 80046e4:	4642      	mov	r2, r8
 80046e6:	6921      	ldr	r1, [r4, #16]
 80046e8:	9001      	str	r0, [sp, #4]
 80046ea:	f7ff fcc1 	bl	8004070 <memcpy>
 80046ee:	89a2      	ldrh	r2, [r4, #12]
 80046f0:	9b01      	ldr	r3, [sp, #4]
 80046f2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 80046f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80046fa:	81a2      	strh	r2, [r4, #12]
 80046fc:	6123      	str	r3, [r4, #16]
 80046fe:	4443      	add	r3, r8
 8004700:	6023      	str	r3, [r4, #0]
 8004702:	4633      	mov	r3, r6
 8004704:	6165      	str	r5, [r4, #20]
 8004706:	eba5 0508 	sub.w	r5, r5, r8
 800470a:	60a5      	str	r5, [r4, #8]
 800470c:	429e      	cmp	r6, r3
 800470e:	d200      	bcs.n	8004712 <__ssprint_r+0xae>
 8004710:	4633      	mov	r3, r6
 8004712:	461a      	mov	r2, r3
 8004714:	4659      	mov	r1, fp
 8004716:	6820      	ldr	r0, [r4, #0]
 8004718:	9301      	str	r3, [sp, #4]
 800471a:	f000 f971 	bl	8004a00 <memmove>
 800471e:	68a2      	ldr	r2, [r4, #8]
 8004720:	9b01      	ldr	r3, [sp, #4]
 8004722:	1ad2      	subs	r2, r2, r3
 8004724:	60a2      	str	r2, [r4, #8]
 8004726:	6822      	ldr	r2, [r4, #0]
 8004728:	4413      	add	r3, r2
 800472a:	6023      	str	r3, [r4, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	1b9e      	subs	r6, r3, r6
 8004730:	60be      	str	r6, [r7, #8]
 8004732:	2e00      	cmp	r6, #0
 8004734:	d1cf      	bne.n	80046d6 <__ssprint_r+0x72>
 8004736:	2000      	movs	r0, #0
 8004738:	6078      	str	r0, [r7, #4]
 800473a:	b003      	add	sp, #12
 800473c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004740:	462a      	mov	r2, r5
 8004742:	4648      	mov	r0, r9
 8004744:	f000 f97e 	bl	8004a44 <_realloc_r>
 8004748:	4603      	mov	r3, r0
 800474a:	2800      	cmp	r0, #0
 800474c:	d1d6      	bne.n	80046fc <__ssprint_r+0x98>
 800474e:	6921      	ldr	r1, [r4, #16]
 8004750:	4648      	mov	r0, r9
 8004752:	f000 f885 	bl	8004860 <_free_r>
 8004756:	e7b1      	b.n	80046bc <__ssprint_r+0x58>

08004758 <_calloc_r>:
 8004758:	b510      	push	{r4, lr}
 800475a:	4351      	muls	r1, r2
 800475c:	f7ff fa6e 	bl	8003c3c <_malloc_r>
 8004760:	4604      	mov	r4, r0
 8004762:	b198      	cbz	r0, 800478c <_calloc_r+0x34>
 8004764:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8004768:	f022 0203 	bic.w	r2, r2, #3
 800476c:	3a04      	subs	r2, #4
 800476e:	2a24      	cmp	r2, #36	; 0x24
 8004770:	d81b      	bhi.n	80047aa <_calloc_r+0x52>
 8004772:	2a13      	cmp	r2, #19
 8004774:	d917      	bls.n	80047a6 <_calloc_r+0x4e>
 8004776:	2100      	movs	r1, #0
 8004778:	2a1b      	cmp	r2, #27
 800477a:	6001      	str	r1, [r0, #0]
 800477c:	6041      	str	r1, [r0, #4]
 800477e:	d807      	bhi.n	8004790 <_calloc_r+0x38>
 8004780:	f100 0308 	add.w	r3, r0, #8
 8004784:	2200      	movs	r2, #0
 8004786:	601a      	str	r2, [r3, #0]
 8004788:	605a      	str	r2, [r3, #4]
 800478a:	609a      	str	r2, [r3, #8]
 800478c:	4620      	mov	r0, r4
 800478e:	bd10      	pop	{r4, pc}
 8004790:	2a24      	cmp	r2, #36	; 0x24
 8004792:	6081      	str	r1, [r0, #8]
 8004794:	60c1      	str	r1, [r0, #12]
 8004796:	bf11      	iteee	ne
 8004798:	f100 0310 	addne.w	r3, r0, #16
 800479c:	6101      	streq	r1, [r0, #16]
 800479e:	f100 0318 	addeq.w	r3, r0, #24
 80047a2:	6141      	streq	r1, [r0, #20]
 80047a4:	e7ee      	b.n	8004784 <_calloc_r+0x2c>
 80047a6:	4603      	mov	r3, r0
 80047a8:	e7ec      	b.n	8004784 <_calloc_r+0x2c>
 80047aa:	2100      	movs	r1, #0
 80047ac:	f000 f942 	bl	8004a34 <memset>
 80047b0:	e7ec      	b.n	800478c <_calloc_r+0x34>
	...

080047b4 <_malloc_trim_r>:
 80047b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047b8:	4689      	mov	r9, r1
 80047ba:	4f25      	ldr	r7, [pc, #148]	; (8004850 <_malloc_trim_r+0x9c>)
 80047bc:	4606      	mov	r6, r0
 80047be:	f7ff fc63 	bl	8004088 <__malloc_lock>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	f8df 8094 	ldr.w	r8, [pc, #148]	; 800485c <_malloc_trim_r+0xa8>
 80047c8:	685d      	ldr	r5, [r3, #4]
 80047ca:	f1a8 0411 	sub.w	r4, r8, #17
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	eba4 0409 	sub.w	r4, r4, r9
 80047d6:	442c      	add	r4, r5
 80047d8:	fbb4 f4f8 	udiv	r4, r4, r8
 80047dc:	3c01      	subs	r4, #1
 80047de:	fb08 f404 	mul.w	r4, r8, r4
 80047e2:	4544      	cmp	r4, r8
 80047e4:	da05      	bge.n	80047f2 <_malloc_trim_r+0x3e>
 80047e6:	4630      	mov	r0, r6
 80047e8:	f7ff fc54 	bl	8004094 <__malloc_unlock>
 80047ec:	2000      	movs	r0, #0
 80047ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047f2:	2100      	movs	r1, #0
 80047f4:	4630      	mov	r0, r6
 80047f6:	f7ff ff25 	bl	8004644 <_sbrk_r>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	442b      	add	r3, r5
 80047fe:	4298      	cmp	r0, r3
 8004800:	d1f1      	bne.n	80047e6 <_malloc_trim_r+0x32>
 8004802:	4261      	negs	r1, r4
 8004804:	4630      	mov	r0, r6
 8004806:	f7ff ff1d 	bl	8004644 <_sbrk_r>
 800480a:	3001      	adds	r0, #1
 800480c:	d110      	bne.n	8004830 <_malloc_trim_r+0x7c>
 800480e:	2100      	movs	r1, #0
 8004810:	4630      	mov	r0, r6
 8004812:	f7ff ff17 	bl	8004644 <_sbrk_r>
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	1a83      	subs	r3, r0, r2
 800481a:	2b0f      	cmp	r3, #15
 800481c:	dde3      	ble.n	80047e6 <_malloc_trim_r+0x32>
 800481e:	490d      	ldr	r1, [pc, #52]	; (8004854 <_malloc_trim_r+0xa0>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6809      	ldr	r1, [r1, #0]
 8004826:	6053      	str	r3, [r2, #4]
 8004828:	1a40      	subs	r0, r0, r1
 800482a:	490b      	ldr	r1, [pc, #44]	; (8004858 <_malloc_trim_r+0xa4>)
 800482c:	6008      	str	r0, [r1, #0]
 800482e:	e7da      	b.n	80047e6 <_malloc_trim_r+0x32>
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <_malloc_trim_r+0xa4>)
 8004834:	1b2d      	subs	r5, r5, r4
 8004836:	f045 0501 	orr.w	r5, r5, #1
 800483a:	605d      	str	r5, [r3, #4]
 800483c:	6813      	ldr	r3, [r2, #0]
 800483e:	4630      	mov	r0, r6
 8004840:	1b1c      	subs	r4, r3, r4
 8004842:	6014      	str	r4, [r2, #0]
 8004844:	f7ff fc26 	bl	8004094 <__malloc_unlock>
 8004848:	2001      	movs	r0, #1
 800484a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800484e:	bf00      	nop
 8004850:	20000108 	.word	0x20000108
 8004854:	20000510 	.word	0x20000510
 8004858:	200006a4 	.word	0x200006a4
 800485c:	00000080 	.word	0x00000080

08004860 <_free_r>:
 8004860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004864:	4604      	mov	r4, r0
 8004866:	4688      	mov	r8, r1
 8004868:	2900      	cmp	r1, #0
 800486a:	f000 80ab 	beq.w	80049c4 <_free_r+0x164>
 800486e:	f7ff fc0b 	bl	8004088 <__malloc_lock>
 8004872:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8004876:	4d54      	ldr	r5, [pc, #336]	; (80049c8 <_free_r+0x168>)
 8004878:	f022 0001 	bic.w	r0, r2, #1
 800487c:	f1a8 0308 	sub.w	r3, r8, #8
 8004880:	181f      	adds	r7, r3, r0
 8004882:	68a9      	ldr	r1, [r5, #8]
 8004884:	687e      	ldr	r6, [r7, #4]
 8004886:	428f      	cmp	r7, r1
 8004888:	f026 0603 	bic.w	r6, r6, #3
 800488c:	f002 0201 	and.w	r2, r2, #1
 8004890:	d11b      	bne.n	80048ca <_free_r+0x6a>
 8004892:	4430      	add	r0, r6
 8004894:	b93a      	cbnz	r2, 80048a6 <_free_r+0x46>
 8004896:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800489a:	1a9b      	subs	r3, r3, r2
 800489c:	6899      	ldr	r1, [r3, #8]
 800489e:	4410      	add	r0, r2
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	60ca      	str	r2, [r1, #12]
 80048a4:	6091      	str	r1, [r2, #8]
 80048a6:	f040 0201 	orr.w	r2, r0, #1
 80048aa:	605a      	str	r2, [r3, #4]
 80048ac:	60ab      	str	r3, [r5, #8]
 80048ae:	4b47      	ldr	r3, [pc, #284]	; (80049cc <_free_r+0x16c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4298      	cmp	r0, r3
 80048b4:	d304      	bcc.n	80048c0 <_free_r+0x60>
 80048b6:	4b46      	ldr	r3, [pc, #280]	; (80049d0 <_free_r+0x170>)
 80048b8:	4620      	mov	r0, r4
 80048ba:	6819      	ldr	r1, [r3, #0]
 80048bc:	f7ff ff7a 	bl	80047b4 <_malloc_trim_r>
 80048c0:	4620      	mov	r0, r4
 80048c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048c6:	f7ff bbe5 	b.w	8004094 <__malloc_unlock>
 80048ca:	607e      	str	r6, [r7, #4]
 80048cc:	2a00      	cmp	r2, #0
 80048ce:	d139      	bne.n	8004944 <_free_r+0xe4>
 80048d0:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80048d4:	f105 0e08 	add.w	lr, r5, #8
 80048d8:	1a5b      	subs	r3, r3, r1
 80048da:	4408      	add	r0, r1
 80048dc:	6899      	ldr	r1, [r3, #8]
 80048de:	4571      	cmp	r1, lr
 80048e0:	d032      	beq.n	8004948 <_free_r+0xe8>
 80048e2:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80048e6:	f8c1 e00c 	str.w	lr, [r1, #12]
 80048ea:	f8ce 1008 	str.w	r1, [lr, #8]
 80048ee:	19b9      	adds	r1, r7, r6
 80048f0:	6849      	ldr	r1, [r1, #4]
 80048f2:	07c9      	lsls	r1, r1, #31
 80048f4:	d40a      	bmi.n	800490c <_free_r+0xac>
 80048f6:	4430      	add	r0, r6
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	bb3a      	cbnz	r2, 800494c <_free_r+0xec>
 80048fc:	4e35      	ldr	r6, [pc, #212]	; (80049d4 <_free_r+0x174>)
 80048fe:	42b1      	cmp	r1, r6
 8004900:	d124      	bne.n	800494c <_free_r+0xec>
 8004902:	2201      	movs	r2, #1
 8004904:	616b      	str	r3, [r5, #20]
 8004906:	612b      	str	r3, [r5, #16]
 8004908:	60d9      	str	r1, [r3, #12]
 800490a:	6099      	str	r1, [r3, #8]
 800490c:	f040 0101 	orr.w	r1, r0, #1
 8004910:	6059      	str	r1, [r3, #4]
 8004912:	5018      	str	r0, [r3, r0]
 8004914:	2a00      	cmp	r2, #0
 8004916:	d1d3      	bne.n	80048c0 <_free_r+0x60>
 8004918:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800491c:	d21a      	bcs.n	8004954 <_free_r+0xf4>
 800491e:	2201      	movs	r2, #1
 8004920:	08c0      	lsrs	r0, r0, #3
 8004922:	1081      	asrs	r1, r0, #2
 8004924:	408a      	lsls	r2, r1
 8004926:	6869      	ldr	r1, [r5, #4]
 8004928:	3001      	adds	r0, #1
 800492a:	430a      	orrs	r2, r1
 800492c:	606a      	str	r2, [r5, #4]
 800492e:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8004932:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8004936:	3a08      	subs	r2, #8
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	6099      	str	r1, [r3, #8]
 800493c:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8004940:	60cb      	str	r3, [r1, #12]
 8004942:	e7bd      	b.n	80048c0 <_free_r+0x60>
 8004944:	2200      	movs	r2, #0
 8004946:	e7d2      	b.n	80048ee <_free_r+0x8e>
 8004948:	2201      	movs	r2, #1
 800494a:	e7d0      	b.n	80048ee <_free_r+0x8e>
 800494c:	68fe      	ldr	r6, [r7, #12]
 800494e:	60ce      	str	r6, [r1, #12]
 8004950:	60b1      	str	r1, [r6, #8]
 8004952:	e7db      	b.n	800490c <_free_r+0xac>
 8004954:	0a42      	lsrs	r2, r0, #9
 8004956:	2a04      	cmp	r2, #4
 8004958:	d813      	bhi.n	8004982 <_free_r+0x122>
 800495a:	0982      	lsrs	r2, r0, #6
 800495c:	3238      	adds	r2, #56	; 0x38
 800495e:	1c51      	adds	r1, r2, #1
 8004960:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8004964:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8004968:	428e      	cmp	r6, r1
 800496a:	d124      	bne.n	80049b6 <_free_r+0x156>
 800496c:	2001      	movs	r0, #1
 800496e:	1092      	asrs	r2, r2, #2
 8004970:	fa00 f202 	lsl.w	r2, r0, r2
 8004974:	6868      	ldr	r0, [r5, #4]
 8004976:	4302      	orrs	r2, r0
 8004978:	606a      	str	r2, [r5, #4]
 800497a:	60de      	str	r6, [r3, #12]
 800497c:	6099      	str	r1, [r3, #8]
 800497e:	60b3      	str	r3, [r6, #8]
 8004980:	e7de      	b.n	8004940 <_free_r+0xe0>
 8004982:	2a14      	cmp	r2, #20
 8004984:	d801      	bhi.n	800498a <_free_r+0x12a>
 8004986:	325b      	adds	r2, #91	; 0x5b
 8004988:	e7e9      	b.n	800495e <_free_r+0xfe>
 800498a:	2a54      	cmp	r2, #84	; 0x54
 800498c:	d802      	bhi.n	8004994 <_free_r+0x134>
 800498e:	0b02      	lsrs	r2, r0, #12
 8004990:	326e      	adds	r2, #110	; 0x6e
 8004992:	e7e4      	b.n	800495e <_free_r+0xfe>
 8004994:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8004998:	d802      	bhi.n	80049a0 <_free_r+0x140>
 800499a:	0bc2      	lsrs	r2, r0, #15
 800499c:	3277      	adds	r2, #119	; 0x77
 800499e:	e7de      	b.n	800495e <_free_r+0xfe>
 80049a0:	f240 5154 	movw	r1, #1364	; 0x554
 80049a4:	428a      	cmp	r2, r1
 80049a6:	bf9a      	itte	ls
 80049a8:	0c82      	lsrls	r2, r0, #18
 80049aa:	327c      	addls	r2, #124	; 0x7c
 80049ac:	227e      	movhi	r2, #126	; 0x7e
 80049ae:	e7d6      	b.n	800495e <_free_r+0xfe>
 80049b0:	6889      	ldr	r1, [r1, #8]
 80049b2:	428e      	cmp	r6, r1
 80049b4:	d004      	beq.n	80049c0 <_free_r+0x160>
 80049b6:	684a      	ldr	r2, [r1, #4]
 80049b8:	f022 0203 	bic.w	r2, r2, #3
 80049bc:	4290      	cmp	r0, r2
 80049be:	d3f7      	bcc.n	80049b0 <_free_r+0x150>
 80049c0:	68ce      	ldr	r6, [r1, #12]
 80049c2:	e7da      	b.n	800497a <_free_r+0x11a>
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049c8:	20000108 	.word	0x20000108
 80049cc:	20000514 	.word	0x20000514
 80049d0:	200006d4 	.word	0x200006d4
 80049d4:	20000110 	.word	0x20000110

080049d8 <__retarget_lock_acquire_recursive>:
 80049d8:	4770      	bx	lr

080049da <__retarget_lock_release_recursive>:
 80049da:	4770      	bx	lr

080049dc <__ascii_mbtowc>:
 80049dc:	b082      	sub	sp, #8
 80049de:	b901      	cbnz	r1, 80049e2 <__ascii_mbtowc+0x6>
 80049e0:	a901      	add	r1, sp, #4
 80049e2:	b142      	cbz	r2, 80049f6 <__ascii_mbtowc+0x1a>
 80049e4:	b14b      	cbz	r3, 80049fa <__ascii_mbtowc+0x1e>
 80049e6:	7813      	ldrb	r3, [r2, #0]
 80049e8:	600b      	str	r3, [r1, #0]
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	1c10      	adds	r0, r2, #0
 80049ee:	bf18      	it	ne
 80049f0:	2001      	movne	r0, #1
 80049f2:	b002      	add	sp, #8
 80049f4:	4770      	bx	lr
 80049f6:	4610      	mov	r0, r2
 80049f8:	e7fb      	b.n	80049f2 <__ascii_mbtowc+0x16>
 80049fa:	f06f 0001 	mvn.w	r0, #1
 80049fe:	e7f8      	b.n	80049f2 <__ascii_mbtowc+0x16>

08004a00 <memmove>:
 8004a00:	4288      	cmp	r0, r1
 8004a02:	b510      	push	{r4, lr}
 8004a04:	eb01 0302 	add.w	r3, r1, r2
 8004a08:	d803      	bhi.n	8004a12 <memmove+0x12>
 8004a0a:	1e42      	subs	r2, r0, #1
 8004a0c:	4299      	cmp	r1, r3
 8004a0e:	d10c      	bne.n	8004a2a <memmove+0x2a>
 8004a10:	bd10      	pop	{r4, pc}
 8004a12:	4298      	cmp	r0, r3
 8004a14:	d2f9      	bcs.n	8004a0a <memmove+0xa>
 8004a16:	1881      	adds	r1, r0, r2
 8004a18:	1ad2      	subs	r2, r2, r3
 8004a1a:	42d3      	cmn	r3, r2
 8004a1c:	d100      	bne.n	8004a20 <memmove+0x20>
 8004a1e:	bd10      	pop	{r4, pc}
 8004a20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004a28:	e7f7      	b.n	8004a1a <memmove+0x1a>
 8004a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a2e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004a32:	e7eb      	b.n	8004a0c <memmove+0xc>

08004a34 <memset>:
 8004a34:	4603      	mov	r3, r0
 8004a36:	4402      	add	r2, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <_realloc_r>:
 8004a44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a48:	4682      	mov	sl, r0
 8004a4a:	460c      	mov	r4, r1
 8004a4c:	b929      	cbnz	r1, 8004a5a <_realloc_r+0x16>
 8004a4e:	4611      	mov	r1, r2
 8004a50:	b003      	add	sp, #12
 8004a52:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a56:	f7ff b8f1 	b.w	8003c3c <_malloc_r>
 8004a5a:	9201      	str	r2, [sp, #4]
 8004a5c:	f7ff fb14 	bl	8004088 <__malloc_lock>
 8004a60:	9a01      	ldr	r2, [sp, #4]
 8004a62:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8004a66:	f102 080b 	add.w	r8, r2, #11
 8004a6a:	f1b8 0f16 	cmp.w	r8, #22
 8004a6e:	f1a4 0908 	sub.w	r9, r4, #8
 8004a72:	f025 0603 	bic.w	r6, r5, #3
 8004a76:	d90a      	bls.n	8004a8e <_realloc_r+0x4a>
 8004a78:	f038 0807 	bics.w	r8, r8, #7
 8004a7c:	d509      	bpl.n	8004a92 <_realloc_r+0x4e>
 8004a7e:	230c      	movs	r3, #12
 8004a80:	2700      	movs	r7, #0
 8004a82:	f8ca 3000 	str.w	r3, [sl]
 8004a86:	4638      	mov	r0, r7
 8004a88:	b003      	add	sp, #12
 8004a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a8e:	f04f 0810 	mov.w	r8, #16
 8004a92:	4590      	cmp	r8, r2
 8004a94:	d3f3      	bcc.n	8004a7e <_realloc_r+0x3a>
 8004a96:	45b0      	cmp	r8, r6
 8004a98:	f340 8148 	ble.w	8004d2c <_realloc_r+0x2e8>
 8004a9c:	4ba9      	ldr	r3, [pc, #676]	; (8004d44 <_realloc_r+0x300>)
 8004a9e:	eb09 0106 	add.w	r1, r9, r6
 8004aa2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8004aa6:	469b      	mov	fp, r3
 8004aa8:	4571      	cmp	r1, lr
 8004aaa:	684b      	ldr	r3, [r1, #4]
 8004aac:	d005      	beq.n	8004aba <_realloc_r+0x76>
 8004aae:	f023 0001 	bic.w	r0, r3, #1
 8004ab2:	4408      	add	r0, r1
 8004ab4:	6840      	ldr	r0, [r0, #4]
 8004ab6:	07c7      	lsls	r7, r0, #31
 8004ab8:	d447      	bmi.n	8004b4a <_realloc_r+0x106>
 8004aba:	f023 0303 	bic.w	r3, r3, #3
 8004abe:	4571      	cmp	r1, lr
 8004ac0:	eb06 0703 	add.w	r7, r6, r3
 8004ac4:	d119      	bne.n	8004afa <_realloc_r+0xb6>
 8004ac6:	f108 0010 	add.w	r0, r8, #16
 8004aca:	4287      	cmp	r7, r0
 8004acc:	db3f      	blt.n	8004b4e <_realloc_r+0x10a>
 8004ace:	eba7 0708 	sub.w	r7, r7, r8
 8004ad2:	eb09 0308 	add.w	r3, r9, r8
 8004ad6:	f047 0701 	orr.w	r7, r7, #1
 8004ada:	f8cb 3008 	str.w	r3, [fp, #8]
 8004ade:	605f      	str	r7, [r3, #4]
 8004ae0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004ae4:	4650      	mov	r0, sl
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	ea43 0308 	orr.w	r3, r3, r8
 8004aee:	f844 3c04 	str.w	r3, [r4, #-4]
 8004af2:	f7ff facf 	bl	8004094 <__malloc_unlock>
 8004af6:	4627      	mov	r7, r4
 8004af8:	e7c5      	b.n	8004a86 <_realloc_r+0x42>
 8004afa:	45b8      	cmp	r8, r7
 8004afc:	dc27      	bgt.n	8004b4e <_realloc_r+0x10a>
 8004afe:	68cb      	ldr	r3, [r1, #12]
 8004b00:	688a      	ldr	r2, [r1, #8]
 8004b02:	60d3      	str	r3, [r2, #12]
 8004b04:	609a      	str	r2, [r3, #8]
 8004b06:	eba7 0008 	sub.w	r0, r7, r8
 8004b0a:	280f      	cmp	r0, #15
 8004b0c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004b10:	eb09 0207 	add.w	r2, r9, r7
 8004b14:	f240 810c 	bls.w	8004d30 <_realloc_r+0x2ec>
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	eb09 0108 	add.w	r1, r9, r8
 8004b20:	ea43 0308 	orr.w	r3, r3, r8
 8004b24:	f040 0001 	orr.w	r0, r0, #1
 8004b28:	f8c9 3004 	str.w	r3, [r9, #4]
 8004b2c:	6048      	str	r0, [r1, #4]
 8004b2e:	6853      	ldr	r3, [r2, #4]
 8004b30:	3108      	adds	r1, #8
 8004b32:	f043 0301 	orr.w	r3, r3, #1
 8004b36:	6053      	str	r3, [r2, #4]
 8004b38:	4650      	mov	r0, sl
 8004b3a:	f7ff fe91 	bl	8004860 <_free_r>
 8004b3e:	4650      	mov	r0, sl
 8004b40:	f7ff faa8 	bl	8004094 <__malloc_unlock>
 8004b44:	f109 0708 	add.w	r7, r9, #8
 8004b48:	e79d      	b.n	8004a86 <_realloc_r+0x42>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	07e8      	lsls	r0, r5, #31
 8004b50:	f100 8085 	bmi.w	8004c5e <_realloc_r+0x21a>
 8004b54:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8004b58:	eba9 0505 	sub.w	r5, r9, r5
 8004b5c:	6868      	ldr	r0, [r5, #4]
 8004b5e:	f020 0003 	bic.w	r0, r0, #3
 8004b62:	4430      	add	r0, r6
 8004b64:	2900      	cmp	r1, #0
 8004b66:	d077      	beq.n	8004c58 <_realloc_r+0x214>
 8004b68:	4571      	cmp	r1, lr
 8004b6a:	d151      	bne.n	8004c10 <_realloc_r+0x1cc>
 8004b6c:	4403      	add	r3, r0
 8004b6e:	f108 0110 	add.w	r1, r8, #16
 8004b72:	428b      	cmp	r3, r1
 8004b74:	db70      	blt.n	8004c58 <_realloc_r+0x214>
 8004b76:	462f      	mov	r7, r5
 8004b78:	68ea      	ldr	r2, [r5, #12]
 8004b7a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8004b7e:	60ca      	str	r2, [r1, #12]
 8004b80:	6091      	str	r1, [r2, #8]
 8004b82:	1f32      	subs	r2, r6, #4
 8004b84:	2a24      	cmp	r2, #36	; 0x24
 8004b86:	d83c      	bhi.n	8004c02 <_realloc_r+0x1be>
 8004b88:	2a13      	cmp	r2, #19
 8004b8a:	d937      	bls.n	8004bfc <_realloc_r+0x1b8>
 8004b8c:	6821      	ldr	r1, [r4, #0]
 8004b8e:	2a1b      	cmp	r2, #27
 8004b90:	60a9      	str	r1, [r5, #8]
 8004b92:	6861      	ldr	r1, [r4, #4]
 8004b94:	60e9      	str	r1, [r5, #12]
 8004b96:	d81c      	bhi.n	8004bd2 <_realloc_r+0x18e>
 8004b98:	f105 0210 	add.w	r2, r5, #16
 8004b9c:	f104 0108 	add.w	r1, r4, #8
 8004ba0:	6808      	ldr	r0, [r1, #0]
 8004ba2:	6010      	str	r0, [r2, #0]
 8004ba4:	6848      	ldr	r0, [r1, #4]
 8004ba6:	6050      	str	r0, [r2, #4]
 8004ba8:	6889      	ldr	r1, [r1, #8]
 8004baa:	6091      	str	r1, [r2, #8]
 8004bac:	eba3 0308 	sub.w	r3, r3, r8
 8004bb0:	eb05 0208 	add.w	r2, r5, r8
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	f8cb 2008 	str.w	r2, [fp, #8]
 8004bbc:	6053      	str	r3, [r2, #4]
 8004bbe:	686b      	ldr	r3, [r5, #4]
 8004bc0:	f003 0301 	and.w	r3, r3, #1
 8004bc4:	ea43 0308 	orr.w	r3, r3, r8
 8004bc8:	606b      	str	r3, [r5, #4]
 8004bca:	4650      	mov	r0, sl
 8004bcc:	f7ff fa62 	bl	8004094 <__malloc_unlock>
 8004bd0:	e759      	b.n	8004a86 <_realloc_r+0x42>
 8004bd2:	68a1      	ldr	r1, [r4, #8]
 8004bd4:	2a24      	cmp	r2, #36	; 0x24
 8004bd6:	6129      	str	r1, [r5, #16]
 8004bd8:	68e1      	ldr	r1, [r4, #12]
 8004bda:	bf18      	it	ne
 8004bdc:	f105 0218 	addne.w	r2, r5, #24
 8004be0:	6169      	str	r1, [r5, #20]
 8004be2:	bf09      	itett	eq
 8004be4:	6922      	ldreq	r2, [r4, #16]
 8004be6:	f104 0110 	addne.w	r1, r4, #16
 8004bea:	61aa      	streq	r2, [r5, #24]
 8004bec:	6960      	ldreq	r0, [r4, #20]
 8004bee:	bf02      	ittt	eq
 8004bf0:	f105 0220 	addeq.w	r2, r5, #32
 8004bf4:	f104 0118 	addeq.w	r1, r4, #24
 8004bf8:	61e8      	streq	r0, [r5, #28]
 8004bfa:	e7d1      	b.n	8004ba0 <_realloc_r+0x15c>
 8004bfc:	463a      	mov	r2, r7
 8004bfe:	4621      	mov	r1, r4
 8004c00:	e7ce      	b.n	8004ba0 <_realloc_r+0x15c>
 8004c02:	4621      	mov	r1, r4
 8004c04:	4638      	mov	r0, r7
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	f7ff fefa 	bl	8004a00 <memmove>
 8004c0c:	9b01      	ldr	r3, [sp, #4]
 8004c0e:	e7cd      	b.n	8004bac <_realloc_r+0x168>
 8004c10:	18c7      	adds	r7, r0, r3
 8004c12:	45b8      	cmp	r8, r7
 8004c14:	dc20      	bgt.n	8004c58 <_realloc_r+0x214>
 8004c16:	68cb      	ldr	r3, [r1, #12]
 8004c18:	688a      	ldr	r2, [r1, #8]
 8004c1a:	60d3      	str	r3, [r2, #12]
 8004c1c:	609a      	str	r2, [r3, #8]
 8004c1e:	4628      	mov	r0, r5
 8004c20:	68eb      	ldr	r3, [r5, #12]
 8004c22:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8004c26:	60d3      	str	r3, [r2, #12]
 8004c28:	609a      	str	r2, [r3, #8]
 8004c2a:	1f32      	subs	r2, r6, #4
 8004c2c:	2a24      	cmp	r2, #36	; 0x24
 8004c2e:	d843      	bhi.n	8004cb8 <_realloc_r+0x274>
 8004c30:	2a13      	cmp	r2, #19
 8004c32:	d93f      	bls.n	8004cb4 <_realloc_r+0x270>
 8004c34:	6823      	ldr	r3, [r4, #0]
 8004c36:	2a1b      	cmp	r2, #27
 8004c38:	60ab      	str	r3, [r5, #8]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	60eb      	str	r3, [r5, #12]
 8004c3e:	d824      	bhi.n	8004c8a <_realloc_r+0x246>
 8004c40:	f105 0010 	add.w	r0, r5, #16
 8004c44:	f104 0308 	add.w	r3, r4, #8
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	6002      	str	r2, [r0, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	6042      	str	r2, [r0, #4]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	6083      	str	r3, [r0, #8]
 8004c54:	46a9      	mov	r9, r5
 8004c56:	e756      	b.n	8004b06 <_realloc_r+0xc2>
 8004c58:	4580      	cmp	r8, r0
 8004c5a:	4607      	mov	r7, r0
 8004c5c:	dddf      	ble.n	8004c1e <_realloc_r+0x1da>
 8004c5e:	4611      	mov	r1, r2
 8004c60:	4650      	mov	r0, sl
 8004c62:	f7fe ffeb 	bl	8003c3c <_malloc_r>
 8004c66:	4607      	mov	r7, r0
 8004c68:	2800      	cmp	r0, #0
 8004c6a:	d0ae      	beq.n	8004bca <_realloc_r+0x186>
 8004c6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004c70:	f1a0 0208 	sub.w	r2, r0, #8
 8004c74:	f023 0301 	bic.w	r3, r3, #1
 8004c78:	444b      	add	r3, r9
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d120      	bne.n	8004cc0 <_realloc_r+0x27c>
 8004c7e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8004c82:	f027 0703 	bic.w	r7, r7, #3
 8004c86:	4437      	add	r7, r6
 8004c88:	e73d      	b.n	8004b06 <_realloc_r+0xc2>
 8004c8a:	68a3      	ldr	r3, [r4, #8]
 8004c8c:	2a24      	cmp	r2, #36	; 0x24
 8004c8e:	612b      	str	r3, [r5, #16]
 8004c90:	68e3      	ldr	r3, [r4, #12]
 8004c92:	bf18      	it	ne
 8004c94:	f105 0018 	addne.w	r0, r5, #24
 8004c98:	616b      	str	r3, [r5, #20]
 8004c9a:	bf09      	itett	eq
 8004c9c:	6923      	ldreq	r3, [r4, #16]
 8004c9e:	f104 0310 	addne.w	r3, r4, #16
 8004ca2:	61ab      	streq	r3, [r5, #24]
 8004ca4:	6962      	ldreq	r2, [r4, #20]
 8004ca6:	bf02      	ittt	eq
 8004ca8:	f105 0020 	addeq.w	r0, r5, #32
 8004cac:	f104 0318 	addeq.w	r3, r4, #24
 8004cb0:	61ea      	streq	r2, [r5, #28]
 8004cb2:	e7c9      	b.n	8004c48 <_realloc_r+0x204>
 8004cb4:	4623      	mov	r3, r4
 8004cb6:	e7c7      	b.n	8004c48 <_realloc_r+0x204>
 8004cb8:	4621      	mov	r1, r4
 8004cba:	f7ff fea1 	bl	8004a00 <memmove>
 8004cbe:	e7c9      	b.n	8004c54 <_realloc_r+0x210>
 8004cc0:	1f32      	subs	r2, r6, #4
 8004cc2:	2a24      	cmp	r2, #36	; 0x24
 8004cc4:	d82e      	bhi.n	8004d24 <_realloc_r+0x2e0>
 8004cc6:	2a13      	cmp	r2, #19
 8004cc8:	d929      	bls.n	8004d1e <_realloc_r+0x2da>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	2a1b      	cmp	r2, #27
 8004cce:	6003      	str	r3, [r0, #0]
 8004cd0:	6863      	ldr	r3, [r4, #4]
 8004cd2:	6043      	str	r3, [r0, #4]
 8004cd4:	d80e      	bhi.n	8004cf4 <_realloc_r+0x2b0>
 8004cd6:	f100 0308 	add.w	r3, r0, #8
 8004cda:	f104 0208 	add.w	r2, r4, #8
 8004cde:	6811      	ldr	r1, [r2, #0]
 8004ce0:	6019      	str	r1, [r3, #0]
 8004ce2:	6851      	ldr	r1, [r2, #4]
 8004ce4:	6059      	str	r1, [r3, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	4621      	mov	r1, r4
 8004cec:	4650      	mov	r0, sl
 8004cee:	f7ff fdb7 	bl	8004860 <_free_r>
 8004cf2:	e76a      	b.n	8004bca <_realloc_r+0x186>
 8004cf4:	68a3      	ldr	r3, [r4, #8]
 8004cf6:	2a24      	cmp	r2, #36	; 0x24
 8004cf8:	6083      	str	r3, [r0, #8]
 8004cfa:	68e3      	ldr	r3, [r4, #12]
 8004cfc:	bf18      	it	ne
 8004cfe:	f104 0210 	addne.w	r2, r4, #16
 8004d02:	60c3      	str	r3, [r0, #12]
 8004d04:	bf09      	itett	eq
 8004d06:	6923      	ldreq	r3, [r4, #16]
 8004d08:	f100 0310 	addne.w	r3, r0, #16
 8004d0c:	6103      	streq	r3, [r0, #16]
 8004d0e:	6961      	ldreq	r1, [r4, #20]
 8004d10:	bf02      	ittt	eq
 8004d12:	f100 0318 	addeq.w	r3, r0, #24
 8004d16:	f104 0218 	addeq.w	r2, r4, #24
 8004d1a:	6141      	streq	r1, [r0, #20]
 8004d1c:	e7df      	b.n	8004cde <_realloc_r+0x29a>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	4622      	mov	r2, r4
 8004d22:	e7dc      	b.n	8004cde <_realloc_r+0x29a>
 8004d24:	4621      	mov	r1, r4
 8004d26:	f7ff fe6b 	bl	8004a00 <memmove>
 8004d2a:	e7de      	b.n	8004cea <_realloc_r+0x2a6>
 8004d2c:	4637      	mov	r7, r6
 8004d2e:	e6ea      	b.n	8004b06 <_realloc_r+0xc2>
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	431f      	orrs	r7, r3
 8004d36:	f8c9 7004 	str.w	r7, [r9, #4]
 8004d3a:	6853      	ldr	r3, [r2, #4]
 8004d3c:	f043 0301 	orr.w	r3, r3, #1
 8004d40:	6053      	str	r3, [r2, #4]
 8004d42:	e6fc      	b.n	8004b3e <_realloc_r+0xfa>
 8004d44:	20000108 	.word	0x20000108

08004d48 <__ascii_wctomb>:
 8004d48:	b149      	cbz	r1, 8004d5e <__ascii_wctomb+0x16>
 8004d4a:	2aff      	cmp	r2, #255	; 0xff
 8004d4c:	bf8b      	itete	hi
 8004d4e:	238a      	movhi	r3, #138	; 0x8a
 8004d50:	700a      	strbls	r2, [r1, #0]
 8004d52:	6003      	strhi	r3, [r0, #0]
 8004d54:	2001      	movls	r0, #1
 8004d56:	bf88      	it	hi
 8004d58:	f04f 30ff 	movhi.w	r0, #4294967295
 8004d5c:	4770      	bx	lr
 8004d5e:	4608      	mov	r0, r1
 8004d60:	4770      	bx	lr
	...

08004d64 <_sbrk>:
 8004d64:	4b04      	ldr	r3, [pc, #16]	; (8004d78 <_sbrk+0x14>)
 8004d66:	4602      	mov	r2, r0
 8004d68:	6819      	ldr	r1, [r3, #0]
 8004d6a:	b909      	cbnz	r1, 8004d70 <_sbrk+0xc>
 8004d6c:	4903      	ldr	r1, [pc, #12]	; (8004d7c <_sbrk+0x18>)
 8004d6e:	6019      	str	r1, [r3, #0]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	4402      	add	r2, r0
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	4770      	bx	lr
 8004d78:	200006d8 	.word	0x200006d8
 8004d7c:	200006ec 	.word	0x200006ec

08004d80 <_init>:
 8004d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d82:	bf00      	nop
 8004d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d86:	bc08      	pop	{r3}
 8004d88:	469e      	mov	lr, r3
 8004d8a:	4770      	bx	lr

08004d8c <_fini>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	bf00      	nop
 8004d90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d92:	bc08      	pop	{r3}
 8004d94:	469e      	mov	lr, r3
 8004d96:	4770      	bx	lr
