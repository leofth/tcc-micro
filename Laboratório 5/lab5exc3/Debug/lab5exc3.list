
lab5exc3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023bc  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000124f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000002c  20000000  080024f0  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000002c  080024f0  0002002c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000124f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   00005507  00000000  00000000  00012519  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f9b  00000000  00000000  00017a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006a0  00000000  00000000  000189c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  00019060  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00002555  00000000  00000000  00019658  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000020f8  00000000  00000000  0001bbad  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001dca5  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001ed4  00000000  00000000  0001dd24  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0001fbf8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000000 	.word	0x20000000
 800012c:	00000000 	.word	0x00000000
 8000130:	080024b4 	.word	0x080024b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000004 	.word	0x20000004
 800014c:	080024b4 	.word	0x080024b4

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800028e:	f1a4 0401 	sub.w	r4, r4, #1
 8000292:	d1e9      	bne.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f092 0f00 	teq	r2, #0
 800043a:	bf14      	ite	ne
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000448:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800044c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000450:	e720      	b.n	8000294 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_ul2d>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	b530      	push	{r4, r5, lr}
 800045e:	f04f 0500 	mov.w	r5, #0
 8000462:	e00a      	b.n	800047a <__aeabi_l2d+0x16>

08000464 <__aeabi_l2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000472:	d502      	bpl.n	800047a <__aeabi_l2d+0x16>
 8000474:	4240      	negs	r0, r0
 8000476:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000482:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000486:	f43f aedc 	beq.w	8000242 <__adddf3+0xe6>
 800048a:	f04f 0203 	mov.w	r2, #3
 800048e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000492:	bf18      	it	ne
 8000494:	3203      	addne	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a2:	f1c2 0320 	rsb	r3, r2, #32
 80004a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004aa:	fa20 f002 	lsr.w	r0, r0, r2
 80004ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b2:	ea40 000e 	orr.w	r0, r0, lr
 80004b6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ba:	4414      	add	r4, r2
 80004bc:	e6c1      	b.n	8000242 <__adddf3+0xe6>
 80004be:	bf00      	nop

080004c0 <__aeabi_dmul>:
 80004c0:	b570      	push	{r4, r5, r6, lr}
 80004c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004ce:	bf1d      	ittte	ne
 80004d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d4:	ea94 0f0c 	teqne	r4, ip
 80004d8:	ea95 0f0c 	teqne	r5, ip
 80004dc:	f000 f8de 	bleq	800069c <__aeabi_dmul+0x1dc>
 80004e0:	442c      	add	r4, r5
 80004e2:	ea81 0603 	eor.w	r6, r1, r3
 80004e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f2:	bf18      	it	ne
 80004f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80004fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000500:	d038      	beq.n	8000574 <__aeabi_dmul+0xb4>
 8000502:	fba0 ce02 	umull	ip, lr, r0, r2
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800050e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000512:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000516:	f04f 0600 	mov.w	r6, #0
 800051a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800051e:	f09c 0f00 	teq	ip, #0
 8000522:	bf18      	it	ne
 8000524:	f04e 0e01 	orrne.w	lr, lr, #1
 8000528:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800052c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000530:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000534:	d204      	bcs.n	8000540 <__aeabi_dmul+0x80>
 8000536:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053a:	416d      	adcs	r5, r5
 800053c:	eb46 0606 	adc.w	r6, r6, r6
 8000540:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000544:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000548:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800054c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000550:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000554:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000558:	bf88      	it	hi
 800055a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800055e:	d81e      	bhi.n	800059e <__aeabi_dmul+0xde>
 8000560:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000564:	bf08      	it	eq
 8000566:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056a:	f150 0000 	adcs.w	r0, r0, #0
 800056e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000572:	bd70      	pop	{r4, r5, r6, pc}
 8000574:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000578:	ea46 0101 	orr.w	r1, r6, r1
 800057c:	ea40 0002 	orr.w	r0, r0, r2
 8000580:	ea81 0103 	eor.w	r1, r1, r3
 8000584:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000588:	bfc2      	ittt	gt
 800058a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800058e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000592:	bd70      	popgt	{r4, r5, r6, pc}
 8000594:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000598:	f04f 0e00 	mov.w	lr, #0
 800059c:	3c01      	subs	r4, #1
 800059e:	f300 80ab 	bgt.w	80006f8 <__aeabi_dmul+0x238>
 80005a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005a6:	bfde      	ittt	le
 80005a8:	2000      	movle	r0, #0
 80005aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ae:	bd70      	pople	{r4, r5, r6, pc}
 80005b0:	f1c4 0400 	rsb	r4, r4, #0
 80005b4:	3c20      	subs	r4, #32
 80005b6:	da35      	bge.n	8000624 <__aeabi_dmul+0x164>
 80005b8:	340c      	adds	r4, #12
 80005ba:	dc1b      	bgt.n	80005f4 <__aeabi_dmul+0x134>
 80005bc:	f104 0414 	add.w	r4, r4, #20
 80005c0:	f1c4 0520 	rsb	r5, r4, #32
 80005c4:	fa00 f305 	lsl.w	r3, r0, r5
 80005c8:	fa20 f004 	lsr.w	r0, r0, r4
 80005cc:	fa01 f205 	lsl.w	r2, r1, r5
 80005d0:	ea40 0002 	orr.w	r0, r0, r2
 80005d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e0:	fa21 f604 	lsr.w	r6, r1, r4
 80005e4:	eb42 0106 	adc.w	r1, r2, r6
 80005e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005ec:	bf08      	it	eq
 80005ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f1c4 040c 	rsb	r4, r4, #12
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000600:	fa20 f005 	lsr.w	r0, r0, r5
 8000604:	fa01 f204 	lsl.w	r2, r1, r4
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	f141 0100 	adc.w	r1, r1, #0
 8000618:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800061c:	bf08      	it	eq
 800061e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f205 	lsl.w	r2, r0, r5
 800062c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000630:	fa20 f304 	lsr.w	r3, r0, r4
 8000634:	fa01 f205 	lsl.w	r2, r1, r5
 8000638:	ea43 0302 	orr.w	r3, r3, r2
 800063c:	fa21 f004 	lsr.w	r0, r1, r4
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	fa21 f204 	lsr.w	r2, r1, r4
 8000648:	ea20 0002 	bic.w	r0, r0, r2
 800064c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f094 0f00 	teq	r4, #0
 8000660:	d10f      	bne.n	8000682 <__aeabi_dmul+0x1c2>
 8000662:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000666:	0040      	lsls	r0, r0, #1
 8000668:	eb41 0101 	adc.w	r1, r1, r1
 800066c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000670:	bf08      	it	eq
 8000672:	3c01      	subeq	r4, #1
 8000674:	d0f7      	beq.n	8000666 <__aeabi_dmul+0x1a6>
 8000676:	ea41 0106 	orr.w	r1, r1, r6
 800067a:	f095 0f00 	teq	r5, #0
 800067e:	bf18      	it	ne
 8000680:	4770      	bxne	lr
 8000682:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000686:	0052      	lsls	r2, r2, #1
 8000688:	eb43 0303 	adc.w	r3, r3, r3
 800068c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000690:	bf08      	it	eq
 8000692:	3d01      	subeq	r5, #1
 8000694:	d0f7      	beq.n	8000686 <__aeabi_dmul+0x1c6>
 8000696:	ea43 0306 	orr.w	r3, r3, r6
 800069a:	4770      	bx	lr
 800069c:	ea94 0f0c 	teq	r4, ip
 80006a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a4:	bf18      	it	ne
 80006a6:	ea95 0f0c 	teqne	r5, ip
 80006aa:	d00c      	beq.n	80006c6 <__aeabi_dmul+0x206>
 80006ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b0:	bf18      	it	ne
 80006b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006b6:	d1d1      	bne.n	800065c <__aeabi_dmul+0x19c>
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd70      	pop	{r4, r5, r6, pc}
 80006c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ca:	bf06      	itte	eq
 80006cc:	4610      	moveq	r0, r2
 80006ce:	4619      	moveq	r1, r3
 80006d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d4:	d019      	beq.n	800070a <__aeabi_dmul+0x24a>
 80006d6:	ea94 0f0c 	teq	r4, ip
 80006da:	d102      	bne.n	80006e2 <__aeabi_dmul+0x222>
 80006dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e0:	d113      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006e2:	ea95 0f0c 	teq	r5, ip
 80006e6:	d105      	bne.n	80006f4 <__aeabi_dmul+0x234>
 80006e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006ec:	bf1c      	itt	ne
 80006ee:	4610      	movne	r0, r2
 80006f0:	4619      	movne	r1, r3
 80006f2:	d10a      	bne.n	800070a <__aeabi_dmul+0x24a>
 80006f4:	ea81 0103 	eor.w	r1, r1, r3
 80006f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000700:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000712:	bd70      	pop	{r4, r5, r6, pc}

08000714 <__aeabi_ddiv>:
 8000714:	b570      	push	{r4, r5, r6, lr}
 8000716:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800071a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800071e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000722:	bf1d      	ittte	ne
 8000724:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000728:	ea94 0f0c 	teqne	r4, ip
 800072c:	ea95 0f0c 	teqne	r5, ip
 8000730:	f000 f8a7 	bleq	8000882 <__aeabi_ddiv+0x16e>
 8000734:	eba4 0405 	sub.w	r4, r4, r5
 8000738:	ea81 0e03 	eor.w	lr, r1, r3
 800073c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000740:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000744:	f000 8088 	beq.w	8000858 <__aeabi_ddiv+0x144>
 8000748:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800074c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000750:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000754:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000758:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800075c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000760:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000764:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000768:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800076c:	429d      	cmp	r5, r3
 800076e:	bf08      	it	eq
 8000770:	4296      	cmpeq	r6, r2
 8000772:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000776:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800077a:	d202      	bcs.n	8000782 <__aeabi_ddiv+0x6e>
 800077c:	085b      	lsrs	r3, r3, #1
 800077e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000782:	1ab6      	subs	r6, r6, r2
 8000784:	eb65 0503 	sbc.w	r5, r5, r3
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000792:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000796:	ebb6 0e02 	subs.w	lr, r6, r2
 800079a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800079e:	bf22      	ittt	cs
 80007a0:	1ab6      	subcs	r6, r6, r2
 80007a2:	4675      	movcs	r5, lr
 80007a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f4:	d018      	beq.n	8000828 <__aeabi_ddiv+0x114>
 80007f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80007fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000802:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000806:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800080e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000812:	d1c0      	bne.n	8000796 <__aeabi_ddiv+0x82>
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	d10b      	bne.n	8000832 <__aeabi_ddiv+0x11e>
 800081a:	ea41 0100 	orr.w	r1, r1, r0
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000826:	e7b6      	b.n	8000796 <__aeabi_ddiv+0x82>
 8000828:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800082c:	bf04      	itt	eq
 800082e:	4301      	orreq	r1, r0
 8000830:	2000      	moveq	r0, #0
 8000832:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000836:	bf88      	it	hi
 8000838:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800083c:	f63f aeaf 	bhi.w	800059e <__aeabi_dmul+0xde>
 8000840:	ebb5 0c03 	subs.w	ip, r5, r3
 8000844:	bf04      	itt	eq
 8000846:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800084e:	f150 0000 	adcs.w	r0, r0, #0
 8000852:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000856:	bd70      	pop	{r4, r5, r6, pc}
 8000858:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800085c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000860:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000864:	bfc2      	ittt	gt
 8000866:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800086e:	bd70      	popgt	{r4, r5, r6, pc}
 8000870:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000874:	f04f 0e00 	mov.w	lr, #0
 8000878:	3c01      	subs	r4, #1
 800087a:	e690      	b.n	800059e <__aeabi_dmul+0xde>
 800087c:	ea45 0e06 	orr.w	lr, r5, r6
 8000880:	e68d      	b.n	800059e <__aeabi_dmul+0xde>
 8000882:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000886:	ea94 0f0c 	teq	r4, ip
 800088a:	bf08      	it	eq
 800088c:	ea95 0f0c 	teqeq	r5, ip
 8000890:	f43f af3b 	beq.w	800070a <__aeabi_dmul+0x24a>
 8000894:	ea94 0f0c 	teq	r4, ip
 8000898:	d10a      	bne.n	80008b0 <__aeabi_ddiv+0x19c>
 800089a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800089e:	f47f af34 	bne.w	800070a <__aeabi_dmul+0x24a>
 80008a2:	ea95 0f0c 	teq	r5, ip
 80008a6:	f47f af25 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008aa:	4610      	mov	r0, r2
 80008ac:	4619      	mov	r1, r3
 80008ae:	e72c      	b.n	800070a <__aeabi_dmul+0x24a>
 80008b0:	ea95 0f0c 	teq	r5, ip
 80008b4:	d106      	bne.n	80008c4 <__aeabi_ddiv+0x1b0>
 80008b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ba:	f43f aefd 	beq.w	80006b8 <__aeabi_dmul+0x1f8>
 80008be:	4610      	mov	r0, r2
 80008c0:	4619      	mov	r1, r3
 80008c2:	e722      	b.n	800070a <__aeabi_dmul+0x24a>
 80008c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008c8:	bf18      	it	ne
 80008ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ce:	f47f aec5 	bne.w	800065c <__aeabi_dmul+0x19c>
 80008d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008d6:	f47f af0d 	bne.w	80006f4 <__aeabi_dmul+0x234>
 80008da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008de:	f47f aeeb 	bne.w	80006b8 <__aeabi_dmul+0x1f8>
 80008e2:	e712      	b.n	800070a <__aeabi_dmul+0x24a>

080008e4 <__aeabi_d2iz>:
 80008e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008ec:	d215      	bcs.n	800091a <__aeabi_d2iz+0x36>
 80008ee:	d511      	bpl.n	8000914 <__aeabi_d2iz+0x30>
 80008f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008f8:	d912      	bls.n	8000920 <__aeabi_d2iz+0x3c>
 80008fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000902:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000906:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800090a:	fa23 f002 	lsr.w	r0, r3, r2
 800090e:	bf18      	it	ne
 8000910:	4240      	negne	r0, r0
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d105      	bne.n	800092c <__aeabi_d2iz+0x48>
 8000920:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000924:	bf08      	it	eq
 8000926:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__aeabi_d2f>:
 8000934:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000938:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800093c:	bf24      	itt	cs
 800093e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000942:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000946:	d90d      	bls.n	8000964 <__aeabi_d2f+0x30>
 8000948:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800094c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000950:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000954:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000958:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800095c:	bf08      	it	eq
 800095e:	f020 0001 	biceq.w	r0, r0, #1
 8000962:	4770      	bx	lr
 8000964:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000968:	d121      	bne.n	80009ae <__aeabi_d2f+0x7a>
 800096a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800096e:	bfbc      	itt	lt
 8000970:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000974:	4770      	bxlt	lr
 8000976:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800097e:	f1c2 0218 	rsb	r2, r2, #24
 8000982:	f1c2 0c20 	rsb	ip, r2, #32
 8000986:	fa10 f30c 	lsls.w	r3, r0, ip
 800098a:	fa20 f002 	lsr.w	r0, r0, r2
 800098e:	bf18      	it	ne
 8000990:	f040 0001 	orrne.w	r0, r0, #1
 8000994:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000998:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800099c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a0:	ea40 000c 	orr.w	r0, r0, ip
 80009a4:	fa23 f302 	lsr.w	r3, r3, r2
 80009a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ac:	e7cc      	b.n	8000948 <__aeabi_d2f+0x14>
 80009ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009b2:	d107      	bne.n	80009c4 <__aeabi_d2f+0x90>
 80009b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b8:	bf1e      	ittt	ne
 80009ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009c2:	4770      	bxne	lr
 80009c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop

080009d4 <__aeabi_frsub>:
 80009d4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d8:	e002      	b.n	80009e0 <__addsf3>
 80009da:	bf00      	nop

080009dc <__aeabi_fsub>:
 80009dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009e0 <__addsf3>:
 80009e0:	0042      	lsls	r2, r0, #1
 80009e2:	bf1f      	itttt	ne
 80009e4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e8:	ea92 0f03 	teqne	r2, r3
 80009ec:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009f4:	d06a      	beq.n	8000acc <__addsf3+0xec>
 80009f6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009fa:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009fe:	bfc1      	itttt	gt
 8000a00:	18d2      	addgt	r2, r2, r3
 8000a02:	4041      	eorgt	r1, r0
 8000a04:	4048      	eorgt	r0, r1
 8000a06:	4041      	eorgt	r1, r0
 8000a08:	bfb8      	it	lt
 8000a0a:	425b      	neglt	r3, r3
 8000a0c:	2b19      	cmp	r3, #25
 8000a0e:	bf88      	it	hi
 8000a10:	4770      	bxhi	lr
 8000a12:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a16:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a1e:	bf18      	it	ne
 8000a20:	4240      	negne	r0, r0
 8000a22:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a26:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a2a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a2e:	bf18      	it	ne
 8000a30:	4249      	negne	r1, r1
 8000a32:	ea92 0f03 	teq	r2, r3
 8000a36:	d03f      	beq.n	8000ab8 <__addsf3+0xd8>
 8000a38:	f1a2 0201 	sub.w	r2, r2, #1
 8000a3c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a40:	eb10 000c 	adds.w	r0, r0, ip
 8000a44:	f1c3 0320 	rsb	r3, r3, #32
 8000a48:	fa01 f103 	lsl.w	r1, r1, r3
 8000a4c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a50:	d502      	bpl.n	8000a58 <__addsf3+0x78>
 8000a52:	4249      	negs	r1, r1
 8000a54:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a5c:	d313      	bcc.n	8000a86 <__addsf3+0xa6>
 8000a5e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a62:	d306      	bcc.n	8000a72 <__addsf3+0x92>
 8000a64:	0840      	lsrs	r0, r0, #1
 8000a66:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a6a:	f102 0201 	add.w	r2, r2, #1
 8000a6e:	2afe      	cmp	r2, #254	; 0xfe
 8000a70:	d251      	bcs.n	8000b16 <__addsf3+0x136>
 8000a72:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a76:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a7a:	bf08      	it	eq
 8000a7c:	f020 0001 	biceq.w	r0, r0, #1
 8000a80:	ea40 0003 	orr.w	r0, r0, r3
 8000a84:	4770      	bx	lr
 8000a86:	0049      	lsls	r1, r1, #1
 8000a88:	eb40 0000 	adc.w	r0, r0, r0
 8000a8c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a90:	f1a2 0201 	sub.w	r2, r2, #1
 8000a94:	d1ed      	bne.n	8000a72 <__addsf3+0x92>
 8000a96:	fab0 fc80 	clz	ip, r0
 8000a9a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a9e:	ebb2 020c 	subs.w	r2, r2, ip
 8000aa2:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aa6:	bfaa      	itet	ge
 8000aa8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aac:	4252      	neglt	r2, r2
 8000aae:	4318      	orrge	r0, r3
 8000ab0:	bfbc      	itt	lt
 8000ab2:	40d0      	lsrlt	r0, r2
 8000ab4:	4318      	orrlt	r0, r3
 8000ab6:	4770      	bx	lr
 8000ab8:	f092 0f00 	teq	r2, #0
 8000abc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ac0:	bf06      	itte	eq
 8000ac2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ac6:	3201      	addeq	r2, #1
 8000ac8:	3b01      	subne	r3, #1
 8000aca:	e7b5      	b.n	8000a38 <__addsf3+0x58>
 8000acc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ad4:	bf18      	it	ne
 8000ad6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ada:	d021      	beq.n	8000b20 <__addsf3+0x140>
 8000adc:	ea92 0f03 	teq	r2, r3
 8000ae0:	d004      	beq.n	8000aec <__addsf3+0x10c>
 8000ae2:	f092 0f00 	teq	r2, #0
 8000ae6:	bf08      	it	eq
 8000ae8:	4608      	moveq	r0, r1
 8000aea:	4770      	bx	lr
 8000aec:	ea90 0f01 	teq	r0, r1
 8000af0:	bf1c      	itt	ne
 8000af2:	2000      	movne	r0, #0
 8000af4:	4770      	bxne	lr
 8000af6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000afa:	d104      	bne.n	8000b06 <__addsf3+0x126>
 8000afc:	0040      	lsls	r0, r0, #1
 8000afe:	bf28      	it	cs
 8000b00:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b04:	4770      	bx	lr
 8000b06:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b0a:	bf3c      	itt	cc
 8000b0c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b10:	4770      	bxcc	lr
 8000b12:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b16:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	4770      	bx	lr
 8000b20:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b24:	bf16      	itet	ne
 8000b26:	4608      	movne	r0, r1
 8000b28:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b2c:	4601      	movne	r1, r0
 8000b2e:	0242      	lsls	r2, r0, #9
 8000b30:	bf06      	itte	eq
 8000b32:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b36:	ea90 0f01 	teqeq	r0, r1
 8000b3a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_ui2f>:
 8000b40:	f04f 0300 	mov.w	r3, #0
 8000b44:	e004      	b.n	8000b50 <__aeabi_i2f+0x8>
 8000b46:	bf00      	nop

08000b48 <__aeabi_i2f>:
 8000b48:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b4c:	bf48      	it	mi
 8000b4e:	4240      	negmi	r0, r0
 8000b50:	ea5f 0c00 	movs.w	ip, r0
 8000b54:	bf08      	it	eq
 8000b56:	4770      	bxeq	lr
 8000b58:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	e01c      	b.n	8000b9e <__aeabi_l2f+0x2a>

08000b64 <__aeabi_ul2f>:
 8000b64:	ea50 0201 	orrs.w	r2, r0, r1
 8000b68:	bf08      	it	eq
 8000b6a:	4770      	bxeq	lr
 8000b6c:	f04f 0300 	mov.w	r3, #0
 8000b70:	e00a      	b.n	8000b88 <__aeabi_l2f+0x14>
 8000b72:	bf00      	nop

08000b74 <__aeabi_l2f>:
 8000b74:	ea50 0201 	orrs.w	r2, r0, r1
 8000b78:	bf08      	it	eq
 8000b7a:	4770      	bxeq	lr
 8000b7c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b80:	d502      	bpl.n	8000b88 <__aeabi_l2f+0x14>
 8000b82:	4240      	negs	r0, r0
 8000b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b88:	ea5f 0c01 	movs.w	ip, r1
 8000b8c:	bf02      	ittt	eq
 8000b8e:	4684      	moveq	ip, r0
 8000b90:	4601      	moveq	r1, r0
 8000b92:	2000      	moveq	r0, #0
 8000b94:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b98:	bf08      	it	eq
 8000b9a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ba2:	fabc f28c 	clz	r2, ip
 8000ba6:	3a08      	subs	r2, #8
 8000ba8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bac:	db10      	blt.n	8000bd0 <__aeabi_l2f+0x5c>
 8000bae:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb8:	f1c2 0220 	rsb	r2, r2, #32
 8000bbc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bc0:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc4:	eb43 0002 	adc.w	r0, r3, r2
 8000bc8:	bf08      	it	eq
 8000bca:	f020 0001 	biceq.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	f102 0220 	add.w	r2, r2, #32
 8000bd4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd8:	f1c2 0220 	rsb	r2, r2, #32
 8000bdc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be0:	fa21 f202 	lsr.w	r2, r1, r2
 8000be4:	eb43 0002 	adc.w	r0, r3, r2
 8000be8:	bf08      	it	eq
 8000bea:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_fmul>:
 8000bf0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bf4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf8:	bf1e      	ittt	ne
 8000bfa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bfe:	ea92 0f0c 	teqne	r2, ip
 8000c02:	ea93 0f0c 	teqne	r3, ip
 8000c06:	d06f      	beq.n	8000ce8 <__aeabi_fmul+0xf8>
 8000c08:	441a      	add	r2, r3
 8000c0a:	ea80 0c01 	eor.w	ip, r0, r1
 8000c0e:	0240      	lsls	r0, r0, #9
 8000c10:	bf18      	it	ne
 8000c12:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c16:	d01e      	beq.n	8000c56 <__aeabi_fmul+0x66>
 8000c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c1c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c20:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c24:	fba0 3101 	umull	r3, r1, r0, r1
 8000c28:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c2c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c30:	bf3e      	ittt	cc
 8000c32:	0049      	lslcc	r1, r1, #1
 8000c34:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c38:	005b      	lslcc	r3, r3, #1
 8000c3a:	ea40 0001 	orr.w	r0, r0, r1
 8000c3e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c42:	2afd      	cmp	r2, #253	; 0xfd
 8000c44:	d81d      	bhi.n	8000c82 <__aeabi_fmul+0x92>
 8000c46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c4a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c4e:	bf08      	it	eq
 8000c50:	f020 0001 	biceq.w	r0, r0, #1
 8000c54:	4770      	bx	lr
 8000c56:	f090 0f00 	teq	r0, #0
 8000c5a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c5e:	bf08      	it	eq
 8000c60:	0249      	lsleq	r1, r1, #9
 8000c62:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c66:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c6a:	3a7f      	subs	r2, #127	; 0x7f
 8000c6c:	bfc2      	ittt	gt
 8000c6e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c72:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c76:	4770      	bxgt	lr
 8000c78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c7c:	f04f 0300 	mov.w	r3, #0
 8000c80:	3a01      	subs	r2, #1
 8000c82:	dc5d      	bgt.n	8000d40 <__aeabi_fmul+0x150>
 8000c84:	f112 0f19 	cmn.w	r2, #25
 8000c88:	bfdc      	itt	le
 8000c8a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bxle	lr
 8000c90:	f1c2 0200 	rsb	r2, r2, #0
 8000c94:	0041      	lsls	r1, r0, #1
 8000c96:	fa21 f102 	lsr.w	r1, r1, r2
 8000c9a:	f1c2 0220 	rsb	r2, r2, #32
 8000c9e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ca2:	ea5f 0031 	movs.w	r0, r1, rrx
 8000ca6:	f140 0000 	adc.w	r0, r0, #0
 8000caa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000cae:	bf08      	it	eq
 8000cb0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb4:	4770      	bx	lr
 8000cb6:	f092 0f00 	teq	r2, #0
 8000cba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cbe:	bf02      	ittt	eq
 8000cc0:	0040      	lsleq	r0, r0, #1
 8000cc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cc6:	3a01      	subeq	r2, #1
 8000cc8:	d0f9      	beq.n	8000cbe <__aeabi_fmul+0xce>
 8000cca:	ea40 000c 	orr.w	r0, r0, ip
 8000cce:	f093 0f00 	teq	r3, #0
 8000cd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cd6:	bf02      	ittt	eq
 8000cd8:	0049      	lsleq	r1, r1, #1
 8000cda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cde:	3b01      	subeq	r3, #1
 8000ce0:	d0f9      	beq.n	8000cd6 <__aeabi_fmul+0xe6>
 8000ce2:	ea41 010c 	orr.w	r1, r1, ip
 8000ce6:	e78f      	b.n	8000c08 <__aeabi_fmul+0x18>
 8000ce8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cec:	ea92 0f0c 	teq	r2, ip
 8000cf0:	bf18      	it	ne
 8000cf2:	ea93 0f0c 	teqne	r3, ip
 8000cf6:	d00a      	beq.n	8000d0e <__aeabi_fmul+0x11e>
 8000cf8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cfc:	bf18      	it	ne
 8000cfe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000d02:	d1d8      	bne.n	8000cb6 <__aeabi_fmul+0xc6>
 8000d04:	ea80 0001 	eor.w	r0, r0, r1
 8000d08:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d0c:	4770      	bx	lr
 8000d0e:	f090 0f00 	teq	r0, #0
 8000d12:	bf17      	itett	ne
 8000d14:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d18:	4608      	moveq	r0, r1
 8000d1a:	f091 0f00 	teqne	r1, #0
 8000d1e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d22:	d014      	beq.n	8000d4e <__aeabi_fmul+0x15e>
 8000d24:	ea92 0f0c 	teq	r2, ip
 8000d28:	d101      	bne.n	8000d2e <__aeabi_fmul+0x13e>
 8000d2a:	0242      	lsls	r2, r0, #9
 8000d2c:	d10f      	bne.n	8000d4e <__aeabi_fmul+0x15e>
 8000d2e:	ea93 0f0c 	teq	r3, ip
 8000d32:	d103      	bne.n	8000d3c <__aeabi_fmul+0x14c>
 8000d34:	024b      	lsls	r3, r1, #9
 8000d36:	bf18      	it	ne
 8000d38:	4608      	movne	r0, r1
 8000d3a:	d108      	bne.n	8000d4e <__aeabi_fmul+0x15e>
 8000d3c:	ea80 0001 	eor.w	r0, r0, r1
 8000d40:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d4c:	4770      	bx	lr
 8000d4e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d52:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fdiv>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d069      	beq.n	8000e44 <__aeabi_fdiv+0xec>
 8000d70:	eba2 0203 	sub.w	r2, r2, r3
 8000d74:	ea80 0c01 	eor.w	ip, r0, r1
 8000d78:	0249      	lsls	r1, r1, #9
 8000d7a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d7e:	d037      	beq.n	8000df0 <__aeabi_fdiv+0x98>
 8000d80:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d84:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d88:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d8c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d90:	428b      	cmp	r3, r1
 8000d92:	bf38      	it	cc
 8000d94:	005b      	lslcc	r3, r3, #1
 8000d96:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d9a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	bf24      	itt	cs
 8000da2:	1a5b      	subcs	r3, r3, r1
 8000da4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000dac:	bf24      	itt	cs
 8000dae:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000db2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000db6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000dba:	bf24      	itt	cs
 8000dbc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000dc0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dc4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc8:	bf24      	itt	cs
 8000dca:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dce:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dd2:	011b      	lsls	r3, r3, #4
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dda:	d1e0      	bne.n	8000d9e <__aeabi_fdiv+0x46>
 8000ddc:	2afd      	cmp	r2, #253	; 0xfd
 8000dde:	f63f af50 	bhi.w	8000c82 <__aeabi_fmul+0x92>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de8:	bf08      	it	eq
 8000dea:	f020 0001 	biceq.w	r0, r0, #1
 8000dee:	4770      	bx	lr
 8000df0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df8:	327f      	adds	r2, #127	; 0x7f
 8000dfa:	bfc2      	ittt	gt
 8000dfc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e00:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e04:	4770      	bxgt	lr
 8000e06:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e0a:	f04f 0300 	mov.w	r3, #0
 8000e0e:	3a01      	subs	r2, #1
 8000e10:	e737      	b.n	8000c82 <__aeabi_fmul+0x92>
 8000e12:	f092 0f00 	teq	r2, #0
 8000e16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e1a:	bf02      	ittt	eq
 8000e1c:	0040      	lsleq	r0, r0, #1
 8000e1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e22:	3a01      	subeq	r2, #1
 8000e24:	d0f9      	beq.n	8000e1a <__aeabi_fdiv+0xc2>
 8000e26:	ea40 000c 	orr.w	r0, r0, ip
 8000e2a:	f093 0f00 	teq	r3, #0
 8000e2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e32:	bf02      	ittt	eq
 8000e34:	0049      	lsleq	r1, r1, #1
 8000e36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e3a:	3b01      	subeq	r3, #1
 8000e3c:	d0f9      	beq.n	8000e32 <__aeabi_fdiv+0xda>
 8000e3e:	ea41 010c 	orr.w	r1, r1, ip
 8000e42:	e795      	b.n	8000d70 <__aeabi_fdiv+0x18>
 8000e44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e48:	ea92 0f0c 	teq	r2, ip
 8000e4c:	d108      	bne.n	8000e60 <__aeabi_fdiv+0x108>
 8000e4e:	0242      	lsls	r2, r0, #9
 8000e50:	f47f af7d 	bne.w	8000d4e <__aeabi_fmul+0x15e>
 8000e54:	ea93 0f0c 	teq	r3, ip
 8000e58:	f47f af70 	bne.w	8000d3c <__aeabi_fmul+0x14c>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	e776      	b.n	8000d4e <__aeabi_fmul+0x15e>
 8000e60:	ea93 0f0c 	teq	r3, ip
 8000e64:	d104      	bne.n	8000e70 <__aeabi_fdiv+0x118>
 8000e66:	024b      	lsls	r3, r1, #9
 8000e68:	f43f af4c 	beq.w	8000d04 <__aeabi_fmul+0x114>
 8000e6c:	4608      	mov	r0, r1
 8000e6e:	e76e      	b.n	8000d4e <__aeabi_fmul+0x15e>
 8000e70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e74:	bf18      	it	ne
 8000e76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e7a:	d1ca      	bne.n	8000e12 <__aeabi_fdiv+0xba>
 8000e7c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e80:	f47f af5c 	bne.w	8000d3c <__aeabi_fmul+0x14c>
 8000e84:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e88:	f47f af3c 	bne.w	8000d04 <__aeabi_fmul+0x114>
 8000e8c:	e75f      	b.n	8000d4e <__aeabi_fmul+0x15e>
 8000e8e:	bf00      	nop

08000e90 <__gesf2>:
 8000e90:	f04f 3cff 	mov.w	ip, #4294967295
 8000e94:	e006      	b.n	8000ea4 <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__lesf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	e002      	b.n	8000ea4 <__cmpsf2+0x4>
 8000e9e:	bf00      	nop

08000ea0 <__cmpsf2>:
 8000ea0:	f04f 0c01 	mov.w	ip, #1
 8000ea4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000eac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000eb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb4:	bf18      	it	ne
 8000eb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eba:	d011      	beq.n	8000ee0 <__cmpsf2+0x40>
 8000ebc:	b001      	add	sp, #4
 8000ebe:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ec2:	bf18      	it	ne
 8000ec4:	ea90 0f01 	teqne	r0, r1
 8000ec8:	bf58      	it	pl
 8000eca:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ece:	bf88      	it	hi
 8000ed0:	17c8      	asrhi	r0, r1, #31
 8000ed2:	bf38      	it	cc
 8000ed4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed8:	bf18      	it	ne
 8000eda:	f040 0001 	orrne.w	r0, r0, #1
 8000ede:	4770      	bx	lr
 8000ee0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ee4:	d102      	bne.n	8000eec <__cmpsf2+0x4c>
 8000ee6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eea:	d105      	bne.n	8000ef8 <__cmpsf2+0x58>
 8000eec:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ef0:	d1e4      	bne.n	8000ebc <__cmpsf2+0x1c>
 8000ef2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ef6:	d0e1      	beq.n	8000ebc <__cmpsf2+0x1c>
 8000ef8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <__aeabi_cfrcmple>:
 8000f00:	4684      	mov	ip, r0
 8000f02:	4608      	mov	r0, r1
 8000f04:	4661      	mov	r1, ip
 8000f06:	e7ff      	b.n	8000f08 <__aeabi_cfcmpeq>

08000f08 <__aeabi_cfcmpeq>:
 8000f08:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f0a:	f7ff ffc9 	bl	8000ea0 <__cmpsf2>
 8000f0e:	2800      	cmp	r0, #0
 8000f10:	bf48      	it	mi
 8000f12:	f110 0f00 	cmnmi.w	r0, #0
 8000f16:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f18 <__aeabi_fcmpeq>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff fff4 	bl	8000f08 <__aeabi_cfcmpeq>
 8000f20:	bf0c      	ite	eq
 8000f22:	2001      	moveq	r0, #1
 8000f24:	2000      	movne	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmplt>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffea 	bl	8000f08 <__aeabi_cfcmpeq>
 8000f34:	bf34      	ite	cc
 8000f36:	2001      	movcc	r0, #1
 8000f38:	2000      	movcs	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmple>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffe0 	bl	8000f08 <__aeabi_cfcmpeq>
 8000f48:	bf94      	ite	ls
 8000f4a:	2001      	movls	r0, #1
 8000f4c:	2000      	movhi	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_fcmpge>:
 8000f54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f58:	f7ff ffd2 	bl	8000f00 <__aeabi_cfrcmple>
 8000f5c:	bf94      	ite	ls
 8000f5e:	2001      	movls	r0, #1
 8000f60:	2000      	movhi	r0, #0
 8000f62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f66:	bf00      	nop

08000f68 <__aeabi_fcmpgt>:
 8000f68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f6c:	f7ff ffc8 	bl	8000f00 <__aeabi_cfrcmple>
 8000f70:	bf34      	ite	cc
 8000f72:	2001      	movcc	r0, #1
 8000f74:	2000      	movcs	r0, #0
 8000f76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f7a:	bf00      	nop

08000f7c <__aeabi_f2iz>:
 8000f7c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f80:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f84:	d30f      	bcc.n	8000fa6 <__aeabi_f2iz+0x2a>
 8000f86:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f8a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f8e:	d90d      	bls.n	8000fac <__aeabi_f2iz+0x30>
 8000f90:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f94:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f98:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f9c:	fa23 f002 	lsr.w	r0, r3, r2
 8000fa0:	bf18      	it	ne
 8000fa2:	4240      	negne	r0, r0
 8000fa4:	4770      	bx	lr
 8000fa6:	f04f 0000 	mov.w	r0, #0
 8000faa:	4770      	bx	lr
 8000fac:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fb0:	d101      	bne.n	8000fb6 <__aeabi_f2iz+0x3a>
 8000fb2:	0242      	lsls	r2, r0, #9
 8000fb4:	d105      	bne.n	8000fc2 <__aeabi_f2iz+0x46>
 8000fb6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fba:	bf08      	it	eq
 8000fbc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr

08000fc8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	613b      	str	r3, [r7, #16]
 8000fd8:	230f      	movs	r3, #15
 8000fda:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	78db      	ldrb	r3, [r3, #3]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d03a      	beq.n	800105a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000fe4:	4b27      	ldr	r3, [pc, #156]	; (8001084 <NVIC_Init+0xbc>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	f003 0307 	and.w	r3, r3, #7
 8000ff0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	f1c3 0304 	rsb	r3, r3, #4
 8000ff8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000ffa:	68fa      	ldr	r2, [r7, #12]
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8001002:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	785b      	ldrb	r3, [r3, #1]
 8001008:	461a      	mov	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	789b      	ldrb	r3, [r3, #2]
 8001016:	461a      	mov	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4013      	ands	r3, r2
 800101c:	697a      	ldr	r2, [r7, #20]
 800101e:	4313      	orrs	r3, r2
 8001020:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8001028:	4a17      	ldr	r2, [pc, #92]	; (8001088 <NVIC_Init+0xc0>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	6979      	ldr	r1, [r7, #20]
 8001030:	b2c9      	uxtb	r1, r1
 8001032:	4413      	add	r3, r2
 8001034:	460a      	mov	r2, r1
 8001036:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <NVIC_Init+0xc0>)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	095b      	lsrs	r3, r3, #5
 8001042:	b2db      	uxtb	r3, r3
 8001044:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	f003 031f 	and.w	r3, r3, #31
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001054:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001058:	e00f      	b.n	800107a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800105a:	490b      	ldr	r1, [pc, #44]	; (8001088 <NVIC_Init+0xc0>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	095b      	lsrs	r3, r3, #5
 8001062:	b2db      	uxtb	r3, r3
 8001064:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	f003 031f 	and.w	r3, r3, #31
 800106e:	2201      	movs	r2, #1
 8001070:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001072:	f100 0320 	add.w	r3, r0, #32
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800107a:	bf00      	nop
 800107c:	371c      	adds	r7, #28
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00
 8001088:	e000e100 	.word	0xe000e100

0800108c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800108c:	b480      	push	{r7}
 800108e:	b089      	sub	sp, #36	; 0x24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
 800109e:	2300      	movs	r3, #0
 80010a0:	61bb      	str	r3, [r7, #24]
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	78db      	ldrb	r3, [r3, #3]
 80010b2:	f003 030f 	and.w	r3, r3, #15
 80010b6:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	78db      	ldrb	r3, [r3, #3]
 80010bc:	f003 0310 	and.w	r3, r3, #16
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	789b      	ldrb	r3, [r3, #2]
 80010c8:	461a      	mov	r2, r3
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	881b      	ldrh	r3, [r3, #0]
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d044      	beq.n	8001164 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80010e0:	2300      	movs	r3, #0
 80010e2:	61bb      	str	r3, [r7, #24]
 80010e4:	e038      	b.n	8001158 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80010e6:	2201      	movs	r2, #1
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	fa02 f303 	lsl.w	r3, r2, r3
 80010ee:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	881b      	ldrh	r3, [r3, #0]
 80010f4:	461a      	mov	r2, r3
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	429a      	cmp	r2, r3
 8001102:	d126      	bne.n	8001152 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800110a:	220f      	movs	r2, #15
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	43db      	mvns	r3, r3
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	4013      	ands	r3, r2
 800111c:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 800111e:	69fa      	ldr	r2, [r7, #28]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	fa02 f303 	lsl.w	r3, r2, r3
 8001126:	697a      	ldr	r2, [r7, #20]
 8001128:	4313      	orrs	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	78db      	ldrb	r3, [r3, #3]
 8001130:	2b28      	cmp	r3, #40	; 0x28
 8001132:	d105      	bne.n	8001140 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001134:	2201      	movs	r2, #1
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	409a      	lsls	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	615a      	str	r2, [r3, #20]
 800113e:	e008      	b.n	8001152 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	2b48      	cmp	r3, #72	; 0x48
 8001146:	d104      	bne.n	8001152 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001148:	2201      	movs	r2, #1
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	409a      	lsls	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	3301      	adds	r3, #1
 8001156:	61bb      	str	r3, [r7, #24]
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2b07      	cmp	r3, #7
 800115c:	d9c3      	bls.n	80010e6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	2bff      	cmp	r3, #255	; 0xff
 800116a:	d946      	bls.n	80011fa <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001172:	2300      	movs	r3, #0
 8001174:	61bb      	str	r3, [r7, #24]
 8001176:	e03a      	b.n	80011ee <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	3308      	adds	r3, #8
 800117c:	2201      	movs	r2, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	461a      	mov	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	429a      	cmp	r2, r3
 8001196:	d127      	bne.n	80011e8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800119e:	220f      	movs	r2, #15
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	fa02 f303 	lsl.w	r3, r2, r3
 80011a6:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4013      	ands	r3, r2
 80011b0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	4313      	orrs	r3, r2
 80011be:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	78db      	ldrb	r3, [r3, #3]
 80011c4:	2b28      	cmp	r3, #40	; 0x28
 80011c6:	d105      	bne.n	80011d4 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	3308      	adds	r3, #8
 80011cc:	2201      	movs	r2, #1
 80011ce:	409a      	lsls	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	78db      	ldrb	r3, [r3, #3]
 80011d8:	2b48      	cmp	r3, #72	; 0x48
 80011da:	d105      	bne.n	80011e8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	3308      	adds	r3, #8
 80011e0:	2201      	movs	r2, #1
 80011e2:	409a      	lsls	r2, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	3301      	adds	r3, #1
 80011ec:	61bb      	str	r3, [r7, #24]
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d9c1      	bls.n	8001178 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	697a      	ldr	r2, [r7, #20]
 80011f8:	605a      	str	r2, [r3, #4]
  }
}
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 8001220:	e002      	b.n	8001228 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	615a      	str	r2, [r3, #20]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
	...

08001234 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2b00      	cmp	r3, #0
 8001254:	da03      	bge.n	800125e <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 8001256:	4b2e      	ldr	r3, [pc, #184]	; (8001310 <GPIO_PinRemapConfig+0xdc>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	617b      	str	r3, [r7, #20]
 800125c:	e002      	b.n	8001264 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 800125e:	4b2c      	ldr	r3, [pc, #176]	; (8001310 <GPIO_PinRemapConfig+0xdc>)
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	0c1b      	lsrs	r3, r3, #16
 8001268:	f003 030f 	and.w	r3, r3, #15
 800126c:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	b29b      	uxth	r3, r3
 8001272:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800127a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800127e:	d10a      	bne.n	8001296 <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001286:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 8001288:	4a21      	ldr	r2, [pc, #132]	; (8001310 <GPIO_PinRemapConfig+0xdc>)
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <GPIO_PinRemapConfig+0xdc>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8001292:	6053      	str	r3, [r2, #4]
 8001294:	e021      	b.n	80012da <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00e      	beq.n	80012be <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 80012a0:	2203      	movs	r2, #3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	697a      	ldr	r2, [r7, #20]
 80012b0:	4013      	ands	r3, r2
 80012b2:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80012ba:	617b      	str	r3, [r7, #20]
 80012bc:	e00d      	b.n	80012da <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	0d5b      	lsrs	r3, r3, #21
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43db      	mvns	r3, r3
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	4013      	ands	r3, r2
 80012d0:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80012d8:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 80012da:	78fb      	ldrb	r3, [r7, #3]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d008      	beq.n	80012f2 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0d5b      	lsrs	r3, r3, #21
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	697a      	ldr	r2, [r7, #20]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	da03      	bge.n	8001300 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 80012f8:	4a05      	ldr	r2, [pc, #20]	; (8001310 <GPIO_PinRemapConfig+0xdc>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 80012fe:	e002      	b.n	8001306 <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 8001300:	4a03      	ldr	r2, [pc, #12]	; (8001310 <GPIO_PinRemapConfig+0xdc>)
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	6053      	str	r3, [r2, #4]
}
 8001306:	bf00      	nop
 8001308:	371c      	adds	r7, #28
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr
 8001310:	40010000 	.word	0x40010000

08001314 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	460b      	mov	r3, r1
 800131e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001320:	78fb      	ldrb	r3, [r7, #3]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d006      	beq.n	8001334 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8001326:	4909      	ldr	r1, [pc, #36]	; (800134c <RCC_APB2PeriphClockCmd+0x38>)
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <RCC_APB2PeriphClockCmd+0x38>)
 800132a:	699a      	ldr	r2, [r3, #24]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4313      	orrs	r3, r2
 8001330:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001332:	e006      	b.n	8001342 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001334:	4905      	ldr	r1, [pc, #20]	; (800134c <RCC_APB2PeriphClockCmd+0x38>)
 8001336:	4b05      	ldr	r3, [pc, #20]	; (800134c <RCC_APB2PeriphClockCmd+0x38>)
 8001338:	699a      	ldr	r2, [r3, #24]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	43db      	mvns	r3, r3
 800133e:	4013      	ands	r3, r2
 8001340:	618b      	str	r3, [r1, #24]
}
 8001342:	bf00      	nop
 8001344:	370c      	adds	r7, #12
 8001346:	46bd      	mov	sp, r7
 8001348:	bc80      	pop	{r7}
 800134a:	4770      	bx	lr
 800134c:	40021000 	.word	0x40021000

08001350 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	460b      	mov	r3, r1
 800135a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800135c:	78fb      	ldrb	r3, [r7, #3]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d006      	beq.n	8001370 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8001362:	4909      	ldr	r1, [pc, #36]	; (8001388 <RCC_APB1PeriphClockCmd+0x38>)
 8001364:	4b08      	ldr	r3, [pc, #32]	; (8001388 <RCC_APB1PeriphClockCmd+0x38>)
 8001366:	69da      	ldr	r2, [r3, #28]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4313      	orrs	r3, r2
 800136c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800136e:	e006      	b.n	800137e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8001370:	4905      	ldr	r1, [pc, #20]	; (8001388 <RCC_APB1PeriphClockCmd+0x38>)
 8001372:	4b05      	ldr	r3, [pc, #20]	; (8001388 <RCC_APB1PeriphClockCmd+0x38>)
 8001374:	69da      	ldr	r2, [r3, #28]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	43db      	mvns	r3, r3
 800137a:	4013      	ands	r3, r2
 800137c:	61cb      	str	r3, [r1, #28]
}
 800137e:	bf00      	nop
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	40021000 	.word	0x40021000

0800138c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8001396:	2300      	movs	r3, #0
 8001398:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	881b      	ldrh	r3, [r3, #0]
 800139e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4a2e      	ldr	r2, [pc, #184]	; (800145c <TIM_TimeBaseInit+0xd0>)
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d013      	beq.n	80013d0 <TIM_TimeBaseInit+0x44>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a2d      	ldr	r2, [pc, #180]	; (8001460 <TIM_TimeBaseInit+0xd4>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d00f      	beq.n	80013d0 <TIM_TimeBaseInit+0x44>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013b6:	d00b      	beq.n	80013d0 <TIM_TimeBaseInit+0x44>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a2a      	ldr	r2, [pc, #168]	; (8001464 <TIM_TimeBaseInit+0xd8>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d007      	beq.n	80013d0 <TIM_TimeBaseInit+0x44>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a29      	ldr	r2, [pc, #164]	; (8001468 <TIM_TimeBaseInit+0xdc>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d003      	beq.n	80013d0 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a28      	ldr	r2, [pc, #160]	; (800146c <TIM_TimeBaseInit+0xe0>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d108      	bne.n	80013e2 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80013d0:	89fb      	ldrh	r3, [r7, #14]
 80013d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013d6:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	885a      	ldrh	r2, [r3, #2]
 80013dc:	89fb      	ldrh	r3, [r7, #14]
 80013de:	4313      	orrs	r3, r2
 80013e0:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a22      	ldr	r2, [pc, #136]	; (8001470 <TIM_TimeBaseInit+0xe4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d00c      	beq.n	8001404 <TIM_TimeBaseInit+0x78>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a21      	ldr	r2, [pc, #132]	; (8001474 <TIM_TimeBaseInit+0xe8>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d008      	beq.n	8001404 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 80013f2:	89fb      	ldrh	r3, [r7, #14]
 80013f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80013f8:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	88da      	ldrh	r2, [r3, #6]
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	4313      	orrs	r3, r2
 8001402:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	89fa      	ldrh	r2, [r7, #14]
 8001408:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	889a      	ldrh	r2, [r3, #4]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	881a      	ldrh	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0f      	ldr	r2, [pc, #60]	; (800145c <TIM_TimeBaseInit+0xd0>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d00f      	beq.n	8001442 <TIM_TimeBaseInit+0xb6>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <TIM_TimeBaseInit+0xd4>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00b      	beq.n	8001442 <TIM_TimeBaseInit+0xb6>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a12      	ldr	r2, [pc, #72]	; (8001478 <TIM_TimeBaseInit+0xec>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d007      	beq.n	8001442 <TIM_TimeBaseInit+0xb6>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a11      	ldr	r2, [pc, #68]	; (800147c <TIM_TimeBaseInit+0xf0>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d003      	beq.n	8001442 <TIM_TimeBaseInit+0xb6>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a10      	ldr	r2, [pc, #64]	; (8001480 <TIM_TimeBaseInit+0xf4>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d104      	bne.n	800144c <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	7a1b      	ldrb	r3, [r3, #8]
 8001446:	b29a      	uxth	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2201      	movs	r2, #1
 8001450:	829a      	strh	r2, [r3, #20]
}
 8001452:	bf00      	nop
 8001454:	3714      	adds	r7, #20
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40012c00 	.word	0x40012c00
 8001460:	40013400 	.word	0x40013400
 8001464:	40000400 	.word	0x40000400
 8001468:	40000800 	.word	0x40000800
 800146c:	40000c00 	.word	0x40000c00
 8001470:	40001000 	.word	0x40001000
 8001474:	40001400 	.word	0x40001400
 8001478:	40014000 	.word	0x40014000
 800147c:	40014400 	.word	0x40014400
 8001480:	40014800 	.word	0x40014800

08001484 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	881b      	ldrh	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d10f      	bne.n	80014b6 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	8859      	ldrh	r1, [r3, #2]
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	889a      	ldrh	r2, [r3, #4]
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	891b      	ldrh	r3, [r3, #8]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 f910 	bl	80016c8 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	88db      	ldrh	r3, [r3, #6]
 80014ac:	4619      	mov	r1, r3
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f87e 	bl	80015b0 <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 80014b4:	e036      	b.n	8001524 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	881b      	ldrh	r3, [r3, #0]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d10f      	bne.n	80014de <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	8859      	ldrh	r1, [r3, #2]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	889a      	ldrh	r2, [r3, #4]
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	891b      	ldrh	r3, [r3, #8]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f96c 	bl	80017a8 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	88db      	ldrh	r3, [r3, #6]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f000 f885 	bl	80015e6 <TIM_SetIC2Prescaler>
}
 80014dc:	e022      	b.n	8001524 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	881b      	ldrh	r3, [r3, #0]
 80014e2:	2b08      	cmp	r3, #8
 80014e4:	d10f      	bne.n	8001506 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	8859      	ldrh	r1, [r3, #2]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	889a      	ldrh	r2, [r3, #4]
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	891b      	ldrh	r3, [r3, #8]
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f000 f9d2 	bl	800189c <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	88db      	ldrh	r3, [r3, #6]
 80014fc:	4619      	mov	r1, r3
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f88e 	bl	8001620 <TIM_SetIC3Prescaler>
}
 8001504:	e00e      	b.n	8001524 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	8859      	ldrh	r1, [r3, #2]
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	889a      	ldrh	r2, [r3, #4]
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	891b      	ldrh	r3, [r3, #8]
 8001512:	6878      	ldr	r0, [r7, #4]
 8001514:	f000 fa38 	bl	8001988 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	88db      	ldrh	r3, [r3, #6]
 800151c:	4619      	mov	r1, r3
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f899 	bl	8001656 <TIM_SetIC4Prescaler>
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001538:	78fb      	ldrb	r3, [r7, #3]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d008      	beq.n	8001550 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	881b      	ldrh	r3, [r3, #0]
 8001542:	b29b      	uxth	r3, r3
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	b29a      	uxth	r2, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 800154e:	e007      	b.n	8001560 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	b29a      	uxth	r2, r3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	801a      	strh	r2, [r3, #0]
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	bc80      	pop	{r7}
 8001568:	4770      	bx	lr

0800156a <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
 8001572:	460b      	mov	r3, r1
 8001574:	807b      	strh	r3, [r7, #2]
 8001576:	4613      	mov	r3, r2
 8001578:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800157a:	787b      	ldrb	r3, [r7, #1]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d008      	beq.n	8001592 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	899b      	ldrh	r3, [r3, #12]
 8001584:	b29a      	uxth	r2, r3
 8001586:	887b      	ldrh	r3, [r7, #2]
 8001588:	4313      	orrs	r3, r2
 800158a:	b29a      	uxth	r2, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8001590:	e009      	b.n	80015a6 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	899b      	ldrh	r3, [r3, #12]
 8001596:	b29a      	uxth	r2, r3
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	43db      	mvns	r3, r3
 800159c:	b29b      	uxth	r3, r3
 800159e:	4013      	ands	r3, r2
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	819a      	strh	r2, [r3, #12]
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr

080015b0 <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	8b1b      	ldrh	r3, [r3, #24]
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f023 030c 	bic.w	r3, r3, #12
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	8b1b      	ldrh	r3, [r3, #24]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	887b      	ldrh	r3, [r7, #2]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	831a      	strh	r2, [r3, #24]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
 80015ee:	460b      	mov	r3, r1
 80015f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	8b1b      	ldrh	r3, [r3, #24]
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	8b1b      	ldrh	r3, [r3, #24]
 8001606:	b29a      	uxth	r2, r3
 8001608:	887b      	ldrh	r3, [r7, #2]
 800160a:	021b      	lsls	r3, r3, #8
 800160c:	b29b      	uxth	r3, r3
 800160e:	4313      	orrs	r3, r2
 8001610:	b29a      	uxth	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	831a      	strh	r2, [r3, #24]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	8b9b      	ldrh	r3, [r3, #28]
 8001630:	b29b      	uxth	r3, r3
 8001632:	f023 030c 	bic.w	r3, r3, #12
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	8b9b      	ldrh	r3, [r3, #28]
 8001640:	b29a      	uxth	r2, r3
 8001642:	887b      	ldrh	r3, [r7, #2]
 8001644:	4313      	orrs	r3, r2
 8001646:	b29a      	uxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	839a      	strh	r2, [r3, #28]
}
 800164c:	bf00      	nop
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr

08001656 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 8001656:	b480      	push	{r7}
 8001658:	b083      	sub	sp, #12
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	8b9b      	ldrh	r3, [r3, #28]
 8001666:	b29b      	uxth	r3, r3
 8001668:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800166c:	b29a      	uxth	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	8b9b      	ldrh	r3, [r3, #28]
 8001676:	b29a      	uxth	r2, r3
 8001678:	887b      	ldrh	r3, [r7, #2]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	b29b      	uxth	r3, r3
 800167e:	4313      	orrs	r3, r2
 8001680:	b29a      	uxth	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	839a      	strh	r2, [r3, #28]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr

08001690 <TIM_GetCapture3>:
  * @brief  Gets the TIMx Input Capture 3 value.
  * @param  TIMx: where x can be 1, 2, 3, 4, 5 or 8 to select the TIM peripheral.
  * @retval Capture Compare 3 Register value.
  */
uint16_t TIM_GetCapture3(TIM_TypeDef* TIMx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800169c:	b29b      	uxth	r3, r3
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	460b      	mov	r3, r1
 80016b2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80016b4:	887b      	ldrh	r3, [r7, #2]
 80016b6:	43db      	mvns	r3, r3
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	821a      	strh	r2, [r3, #16]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bc80      	pop	{r7}
 80016c6:	4770      	bx	lr

080016c8 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b087      	sub	sp, #28
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	461a      	mov	r2, r3
 80016d6:	4603      	mov	r3, r0
 80016d8:	817b      	strh	r3, [r7, #10]
 80016da:	460b      	mov	r3, r1
 80016dc:	813b      	strh	r3, [r7, #8]
 80016de:	4613      	mov	r3, r2
 80016e0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 80016e2:	2300      	movs	r3, #0
 80016e4:	82bb      	strh	r3, [r7, #20]
 80016e6:	2300      	movs	r3, #0
 80016e8:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8c1b      	ldrh	r3, [r3, #32]
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f023 0301 	bic.w	r3, r3, #1
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	8b1b      	ldrh	r3, [r3, #24]
 80016fe:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8c1b      	ldrh	r3, [r3, #32]
 8001704:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001706:	8abb      	ldrh	r3, [r7, #20]
 8001708:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 800170c:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800170e:	88fb      	ldrh	r3, [r7, #6]
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	b29a      	uxth	r2, r3
 8001714:	893b      	ldrh	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
 8001718:	b29a      	uxth	r2, r3
 800171a:	8abb      	ldrh	r3, [r7, #20]
 800171c:	4313      	orrs	r3, r2
 800171e:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a1c      	ldr	r2, [pc, #112]	; (8001794 <TI1_Config+0xcc>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d013      	beq.n	8001750 <TI1_Config+0x88>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4a1b      	ldr	r2, [pc, #108]	; (8001798 <TI1_Config+0xd0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d00f      	beq.n	8001750 <TI1_Config+0x88>
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001736:	d00b      	beq.n	8001750 <TI1_Config+0x88>
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a18      	ldr	r2, [pc, #96]	; (800179c <TI1_Config+0xd4>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d007      	beq.n	8001750 <TI1_Config+0x88>
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a17      	ldr	r2, [pc, #92]	; (80017a0 <TI1_Config+0xd8>)
 8001744:	4293      	cmp	r3, r2
 8001746:	d003      	beq.n	8001750 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	4a16      	ldr	r2, [pc, #88]	; (80017a4 <TI1_Config+0xdc>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d10b      	bne.n	8001768 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 8001750:	8afb      	ldrh	r3, [r7, #22]
 8001752:	f023 0302 	bic.w	r3, r3, #2
 8001756:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001758:	897a      	ldrh	r2, [r7, #10]
 800175a:	8afb      	ldrh	r3, [r7, #22]
 800175c:	4313      	orrs	r3, r2
 800175e:	b29b      	uxth	r3, r3
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	82fb      	strh	r3, [r7, #22]
 8001766:	e00a      	b.n	800177e <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001768:	8afb      	ldrh	r3, [r7, #22]
 800176a:	f023 030a 	bic.w	r3, r3, #10
 800176e:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001770:	897a      	ldrh	r2, [r7, #10]
 8001772:	8afb      	ldrh	r3, [r7, #22]
 8001774:	4313      	orrs	r3, r2
 8001776:	b29b      	uxth	r3, r3
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	8aba      	ldrh	r2, [r7, #20]
 8001782:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	8afa      	ldrh	r2, [r7, #22]
 8001788:	841a      	strh	r2, [r3, #32]
}
 800178a:	bf00      	nop
 800178c:	371c      	adds	r7, #28
 800178e:	46bd      	mov	sp, r7
 8001790:	bc80      	pop	{r7}
 8001792:	4770      	bx	lr
 8001794:	40012c00 	.word	0x40012c00
 8001798:	40013400 	.word	0x40013400
 800179c:	40000400 	.word	0x40000400
 80017a0:	40000800 	.word	0x40000800
 80017a4:	40000c00 	.word	0x40000c00

080017a8 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	4608      	mov	r0, r1
 80017b2:	4611      	mov	r1, r2
 80017b4:	461a      	mov	r2, r3
 80017b6:	4603      	mov	r3, r0
 80017b8:	817b      	strh	r3, [r7, #10]
 80017ba:	460b      	mov	r3, r1
 80017bc:	813b      	strh	r3, [r7, #8]
 80017be:	4613      	mov	r3, r2
 80017c0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	82bb      	strh	r3, [r7, #20]
 80017c6:	2300      	movs	r3, #0
 80017c8:	82fb      	strh	r3, [r7, #22]
 80017ca:	2300      	movs	r3, #0
 80017cc:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	8c1b      	ldrh	r3, [r3, #32]
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	f023 0310 	bic.w	r3, r3, #16
 80017d8:	b29a      	uxth	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	8b1b      	ldrh	r3, [r3, #24]
 80017e2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8c1b      	ldrh	r3, [r3, #32]
 80017e8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80017ea:	897b      	ldrh	r3, [r7, #10]
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80017f0:	8abb      	ldrh	r3, [r7, #20]
 80017f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f6:	051b      	lsls	r3, r3, #20
 80017f8:	0d1b      	lsrs	r3, r3, #20
 80017fa:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	031b      	lsls	r3, r3, #12
 8001800:	b29a      	uxth	r2, r3
 8001802:	8abb      	ldrh	r3, [r7, #20]
 8001804:	4313      	orrs	r3, r2
 8001806:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8001808:	893b      	ldrh	r3, [r7, #8]
 800180a:	021b      	lsls	r3, r3, #8
 800180c:	b29a      	uxth	r2, r3
 800180e:	8abb      	ldrh	r3, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4a1c      	ldr	r2, [pc, #112]	; (8001888 <TI2_Config+0xe0>)
 8001818:	4293      	cmp	r3, r2
 800181a:	d013      	beq.n	8001844 <TI2_Config+0x9c>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	4a1b      	ldr	r2, [pc, #108]	; (800188c <TI2_Config+0xe4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d00f      	beq.n	8001844 <TI2_Config+0x9c>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182a:	d00b      	beq.n	8001844 <TI2_Config+0x9c>
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4a18      	ldr	r2, [pc, #96]	; (8001890 <TI2_Config+0xe8>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d007      	beq.n	8001844 <TI2_Config+0x9c>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4a17      	ldr	r2, [pc, #92]	; (8001894 <TI2_Config+0xec>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d003      	beq.n	8001844 <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	4a16      	ldr	r2, [pc, #88]	; (8001898 <TI2_Config+0xf0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d10b      	bne.n	800185c <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 8001844:	8afb      	ldrh	r3, [r7, #22]
 8001846:	f023 0320 	bic.w	r3, r3, #32
 800184a:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 800184c:	8a7a      	ldrh	r2, [r7, #18]
 800184e:	8afb      	ldrh	r3, [r7, #22]
 8001850:	4313      	orrs	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	f043 0310 	orr.w	r3, r3, #16
 8001858:	82fb      	strh	r3, [r7, #22]
 800185a:	e00a      	b.n	8001872 <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800185c:	8afb      	ldrh	r3, [r7, #22]
 800185e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001862:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 8001864:	897a      	ldrh	r2, [r7, #10]
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	4313      	orrs	r3, r2
 800186a:	b29b      	uxth	r3, r3
 800186c:	f043 0310 	orr.w	r3, r3, #16
 8001870:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	8aba      	ldrh	r2, [r7, #20]
 8001876:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	8afa      	ldrh	r2, [r7, #22]
 800187c:	841a      	strh	r2, [r3, #32]
}
 800187e:	bf00      	nop
 8001880:	371c      	adds	r7, #28
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	40012c00 	.word	0x40012c00
 800188c:	40013400 	.word	0x40013400
 8001890:	40000400 	.word	0x40000400
 8001894:	40000800 	.word	0x40000800
 8001898:	40000c00 	.word	0x40000c00

0800189c <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 800189c:	b480      	push	{r7}
 800189e:	b087      	sub	sp, #28
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	461a      	mov	r2, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	817b      	strh	r3, [r7, #10]
 80018ae:	460b      	mov	r3, r1
 80018b0:	813b      	strh	r3, [r7, #8]
 80018b2:	4613      	mov	r3, r2
 80018b4:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80018b6:	2300      	movs	r3, #0
 80018b8:	82bb      	strh	r3, [r7, #20]
 80018ba:	2300      	movs	r3, #0
 80018bc:	82fb      	strh	r3, [r7, #22]
 80018be:	2300      	movs	r3, #0
 80018c0:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	8c1b      	ldrh	r3, [r3, #32]
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018cc:	b29a      	uxth	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8b9b      	ldrh	r3, [r3, #28]
 80018d6:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	8c1b      	ldrh	r3, [r3, #32]
 80018dc:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 80018de:	897b      	ldrh	r3, [r7, #10]
 80018e0:	021b      	lsls	r3, r3, #8
 80018e2:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 80018e4:	8abb      	ldrh	r3, [r7, #20]
 80018e6:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 80018ea:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80018ec:	88fb      	ldrh	r3, [r7, #6]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	b29a      	uxth	r2, r3
 80018f2:	893b      	ldrh	r3, [r7, #8]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	b29a      	uxth	r2, r3
 80018f8:	8abb      	ldrh	r3, [r7, #20]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <TI3_Config+0xd8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d013      	beq.n	800192e <TI3_Config+0x92>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4a1b      	ldr	r2, [pc, #108]	; (8001978 <TI3_Config+0xdc>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d00f      	beq.n	800192e <TI3_Config+0x92>
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001914:	d00b      	beq.n	800192e <TI3_Config+0x92>
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	4a18      	ldr	r2, [pc, #96]	; (800197c <TI3_Config+0xe0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d007      	beq.n	800192e <TI3_Config+0x92>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a17      	ldr	r2, [pc, #92]	; (8001980 <TI3_Config+0xe4>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d003      	beq.n	800192e <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	4a16      	ldr	r2, [pc, #88]	; (8001984 <TI3_Config+0xe8>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10b      	bne.n	8001946 <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 800192e:	8afb      	ldrh	r3, [r7, #22]
 8001930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001934:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 8001936:	8a7a      	ldrh	r2, [r7, #18]
 8001938:	8afb      	ldrh	r3, [r7, #22]
 800193a:	4313      	orrs	r3, r2
 800193c:	b29b      	uxth	r3, r3
 800193e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001942:	82fb      	strh	r3, [r7, #22]
 8001944:	e00a      	b.n	800195c <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001946:	8afb      	ldrh	r3, [r7, #22]
 8001948:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800194c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 800194e:	897a      	ldrh	r2, [r7, #10]
 8001950:	8afb      	ldrh	r3, [r7, #22]
 8001952:	4313      	orrs	r3, r2
 8001954:	b29b      	uxth	r3, r3
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8aba      	ldrh	r2, [r7, #20]
 8001960:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	8afa      	ldrh	r2, [r7, #22]
 8001966:	841a      	strh	r2, [r3, #32]
}
 8001968:	bf00      	nop
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40012c00 	.word	0x40012c00
 8001978:	40013400 	.word	0x40013400
 800197c:	40000400 	.word	0x40000400
 8001980:	40000800 	.word	0x40000800
 8001984:	40000c00 	.word	0x40000c00

08001988 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8001988:	b480      	push	{r7}
 800198a:	b087      	sub	sp, #28
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	460b      	mov	r3, r1
 800199c:	813b      	strh	r3, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	82bb      	strh	r3, [r7, #20]
 80019a6:	2300      	movs	r3, #0
 80019a8:	82fb      	strh	r3, [r7, #22]
 80019aa:	2300      	movs	r3, #0
 80019ac:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	8c1b      	ldrh	r3, [r3, #32]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	8b9b      	ldrh	r3, [r3, #28]
 80019c2:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8c1b      	ldrh	r3, [r3, #32]
 80019c8:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 80019ca:	897b      	ldrh	r3, [r7, #10]
 80019cc:	031b      	lsls	r3, r3, #12
 80019ce:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 80019d0:	8abb      	ldrh	r3, [r7, #20]
 80019d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019d6:	051b      	lsls	r3, r3, #20
 80019d8:	0d1b      	lsrs	r3, r3, #20
 80019da:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	021b      	lsls	r3, r3, #8
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	8abb      	ldrh	r3, [r7, #20]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 80019e8:	88fb      	ldrh	r3, [r7, #6]
 80019ea:	031b      	lsls	r3, r3, #12
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	8abb      	ldrh	r3, [r7, #20]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4a1d      	ldr	r2, [pc, #116]	; (8001a6c <TI4_Config+0xe4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d013      	beq.n	8001a24 <TI4_Config+0x9c>
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4a1c      	ldr	r2, [pc, #112]	; (8001a70 <TI4_Config+0xe8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d00f      	beq.n	8001a24 <TI4_Config+0x9c>
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0a:	d00b      	beq.n	8001a24 <TI4_Config+0x9c>
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <TI4_Config+0xec>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d007      	beq.n	8001a24 <TI4_Config+0x9c>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <TI4_Config+0xf0>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d003      	beq.n	8001a24 <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4a17      	ldr	r2, [pc, #92]	; (8001a7c <TI4_Config+0xf4>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d10b      	bne.n	8001a3c <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8001a24:	8afb      	ldrh	r3, [r7, #22]
 8001a26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001a2a:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8001a2c:	8a7a      	ldrh	r2, [r7, #18]
 8001a2e:	8afb      	ldrh	r3, [r7, #22]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a38:	82fb      	strh	r3, [r7, #22]
 8001a3a:	e00c      	b.n	8001a56 <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8001a3c:	8afb      	ldrh	r3, [r7, #22]
 8001a3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001a42:	045b      	lsls	r3, r3, #17
 8001a44:	0c5b      	lsrs	r3, r3, #17
 8001a46:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8001a48:	897a      	ldrh	r2, [r7, #10]
 8001a4a:	8afb      	ldrh	r3, [r7, #22]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a54:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	8aba      	ldrh	r2, [r7, #20]
 8001a5a:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8afa      	ldrh	r2, [r7, #22]
 8001a60:	841a      	strh	r2, [r3, #32]
}
 8001a62:	bf00      	nop
 8001a64:	371c      	adds	r7, #28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	40012c00 	.word	0x40012c00
 8001a70:	40013400 	.word	0x40013400
 8001a74:	40000400 	.word	0x40000400
 8001a78:	40000800 	.word	0x40000800
 8001a7c:	40000c00 	.word	0x40000c00

08001a80 <Conf_GPIO>:
#include "conf_gpio.h"

void Conf_GPIO(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001a86:	2101      	movs	r1, #1
 8001a88:	2004      	movs	r0, #4
 8001a8a:	f7ff fc43 	bl	8001314 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef gpio_structA;
  gpio_structA.GPIO_Mode = GPIO_Mode_Out_PP;
 8001a8e:	2310      	movs	r3, #16
 8001a90:	71fb      	strb	r3, [r7, #7]
  gpio_structA.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 |
 8001a92:	23f7      	movs	r3, #247	; 0xf7
 8001a94:	80bb      	strh	r3, [r7, #4]
                    GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6 | GPIO_Pin_7;
  gpio_structA.GPIO_Speed = GPIO_Speed_2MHz;
 8001a96:	2302      	movs	r3, #2
 8001a98:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &gpio_structA);
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4803      	ldr	r0, [pc, #12]	; (8001aac <Conf_GPIO+0x2c>)
 8001aa0:	f7ff faf4 	bl	800108c <GPIO_Init>
}
 8001aa4:	bf00      	nop
 8001aa6:	3708      	adds	r7, #8
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40010800 	.word	0x40010800

08001ab0 <Conf_GPIO_Remap>:

void Conf_GPIO_Remap(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	2009      	movs	r0, #9
 8001aba:	f7ff fc2b 	bl	8001314 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef portaB;
  portaB.GPIO_Mode = GPIO_Mode_IPD;
 8001abe:	2328      	movs	r3, #40	; 0x28
 8001ac0:	71fb      	strb	r3, [r7, #7]
  portaB.GPIO_Pin = GPIO_Pin_10;
 8001ac2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ac6:	80bb      	strh	r3, [r7, #4]
  portaB.GPIO_Speed = GPIO_Speed_2MHz;
 8001ac8:	2302      	movs	r3, #2
 8001aca:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOB, &portaB);
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <Conf_GPIO_Remap+0x38>)
 8001ad2:	f7ff fadb 	bl	800108c <GPIO_Init>

  GPIO_PinRemapConfig(GPIO_FullRemap_TIM2, ENABLE);
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <Conf_GPIO_Remap+0x3c>)
 8001ada:	f7ff fbab 	bl	8001234 <GPIO_PinRemapConfig>
}
 8001ade:	bf00      	nop
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40010c00 	.word	0x40010c00
 8001aec:	00180300 	.word	0x00180300

08001af0 <LCD_SendByte>:
#include "lcd1602.h"

volatile uint32_t contador_ms = 0;

void LCD_SendByte(int data, int rs)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]
  GPIO_WriteBit(GPIOA, GPIO_Pin_0, rs);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	2101      	movs	r1, #1
 8001b02:	4823      	ldr	r0, [pc, #140]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b04:	f7ff fb7e 	bl	8001204 <GPIO_WriteBit>
  GPIO_WriteBit(GPIOA, GPIO_Pin_1, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4820      	ldr	r0, [pc, #128]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b0e:	f7ff fb79 	bl	8001204 <GPIO_WriteBit>

  GPIO_WriteBit(GPIOA, GPIO_Pin_7, ((data>>3) & 0x01));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	10db      	asrs	r3, r3, #3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	2180      	movs	r1, #128	; 0x80
 8001b22:	481b      	ldr	r0, [pc, #108]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b24:	f7ff fb6e 	bl	8001204 <GPIO_WriteBit>
  GPIO_WriteBit(GPIOA, GPIO_Pin_6, ((data>>2) & 0x01));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	109b      	asrs	r3, r3, #2
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	461a      	mov	r2, r3
 8001b36:	2140      	movs	r1, #64	; 0x40
 8001b38:	4815      	ldr	r0, [pc, #84]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b3a:	f7ff fb63 	bl	8001204 <GPIO_WriteBit>
  GPIO_WriteBit(GPIOA, GPIO_Pin_5, ((data>>1) & 0x01));
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	105b      	asrs	r3, r3, #1
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	2120      	movs	r1, #32
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b50:	f7ff fb58 	bl	8001204 <GPIO_WriteBit>
  GPIO_WriteBit(GPIOA, GPIO_Pin_4, ((data>>0) & 0x01));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	461a      	mov	r2, r3
 8001b60:	2110      	movs	r1, #16
 8001b62:	480b      	ldr	r0, [pc, #44]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b64:	f7ff fb4e 	bl	8001204 <GPIO_WriteBit>

  GPIO_WriteBit(GPIOA, GPIO_Pin_2, 1);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4808      	ldr	r0, [pc, #32]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b6e:	f7ff fb49 	bl	8001204 <GPIO_WriteBit>
  TIM_Delay(20);
 8001b72:	2014      	movs	r0, #20
 8001b74:	f000 f8aa 	bl	8001ccc <TIM_Delay>
  GPIO_WriteBit(GPIOA, GPIO_Pin_2, 0);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	2104      	movs	r1, #4
 8001b7c:	4804      	ldr	r0, [pc, #16]	; (8001b90 <LCD_SendByte+0xa0>)
 8001b7e:	f7ff fb41 	bl	8001204 <GPIO_WriteBit>
  TIM_Delay(20);
 8001b82:	2014      	movs	r0, #20
 8001b84:	f000 f8a2 	bl	8001ccc <TIM_Delay>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40010800 	.word	0x40010800

08001b94 <LCD_SendCmd>:

void LCD_SendCmd(int cmd)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
    int datatosend;

    datatosend = ((cmd>>4)&0x0F);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	111b      	asrs	r3, r3, #4
 8001ba0:	f003 030f 	and.w	r3, r3, #15
 8001ba4:	60fb      	str	r3, [r7, #12]
    LCD_SendByte(datatosend,0);
 8001ba6:	2100      	movs	r1, #0
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff ffa1 	bl	8001af0 <LCD_SendByte>

    datatosend = ((cmd)&0x0F);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f003 030f 	and.w	r3, r3, #15
 8001bb4:	60fb      	str	r3, [r7, #12]
    LCD_SendByte(datatosend, 0);
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff ff99 	bl	8001af0 <LCD_SendByte>
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <LCD_SendData>:

void LCD_SendData(int data)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
    int datatosend;

    datatosend = ((data>>4)&0x0F);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	111b      	asrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	60fb      	str	r3, [r7, #12]
    LCD_SendByte(datatosend, 1);
 8001bd8:	2101      	movs	r1, #1
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7ff ff88 	bl	8001af0 <LCD_SendByte>

    datatosend = ((data)&0x0F);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	60fb      	str	r3, [r7, #12]
    LCD_SendByte(datatosend, 1);
 8001be8:	2101      	movs	r1, #1
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff ff80 	bl	8001af0 <LCD_SendByte>
}
 8001bf0:	bf00      	nop
 8001bf2:	3710      	adds	r7, #16
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}

08001bf8 <LCD_Cursor>:

void LCD_Cursor(int row, int col)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  switch (row)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b03      	cmp	r3, #3
 8001c06:	d81f      	bhi.n	8001c48 <LCD_Cursor+0x50>
 8001c08:	a201      	add	r2, pc, #4	; (adr r2, 8001c10 <LCD_Cursor+0x18>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c21 	.word	0x08001c21
 8001c14:	08001c2b 	.word	0x08001c2b
 8001c18:	08001c35 	.word	0x08001c35
 8001c1c:	08001c3f 	.word	0x08001c3f
  {
    case 0:
        col |= 0x80;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c26:	603b      	str	r3, [r7, #0]
        break;
 8001c28:	e00f      	b.n	8001c4a <LCD_Cursor+0x52>
    case 1:
        col |= 0xC0;
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c30:	603b      	str	r3, [r7, #0]
        break;
 8001c32:	e00a      	b.n	8001c4a <LCD_Cursor+0x52>
    case 2:
        col |= 0x94;
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	f043 0394 	orr.w	r3, r3, #148	; 0x94
 8001c3a:	603b      	str	r3, [r7, #0]
        break;
 8001c3c:	e005      	b.n	8001c4a <LCD_Cursor+0x52>
    case 3:
        col |= 0xD4;
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	f043 03d4 	orr.w	r3, r3, #212	; 0xd4
 8001c44:	603b      	str	r3, [r7, #0]
        break;
 8001c46:	e000      	b.n	8001c4a <LCD_Cursor+0x52>
    default:
        break;
 8001c48:	bf00      	nop
  }

  LCD_SendCmd(col);
 8001c4a:	6838      	ldr	r0, [r7, #0]
 8001c4c:	f7ff ffa2 	bl	8001b94 <LCD_SendCmd>
}
 8001c50:	bf00      	nop
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <LCD_Init>:

void LCD_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  //16x4
  // 4 bit initialisation
  TIM_Delay(50);
 8001c5c:	2032      	movs	r0, #50	; 0x32
 8001c5e:	f000 f835 	bl	8001ccc <TIM_Delay>
  LCD_SendCmd(0x30); // Function set
 8001c62:	2030      	movs	r0, #48	; 0x30
 8001c64:	f7ff ff96 	bl	8001b94 <LCD_SendCmd>
  TIM_Delay(5);
 8001c68:	2005      	movs	r0, #5
 8001c6a:	f000 f82f 	bl	8001ccc <TIM_Delay>
  LCD_SendCmd(0x20); // Function set
 8001c6e:	2020      	movs	r0, #32
 8001c70:	f7ff ff90 	bl	8001b94 <LCD_SendCmd>
  LCD_SendCmd(0x80); // Function set
 8001c74:	2080      	movs	r0, #128	; 0x80
 8001c76:	f7ff ff8d 	bl	8001b94 <LCD_SendCmd>
  TIM_Delay(5);
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f000 f826 	bl	8001ccc <TIM_Delay>
  LCD_SendCmd(0x20); // Function set
 8001c80:	2020      	movs	r0, #32
 8001c82:	f7ff ff87 	bl	8001b94 <LCD_SendCmd>
  LCD_SendCmd(0x80); // Function set
 8001c86:	2080      	movs	r0, #128	; 0x80
 8001c88:	f7ff ff84 	bl	8001b94 <LCD_SendCmd>
  TIM_Delay(5);
 8001c8c:	2005      	movs	r0, #5
 8001c8e:	f000 f81d 	bl	8001ccc <TIM_Delay>
  LCD_SendCmd(0x00); // Display ON/OFF control
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff ff7e 	bl	8001b94 <LCD_SendCmd>
  LCD_SendCmd(0x00); // Display ON/OFF control
 8001c98:	2000      	movs	r0, #0
 8001c9a:	f7ff ff7b 	bl	8001b94 <LCD_SendCmd>
  TIM_Delay(5);
 8001c9e:	2005      	movs	r0, #5
 8001ca0:	f000 f814 	bl	8001ccc <TIM_Delay>
  LCD_SendCmd(0x00); // Display clear
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	f7ff ff75 	bl	8001b94 <LCD_SendCmd>
  LCD_SendCmd(0x10); // Display clear
 8001caa:	2010      	movs	r0, #16
 8001cac:	f7ff ff72 	bl	8001b94 <LCD_SendCmd>
  TIM_Delay(5);
 8001cb0:	2005      	movs	r0, #5
 8001cb2:	f000 f80b 	bl	8001ccc <TIM_Delay>
  LCD_SendCmd(0x00); // Entry mode set
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f7ff ff6c 	bl	8001b94 <LCD_SendCmd>
  LCD_SendCmd(0x60); // Entry mode set
 8001cbc:	2060      	movs	r0, #96	; 0x60
 8001cbe:	f7ff ff69 	bl	8001b94 <LCD_SendCmd>
  TIM_Delay(5);
 8001cc2:	2005      	movs	r0, #5
 8001cc4:	f000 f802 	bl	8001ccc <TIM_Delay>
//   TIM_Delay(5);
//   LCD_SendCmd(0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
//   TIM_Delay(5);
//   LCD_SendCmd(0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
//   TIM_Delay(5);
}
 8001cc8:	bf00      	nop
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <TIM_Delay>:

void TIM_Delay(uint32_t tempo)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  TIM_Cmd(TIM3, ENABLE);
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	480a      	ldr	r0, [pc, #40]	; (8001d00 <TIM_Delay+0x34>)
 8001cd8:	f7ff fc28 	bl	800152c <TIM_Cmd>

  while(tempo != contador_ms);
 8001cdc:	bf00      	nop
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <TIM_Delay+0x38>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d1fa      	bne.n	8001cde <TIM_Delay+0x12>

  contador_ms = 0;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <TIM_Delay+0x38>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]
  
  TIM_Cmd(TIM3, DISABLE);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	4803      	ldr	r0, [pc, #12]	; (8001d00 <TIM_Delay+0x34>)
 8001cf2:	f7ff fc1b 	bl	800152c <TIM_Cmd>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	40000400 	.word	0x40000400
 8001d04:	2000001c 	.word	0x2000001c

08001d08 <LCD_Write>:

void LCD_Write(char* c)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  while (*c)
 8001d10:	e006      	b.n	8001d20 <LCD_Write+0x18>
  {
    LCD_SendData(*c++);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	1c5a      	adds	r2, r3, #1
 8001d16:	607a      	str	r2, [r7, #4]
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff ff53 	bl	8001bc6 <LCD_SendData>
  while (*c)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f4      	bne.n	8001d12 <LCD_Write+0xa>
  }
}
 8001d28:	bf00      	nop
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <LCD_Clear>:

void LCD_Clear(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
 LCD_SendCmd(0x01); 
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff ff2d 	bl	8001b94 <LCD_SendCmd>
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <LCD_Start>:

void LCD_Start(void)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
  int row = 0, col = 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]

  for (int i = 0; i < 32; i++)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	e016      	b.n	8001d80 <LCD_Start+0x42>
  {
    LCD_Cursor(row, col);
 8001d52:	68b9      	ldr	r1, [r7, #8]
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f7ff ff4f 	bl	8001bf8 <LCD_Cursor>

    col++;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	60bb      	str	r3, [r7, #8]

    if (col > 19)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b13      	cmp	r3, #19
 8001d64:	dd04      	ble.n	8001d70 <LCD_Start+0x32>
    {
      row++;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	60fb      	str	r3, [r7, #12]
      col = 0;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60bb      	str	r3, [r7, #8]
    }
    if (row > 1)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	dd01      	ble.n	8001d7a <LCD_Start+0x3c>
      row=0;
 8001d76:	2300      	movs	r3, #0
 8001d78:	60fb      	str	r3, [r7, #12]
  for (int i = 0; i < 32; i++)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b1f      	cmp	r3, #31
 8001d84:	dde5      	ble.n	8001d52 <LCD_Start+0x14>
//      col = 0;
//    }
//    if (row > 3)
//      row=0;
//  }
}
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
	...

08001d90 <main>:
void Conf_TIM2_IC(void);
void Conf_TIM3(void);
void Conf_NVIC(void);

int main(void)
{
 8001d90:	b590      	push	{r4, r7, lr}
 8001d92:	b095      	sub	sp, #84	; 0x54
 8001d94:	af02      	add	r7, sp, #8
  Conf_GPIO();
 8001d96:	f7ff fe73 	bl	8001a80 <Conf_GPIO>
  Conf_GPIO_Remap();
 8001d9a:	f7ff fe89 	bl	8001ab0 <Conf_GPIO_Remap>
  Conf_TIM2();
 8001d9e:	f000 f881 	bl	8001ea4 <Conf_TIM2>
  Conf_TIM2_IC();
 8001da2:	f000 f89b 	bl	8001edc <Conf_TIM2_IC>
  Conf_TIM3();
 8001da6:	f000 f8b1 	bl	8001f0c <Conf_TIM3>
  Conf_NVIC();
 8001daa:	f000 f8d1 	bl	8001f50 <Conf_NVIC>

  TIM_ITConfig(TIM2, TIM_IT_CC3, ENABLE);
 8001dae:	2201      	movs	r2, #1
 8001db0:	2108      	movs	r1, #8
 8001db2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001db6:	f7ff fbd8 	bl	800156a <TIM_ITConfig>
  TIM_Cmd(TIM2, ENABLE);
 8001dba:	2101      	movs	r1, #1
 8001dbc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001dc0:	f7ff fbb4 	bl	800152c <TIM_Cmd>

  LCD_Init();
 8001dc4:	f7ff ff48 	bl	8001c58 <LCD_Init>
  LCD_Start();
 8001dc8:	f7ff ffb9 	bl	8001d3e <LCD_Start>
  LCD_Clear();
 8001dcc:	f7ff ffb0 	bl	8001d30 <LCD_Clear>

  char aux[50];

  while(1)
  {
    if (print == 1)
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <main+0xfc>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d1fb      	bne.n	8001dd0 <main+0x40>
    {
      char *tmpSign = (frequencia < 0) ? "-" : "";
 8001dd8:	4b2d      	ldr	r3, [pc, #180]	; (8001e90 <main+0x100>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f04f 0100 	mov.w	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff f8a3 	bl	8000f2c <__aeabi_fcmplt>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <main+0x60>
 8001dec:	4b29      	ldr	r3, [pc, #164]	; (8001e94 <main+0x104>)
 8001dee:	e000      	b.n	8001df2 <main+0x62>
 8001df0:	4b29      	ldr	r3, [pc, #164]	; (8001e98 <main+0x108>)
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
      float tmpVal = (frequencia < 0) ? -frequencia : frequencia;
 8001df4:	4b26      	ldr	r3, [pc, #152]	; (8001e90 <main+0x100>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f04f 0100 	mov.w	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f895 	bl	8000f2c <__aeabi_fcmplt>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d004      	beq.n	8001e12 <main+0x82>
 8001e08:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <main+0x100>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e10:	e001      	b.n	8001e16 <main+0x86>
 8001e12:	4b1f      	ldr	r3, [pc, #124]	; (8001e90 <main+0x100>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	643b      	str	r3, [r7, #64]	; 0x40

      int tmpInt1 = tmpVal;                  // Get the integer (678).
 8001e18:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e1a:	f7ff f8af 	bl	8000f7c <__aeabi_f2iz>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	63fb      	str	r3, [r7, #60]	; 0x3c
      float tmpFrac = tmpVal - tmpInt1;      // Get fraction (0.0123).
 8001e22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001e24:	f7fe fe90 	bl	8000b48 <__aeabi_i2f>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8001e2e:	f7fe fdd5 	bl	80009dc <__aeabi_fsub>
 8001e32:	4603      	mov	r3, r0
 8001e34:	63bb      	str	r3, [r7, #56]	; 0x38
      int tmpInt2 = trunc(tmpFrac * 10000);
 8001e36:	4919      	ldr	r1, [pc, #100]	; (8001e9c <main+0x10c>)
 8001e38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001e3a:	f7fe fed9 	bl	8000bf0 <__aeabi_fmul>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fae9 	bl	8000418 <__aeabi_f2d>
 8001e46:	4603      	mov	r3, r0
 8001e48:	460c      	mov	r4, r1
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	4621      	mov	r1, r4
 8001e4e:	f000 faff 	bl	8002450 <trunc>
 8001e52:	4603      	mov	r3, r0
 8001e54:	460c      	mov	r4, r1
 8001e56:	4618      	mov	r0, r3
 8001e58:	4621      	mov	r1, r4
 8001e5a:	f7fe fd43 	bl	80008e4 <__aeabi_d2iz>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	637b      	str	r3, [r7, #52]	; 0x34

      sprintf (aux, "f = %s%d.%d Hz\r\n", tmpSign, tmpInt1, tmpInt2);
 8001e62:	4638      	mov	r0, r7
 8001e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001e6c:	490c      	ldr	r1, [pc, #48]	; (8001ea0 <main+0x110>)
 8001e6e:	f000 fab4 	bl	80023da <siprintf>
      print = 0;
 8001e72:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <main+0xfc>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	701a      	strb	r2, [r3, #0]
      LCD_Cursor(0, 0);
 8001e78:	2100      	movs	r1, #0
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff febc 	bl	8001bf8 <LCD_Cursor>
      LCD_Write(aux);
 8001e80:	463b      	mov	r3, r7
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff ff40 	bl	8001d08 <LCD_Write>
    if (print == 1)
 8001e88:	e7a2      	b.n	8001dd0 <main+0x40>
 8001e8a:	bf00      	nop
 8001e8c:	20000026 	.word	0x20000026
 8001e90:	20000020 	.word	0x20000020
 8001e94:	080024cc 	.word	0x080024cc
 8001e98:	080024d0 	.word	0x080024d0
 8001e9c:	461c4000 	.word	0x461c4000
 8001ea0:	080024d4 	.word	0x080024d4

08001ea4 <Conf_TIM2>:

  return 0;
}

void Conf_TIM2(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7ff fa4f 	bl	8001350 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef timer2;
  timer2.TIM_Prescaler = TIM2_PRESCALER-1;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	80bb      	strh	r3, [r7, #4]
  timer2.TIM_Period = TIM2_PERIODO-1;
 8001eb6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001eba:	813b      	strh	r3, [r7, #8]
  timer2.TIM_CounterMode =  TIM_CounterMode_Up;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	80fb      	strh	r3, [r7, #6]
  timer2.TIM_ClockDivision = 0;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	817b      	strh	r3, [r7, #10]
  timer2.TIM_RepetitionCounter = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM2, &timer2);
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001ed0:	f7ff fa5c 	bl	800138c <TIM_TimeBaseInit>
}
 8001ed4:	bf00      	nop
 8001ed6:	3710      	adds	r7, #16
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}

08001edc <Conf_TIM2_IC>:

void Conf_TIM2_IC(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
  TIM_ICInitTypeDef ic;
  ic.TIM_Channel = TIM_Channel_3;
 8001ee2:	2308      	movs	r3, #8
 8001ee4:	80bb      	strh	r3, [r7, #4]
  ic.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	817b      	strh	r3, [r7, #10]
  ic.TIM_ICPolarity = TIM_ICPolarity_Rising;
 8001eea:	2300      	movs	r3, #0
 8001eec:	80fb      	strh	r3, [r7, #6]
  ic.TIM_ICFilter = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	81bb      	strh	r3, [r7, #12]
  ic.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	813b      	strh	r3, [r7, #8]
  TIM_ICInit(TIM2, &ic);
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001efe:	f7ff fac1 	bl	8001484 <TIM_ICInit>
}
 8001f02:	bf00      	nop
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <Conf_TIM3>:

void Conf_TIM3(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001f12:	2101      	movs	r1, #1
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7ff fa1b 	bl	8001350 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef timer3;
  timer3.TIM_Prescaler = 72-1;
 8001f1a:	2347      	movs	r3, #71	; 0x47
 8001f1c:	80bb      	strh	r3, [r7, #4]
  timer3.TIM_Period = 1000-1;
 8001f1e:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001f22:	813b      	strh	r3, [r7, #8]
  timer3.TIM_CounterMode =  TIM_CounterMode_Up;
 8001f24:	2300      	movs	r3, #0
 8001f26:	80fb      	strh	r3, [r7, #6]
  timer3.TIM_ClockDivision = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	817b      	strh	r3, [r7, #10]
  timer3.TIM_RepetitionCounter = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM3, &timer3);
 8001f30:	1d3b      	adds	r3, r7, #4
 8001f32:	4619      	mov	r1, r3
 8001f34:	4805      	ldr	r0, [pc, #20]	; (8001f4c <Conf_TIM3+0x40>)
 8001f36:	f7ff fa29 	bl	800138c <TIM_TimeBaseInit>

  TIM_ITConfig(TIM3, TIM_IT_Update, ENABLE);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4803      	ldr	r0, [pc, #12]	; (8001f4c <Conf_TIM3+0x40>)
 8001f40:	f7ff fb13 	bl	800156a <TIM_ITConfig>
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40000400 	.word	0x40000400

08001f50 <Conf_NVIC>:

void Conf_NVIC(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef it;
  it.NVIC_IRQChannel = TIM2_IRQn;
 8001f56:	231c      	movs	r3, #28
 8001f58:	713b      	strb	r3, [r7, #4]
  it.NVIC_IRQChannelCmd = ENABLE;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	71fb      	strb	r3, [r7, #7]
  it.NVIC_IRQChannelPreemptionPriority = 0;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	717b      	strb	r3, [r7, #5]
  it.NVIC_IRQChannelSubPriority = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&it);
 8001f66:	1d3b      	adds	r3, r7, #4
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff f82d 	bl	8000fc8 <NVIC_Init>

  it.NVIC_IRQChannel = TIM3_IRQn;
 8001f6e:	231d      	movs	r3, #29
 8001f70:	713b      	strb	r3, [r7, #4]
  NVIC_Init(&it);
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f827 	bl	8000fc8 <NVIC_Init>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001f84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f8a:	e003      	b.n	8001f94 <LoopCopyDataInit>

08001f8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8001f8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f92:	3104      	adds	r1, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f94:	480b      	ldr	r0, [pc, #44]	; (8001fc4 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8001f96:	4b0c      	ldr	r3, [pc, #48]	; (8001fc8 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8001f98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f9c:	d3f6      	bcc.n	8001f8c <CopyDataInit>
	ldr	r2, =_sbss
 8001f9e:	4a0b      	ldr	r2, [pc, #44]	; (8001fcc <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8001fa0:	e002      	b.n	8001fa8 <LoopFillZerobss>

08001fa2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fa2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fa4:	f842 3b04 	str.w	r3, [r2], #4

08001fa8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fa8:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8001faa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fac:	d3f9      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001fae:	f000 f87b 	bl	80020a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fb2:	f000 fa29 	bl	8002408 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fb6:	f7ff feeb 	bl	8001d90 <main>
	bx	lr
 8001fba:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001fbc:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8001fc0:	080024f0 	.word	0x080024f0
	ldr	r0, =_sdata
 8001fc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001fc8:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8001fcc:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8001fd0:	2000002c 	.word	0x2000002c

08001fd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fd4:	e7fe      	b.n	8001fd4 <ADC1_2_IRQHandler>
	...

08001fd8 <TIM2_IRQHandler>:
volatile float frequencia = 0;
uint16_t captura, borda_atu, borda_ant = 0;
uint8_t print = 0;

void TIM2_IRQHandler(void)
{
 8001fd8:	b598      	push	{r3, r4, r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  borda_atu = TIM_GetCapture3(TIM2);
 8001fdc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001fe0:	f7ff fb56 	bl	8001690 <TIM_GetCapture3>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <TIM2_IRQHandler+0x98>)
 8001fea:	801a      	strh	r2, [r3, #0]

  if (borda_atu > borda_ant)
 8001fec:	4b20      	ldr	r3, [pc, #128]	; (8002070 <TIM2_IRQHandler+0x98>)
 8001fee:	881a      	ldrh	r2, [r3, #0]
 8001ff0:	4b20      	ldr	r3, [pc, #128]	; (8002074 <TIM2_IRQHandler+0x9c>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d908      	bls.n	800200a <TIM2_IRQHandler+0x32>
    captura = borda_atu - borda_ant;
 8001ff8:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <TIM2_IRQHandler+0x98>)
 8001ffa:	881a      	ldrh	r2, [r3, #0]
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <TIM2_IRQHandler+0x9c>)
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	b29a      	uxth	r2, r3
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <TIM2_IRQHandler+0xa0>)
 8002006:	801a      	strh	r2, [r3, #0]
 8002008:	e007      	b.n	800201a <TIM2_IRQHandler+0x42>
  else
    captura = 65536 - borda_ant + borda_atu;
 800200a:	4b19      	ldr	r3, [pc, #100]	; (8002070 <TIM2_IRQHandler+0x98>)
 800200c:	881a      	ldrh	r2, [r3, #0]
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <TIM2_IRQHandler+0x9c>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	b29a      	uxth	r2, r3
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <TIM2_IRQHandler+0xa0>)
 8002018:	801a      	strh	r2, [r3, #0]

  borda_ant = borda_atu;
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <TIM2_IRQHandler+0x98>)
 800201c:	881a      	ldrh	r2, [r3, #0]
 800201e:	4b15      	ldr	r3, [pc, #84]	; (8002074 <TIM2_IRQHandler+0x9c>)
 8002020:	801a      	strh	r2, [r3, #0]
  frequencia = (72000000.0)/captura;
 8002022:	4b15      	ldr	r3, [pc, #84]	; (8002078 <TIM2_IRQHandler+0xa0>)
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe f9e4 	bl	80003f4 <__aeabi_i2d>
 800202c:	4603      	mov	r3, r0
 800202e:	460c      	mov	r4, r1
 8002030:	461a      	mov	r2, r3
 8002032:	4623      	mov	r3, r4
 8002034:	a10c      	add	r1, pc, #48	; (adr r1, 8002068 <TIM2_IRQHandler+0x90>)
 8002036:	e9d1 0100 	ldrd	r0, r1, [r1]
 800203a:	f7fe fb6b 	bl	8000714 <__aeabi_ddiv>
 800203e:	4603      	mov	r3, r0
 8002040:	460c      	mov	r4, r1
 8002042:	4618      	mov	r0, r3
 8002044:	4621      	mov	r1, r4
 8002046:	f7fe fc75 	bl	8000934 <__aeabi_d2f>
 800204a:	4602      	mov	r2, r0
 800204c:	4b0b      	ldr	r3, [pc, #44]	; (800207c <TIM2_IRQHandler+0xa4>)
 800204e:	601a      	str	r2, [r3, #0]
  print = 1;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <TIM2_IRQHandler+0xa8>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]

  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8002056:	2108      	movs	r1, #8
 8002058:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800205c:	f7ff fb24 	bl	80016a8 <TIM_ClearITPendingBit>
}
 8002060:	bf00      	nop
 8002062:	bd98      	pop	{r3, r4, r7, pc}
 8002064:	f3af 8000 	nop.w
 8002068:	00000000 	.word	0x00000000
 800206c:	41912a88 	.word	0x41912a88
 8002070:	20000028 	.word	0x20000028
 8002074:	20000024 	.word	0x20000024
 8002078:	2000002a 	.word	0x2000002a
 800207c:	20000020 	.word	0x20000020
 8002080:	20000026 	.word	0x20000026

08002084 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  contador_ms++;
 8002088:	4b05      	ldr	r3, [pc, #20]	; (80020a0 <TIM3_IRQHandler+0x1c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	3301      	adds	r3, #1
 800208e:	4a04      	ldr	r2, [pc, #16]	; (80020a0 <TIM3_IRQHandler+0x1c>)
 8002090:	6013      	str	r3, [r2, #0]

  TIM_ClearITPendingBit(TIM3, TIM_IT_Update);
 8002092:	2101      	movs	r1, #1
 8002094:	4803      	ldr	r0, [pc, #12]	; (80020a4 <TIM3_IRQHandler+0x20>)
 8002096:	f7ff fb07 	bl	80016a8 <TIM_ClearITPendingBit>
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	2000001c 	.word	0x2000001c
 80020a4:	40000400 	.word	0x40000400

080020a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80020ac:	4a15      	ldr	r2, [pc, #84]	; (8002104 <SystemInit+0x5c>)
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <SystemInit+0x5c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f043 0301 	orr.w	r3, r3, #1
 80020b6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80020b8:	4912      	ldr	r1, [pc, #72]	; (8002104 <SystemInit+0x5c>)
 80020ba:	4b12      	ldr	r3, [pc, #72]	; (8002104 <SystemInit+0x5c>)
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	4b12      	ldr	r3, [pc, #72]	; (8002108 <SystemInit+0x60>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80020c4:	4a0f      	ldr	r2, [pc, #60]	; (8002104 <SystemInit+0x5c>)
 80020c6:	4b0f      	ldr	r3, [pc, #60]	; (8002104 <SystemInit+0x5c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80020d4:	4a0b      	ldr	r2, [pc, #44]	; (8002104 <SystemInit+0x5c>)
 80020d6:	4b0b      	ldr	r3, [pc, #44]	; (8002104 <SystemInit+0x5c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020de:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80020e0:	4a08      	ldr	r2, [pc, #32]	; (8002104 <SystemInit+0x5c>)
 80020e2:	4b08      	ldr	r3, [pc, #32]	; (8002104 <SystemInit+0x5c>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80020ea:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <SystemInit+0x5c>)
 80020ee:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80020f2:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80020f4:	f000 f80c 	bl	8002110 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80020f8:	4b04      	ldr	r3, [pc, #16]	; (800210c <SystemInit+0x64>)
 80020fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80020fe:	609a      	str	r2, [r3, #8]
#endif 
}
 8002100:	bf00      	nop
 8002102:	bd80      	pop	{r7, pc}
 8002104:	40021000 	.word	0x40021000
 8002108:	f8ff0000 	.word	0xf8ff0000
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8002114:	f000 f802 	bl	800211c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8002118:	bf00      	nop
 800211a:	bd80      	pop	{r7, pc}

0800211c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8002122:	2300      	movs	r3, #0
 8002124:	607b      	str	r3, [r7, #4]
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800212a:	4a3a      	ldr	r2, [pc, #232]	; (8002214 <SetSysClockTo72+0xf8>)
 800212c:	4b39      	ldr	r3, [pc, #228]	; (8002214 <SetSysClockTo72+0xf8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002136:	4b37      	ldr	r3, [pc, #220]	; (8002214 <SetSysClockTo72+0xf8>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800213e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3301      	adds	r3, #1
 8002144:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d103      	bne.n	8002154 <SetSysClockTo72+0x38>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8002152:	d1f0      	bne.n	8002136 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <SetSysClockTo72+0xf8>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d002      	beq.n	8002166 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8002160:	2301      	movs	r3, #1
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	e001      	b.n	800216a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002166:	2300      	movs	r3, #0
 8002168:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d14b      	bne.n	8002208 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8002170:	4a29      	ldr	r2, [pc, #164]	; (8002218 <SetSysClockTo72+0xfc>)
 8002172:	4b29      	ldr	r3, [pc, #164]	; (8002218 <SetSysClockTo72+0xfc>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f043 0310 	orr.w	r3, r3, #16
 800217a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800217c:	4a26      	ldr	r2, [pc, #152]	; (8002218 <SetSysClockTo72+0xfc>)
 800217e:	4b26      	ldr	r3, [pc, #152]	; (8002218 <SetSysClockTo72+0xfc>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 0303 	bic.w	r3, r3, #3
 8002186:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8002188:	4a23      	ldr	r2, [pc, #140]	; (8002218 <SetSysClockTo72+0xfc>)
 800218a:	4b23      	ldr	r3, [pc, #140]	; (8002218 <SetSysClockTo72+0xfc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f043 0302 	orr.w	r3, r3, #2
 8002192:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8002194:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <SetSysClockTo72+0xf8>)
 8002196:	4b1f      	ldr	r3, [pc, #124]	; (8002214 <SetSysClockTo72+0xf8>)
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800219c:	4a1d      	ldr	r2, [pc, #116]	; (8002214 <SetSysClockTo72+0xf8>)
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <SetSysClockTo72+0xf8>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80021a4:	4a1b      	ldr	r2, [pc, #108]	; (8002214 <SetSysClockTo72+0xf8>)
 80021a6:	4b1b      	ldr	r3, [pc, #108]	; (8002214 <SetSysClockTo72+0xf8>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ae:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80021b0:	4a18      	ldr	r2, [pc, #96]	; (8002214 <SetSysClockTo72+0xf8>)
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <SetSysClockTo72+0xf8>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80021ba:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80021bc:	4a15      	ldr	r2, [pc, #84]	; (8002214 <SetSysClockTo72+0xf8>)
 80021be:	4b15      	ldr	r3, [pc, #84]	; (8002214 <SetSysClockTo72+0xf8>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80021c6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <SetSysClockTo72+0xf8>)
 80021ca:	4b12      	ldr	r3, [pc, #72]	; (8002214 <SetSysClockTo72+0xf8>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021d2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80021d4:	bf00      	nop
 80021d6:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <SetSysClockTo72+0xf8>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0f9      	beq.n	80021d6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80021e2:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <SetSysClockTo72+0xf8>)
 80021e4:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <SetSysClockTo72+0xf8>)
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f023 0303 	bic.w	r3, r3, #3
 80021ec:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80021ee:	4a09      	ldr	r2, [pc, #36]	; (8002214 <SetSysClockTo72+0xf8>)
 80021f0:	4b08      	ldr	r3, [pc, #32]	; (8002214 <SetSysClockTo72+0xf8>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f043 0302 	orr.w	r3, r3, #2
 80021f8:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80021fa:	bf00      	nop
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SetSysClockTo72+0xf8>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f003 030c 	and.w	r3, r3, #12
 8002204:	2b08      	cmp	r3, #8
 8002206:	d1f9      	bne.n	80021fc <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr
 8002212:	bf00      	nop
 8002214:	40021000 	.word	0x40021000
 8002218:	40022000 	.word	0x40022000

0800221c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
	int div = 1;
 8002228:	2301      	movs	r3, #1
 800222a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800222c:	e004      	b.n	8002238 <ts_itoa+0x1c>
		div *= base;
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	fb02 f303 	mul.w	r3, r2, r3
 8002236:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d2f3      	bcs.n	800222e <ts_itoa+0x12>

	while (div != 0)
 8002246:	e029      	b.n	800229c <ts_itoa+0x80>
	{
		int num = d/div;
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002250:	613b      	str	r3, [r7, #16]
		d = d%div;
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	fbb3 f1f2 	udiv	r1, r3, r2
 800225a:	fb02 f201 	mul.w	r2, r2, r1
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	60bb      	str	r3, [r7, #8]
		div /= base;
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	fb92 f3f3 	sdiv	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
		if (num > 9)
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	2b09      	cmp	r3, #9
 8002270:	dd0a      	ble.n	8002288 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	1c59      	adds	r1, r3, #1
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	6011      	str	r1, [r2, #0]
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	3237      	adds	r2, #55	; 0x37
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]
 8002286:	e009      	b.n	800229c <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1c59      	adds	r1, r3, #1
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	6011      	str	r1, [r2, #0]
 8002292:	693a      	ldr	r2, [r7, #16]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	3230      	adds	r2, #48	; 0x30
 8002298:	b2d2      	uxtb	r2, r2
 800229a:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d1d2      	bne.n	8002248 <ts_itoa+0x2c>
	}
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bc80      	pop	{r7}
 80022aa:	4770      	bx	lr

080022ac <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b088      	sub	sp, #32
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	617b      	str	r3, [r7, #20]
	while(*fmt)
 80022bc:	e07d      	b.n	80023ba <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b25      	cmp	r3, #37	; 0x25
 80022c4:	d171      	bne.n	80023aa <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	3301      	adds	r3, #1
 80022ca:	60bb      	str	r3, [r7, #8]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b64      	cmp	r3, #100	; 0x64
 80022d2:	d01e      	beq.n	8002312 <ts_formatstring+0x66>
 80022d4:	2b64      	cmp	r3, #100	; 0x64
 80022d6:	dc06      	bgt.n	80022e6 <ts_formatstring+0x3a>
 80022d8:	2b58      	cmp	r3, #88	; 0x58
 80022da:	d050      	beq.n	800237e <ts_formatstring+0xd2>
 80022dc:	2b63      	cmp	r3, #99	; 0x63
 80022de:	d00e      	beq.n	80022fe <ts_formatstring+0x52>
 80022e0:	2b25      	cmp	r3, #37	; 0x25
 80022e2:	d058      	beq.n	8002396 <ts_formatstring+0xea>
 80022e4:	e05d      	b.n	80023a2 <ts_formatstring+0xf6>
 80022e6:	2b73      	cmp	r3, #115	; 0x73
 80022e8:	d02b      	beq.n	8002342 <ts_formatstring+0x96>
 80022ea:	2b73      	cmp	r3, #115	; 0x73
 80022ec:	dc02      	bgt.n	80022f4 <ts_formatstring+0x48>
 80022ee:	2b69      	cmp	r3, #105	; 0x69
 80022f0:	d00f      	beq.n	8002312 <ts_formatstring+0x66>
 80022f2:	e056      	b.n	80023a2 <ts_formatstring+0xf6>
 80022f4:	2b75      	cmp	r3, #117	; 0x75
 80022f6:	d037      	beq.n	8002368 <ts_formatstring+0xbc>
 80022f8:	2b78      	cmp	r3, #120	; 0x78
 80022fa:	d040      	beq.n	800237e <ts_formatstring+0xd2>
 80022fc:	e051      	b.n	80023a2 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	1d11      	adds	r1, r2, #4
 8002308:	6079      	str	r1, [r7, #4]
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
				break;
 8002310:	e047      	b.n	80023a2 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	1d1a      	adds	r2, r3, #4
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	2b00      	cmp	r3, #0
 8002320:	da07      	bge.n	8002332 <ts_formatstring+0x86>
					{
						val *= -1;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	425b      	negs	r3, r3
 8002326:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	60fa      	str	r2, [r7, #12]
 800232e:	222d      	movs	r2, #45	; 0x2d
 8002330:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8002332:	69f9      	ldr	r1, [r7, #28]
 8002334:	f107 030c 	add.w	r3, r7, #12
 8002338:	220a      	movs	r2, #10
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff6e 	bl	800221c <ts_itoa>
				}
				break;
 8002340:	e02f      	b.n	80023a2 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	1d1a      	adds	r2, r3, #4
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	61bb      	str	r3, [r7, #24]
					while (*arg)
 800234c:	e007      	b.n	800235e <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1c5a      	adds	r2, r3, #1
 8002352:	60fa      	str	r2, [r7, #12]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	1c51      	adds	r1, r2, #1
 8002358:	61b9      	str	r1, [r7, #24]
 800235a:	7812      	ldrb	r2, [r2, #0]
 800235c:	701a      	strb	r2, [r3, #0]
					while (*arg)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f3      	bne.n	800234e <ts_formatstring+0xa2>
					}
				}
				break;
 8002366:	e01c      	b.n	80023a2 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	1d1a      	adds	r2, r3, #4
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	6819      	ldr	r1, [r3, #0]
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	220a      	movs	r2, #10
 8002376:	4618      	mov	r0, r3
 8002378:	f7ff ff50 	bl	800221c <ts_itoa>
				break;
 800237c:	e011      	b.n	80023a2 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	1d1a      	adds	r2, r3, #4
 8002382:	607a      	str	r2, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4619      	mov	r1, r3
 8002388:	f107 030c 	add.w	r3, r7, #12
 800238c:	2210      	movs	r2, #16
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff ff44 	bl	800221c <ts_itoa>
				break;
 8002394:	e005      	b.n	80023a2 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	60fa      	str	r2, [r7, #12]
 800239c:	2225      	movs	r2, #37	; 0x25
 800239e:	701a      	strb	r2, [r3, #0]
				  break;
 80023a0:	bf00      	nop
			}
			fmt++;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	3301      	adds	r3, #1
 80023a6:	60bb      	str	r3, [r7, #8]
 80023a8:	e007      	b.n	80023ba <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	60fa      	str	r2, [r7, #12]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	1c51      	adds	r1, r2, #1
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	7812      	ldrb	r2, [r2, #0]
 80023b8:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	f47f af7d 	bne.w	80022be <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2200      	movs	r2, #0
 80023c8:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	461a      	mov	r2, r3
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80023da:	b40e      	push	{r1, r2, r3}
 80023dc:	b580      	push	{r7, lr}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80023e4:	f107 0320 	add.w	r3, r7, #32
 80023e8:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	69f9      	ldr	r1, [r7, #28]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff ff5c 	bl	80022ac <ts_formatstring>
 80023f4:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80023f6:	68fb      	ldr	r3, [r7, #12]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002402:	b003      	add	sp, #12
 8002404:	4770      	bx	lr
	...

08002408 <__libc_init_array>:
 8002408:	b570      	push	{r4, r5, r6, lr}
 800240a:	2500      	movs	r5, #0
 800240c:	4e0c      	ldr	r6, [pc, #48]	; (8002440 <__libc_init_array+0x38>)
 800240e:	4c0d      	ldr	r4, [pc, #52]	; (8002444 <__libc_init_array+0x3c>)
 8002410:	1ba4      	subs	r4, r4, r6
 8002412:	10a4      	asrs	r4, r4, #2
 8002414:	42a5      	cmp	r5, r4
 8002416:	d109      	bne.n	800242c <__libc_init_array+0x24>
 8002418:	f000 f84c 	bl	80024b4 <_init>
 800241c:	2500      	movs	r5, #0
 800241e:	4e0a      	ldr	r6, [pc, #40]	; (8002448 <__libc_init_array+0x40>)
 8002420:	4c0a      	ldr	r4, [pc, #40]	; (800244c <__libc_init_array+0x44>)
 8002422:	1ba4      	subs	r4, r4, r6
 8002424:	10a4      	asrs	r4, r4, #2
 8002426:	42a5      	cmp	r5, r4
 8002428:	d105      	bne.n	8002436 <__libc_init_array+0x2e>
 800242a:	bd70      	pop	{r4, r5, r6, pc}
 800242c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002430:	4798      	blx	r3
 8002432:	3501      	adds	r5, #1
 8002434:	e7ee      	b.n	8002414 <__libc_init_array+0xc>
 8002436:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800243a:	4798      	blx	r3
 800243c:	3501      	adds	r5, #1
 800243e:	e7f2      	b.n	8002426 <__libc_init_array+0x1e>
 8002440:	080024e8 	.word	0x080024e8
 8002444:	080024e8 	.word	0x080024e8
 8002448:	080024e8 	.word	0x080024e8
 800244c:	080024ec 	.word	0x080024ec

08002450 <trunc>:
 8002450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002452:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8002456:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
 800245a:	2a13      	cmp	r2, #19
 800245c:	4604      	mov	r4, r0
 800245e:	460b      	mov	r3, r1
 8002460:	dc11      	bgt.n	8002486 <trunc+0x36>
 8002462:	2a00      	cmp	r2, #0
 8002464:	da04      	bge.n	8002470 <trunc+0x20>
 8002466:	2200      	movs	r2, #0
 8002468:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800246c:	4614      	mov	r4, r2
 800246e:	e007      	b.n	8002480 <trunc+0x30>
 8002470:	2000      	movs	r0, #0
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <trunc+0x60>)
 8002474:	fa43 f202 	asr.w	r2, r3, r2
 8002478:	ea21 0102 	bic.w	r1, r1, r2
 800247c:	4604      	mov	r4, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4620      	mov	r0, r4
 8002482:	4619      	mov	r1, r3
 8002484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002486:	2a33      	cmp	r2, #51	; 0x33
 8002488:	dd07      	ble.n	800249a <trunc+0x4a>
 800248a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800248e:	d1f7      	bne.n	8002480 <trunc+0x30>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	f7fd fe62 	bl	800015c <__adddf3>
 8002498:	e7f0      	b.n	800247c <trunc+0x2c>
 800249a:	460b      	mov	r3, r1
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
 80024a4:	fa21 f505 	lsr.w	r5, r1, r5
 80024a8:	ea20 0205 	bic.w	r2, r0, r5
 80024ac:	e7de      	b.n	800246c <trunc+0x1c>
 80024ae:	bf00      	nop
 80024b0:	000fffff 	.word	0x000fffff

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
