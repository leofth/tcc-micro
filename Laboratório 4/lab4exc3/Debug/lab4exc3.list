
lab4exc3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000808  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000914  08000914  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000914  08000914  00010914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000918  08000918  00010918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800091c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000024  2000000c  08000928  0002000c  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000030  08000928  00020030  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000428f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b5f  00000000  00000000  000242c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005c0  00000000  00000000  00024e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000538  00000000  00000000  000253e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001f31  00000000  00000000  00025920  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b6a  00000000  00000000  00027851  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000293bb  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001860  00000000  00000000  00029438  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080008fc 	.word	0x080008fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080008fc 	.word	0x080008fc

0800014c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000154:	2300      	movs	r3, #0
 8000156:	617b      	str	r3, [r7, #20]
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
 800015c:	230f      	movs	r3, #15
 800015e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d03a      	beq.n	80001de <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000168:	4b27      	ldr	r3, [pc, #156]	; (8000208 <NVIC_Init+0xbc>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	43db      	mvns	r3, r3
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	f003 0307 	and.w	r3, r3, #7
 8000174:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	f1c3 0304 	rsb	r3, r3, #4
 800017c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	fa22 f303 	lsr.w	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	461a      	mov	r2, r3
 800018e:	693b      	ldr	r3, [r7, #16]
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	4313      	orrs	r3, r2
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <NVIC_Init+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	6979      	ldr	r1, [r7, #20]
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	4413      	add	r3, r2
 80001b8:	460a      	mov	r2, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <NVIC_Init+0xc0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	095b      	lsrs	r3, r3, #5
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	f003 031f 	and.w	r3, r3, #31
 80001d2:	2101      	movs	r1, #1
 80001d4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001dc:	e00f      	b.n	80001fe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001de:	490b      	ldr	r1, [pc, #44]	; (800020c <NVIC_Init+0xc0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	2201      	movs	r2, #1
 80001f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f6:	f100 0320 	add.w	r3, r0, #32
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	371c      	adds	r7, #28
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	; 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	78db      	ldrb	r3, [r3, #3]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	461a      	mov	r2, r3
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	4313      	orrs	r3, r2
 8000252:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d044      	beq.n	80002e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	e038      	b.n	80002dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800026a:	2201      	movs	r2, #1
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4013      	ands	r3, r2
 800027e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	429a      	cmp	r2, r3
 8000286:	d126      	bne.n	80002d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800028e:	220f      	movs	r2, #15
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	43db      	mvns	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4013      	ands	r3, r2
 80002a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	2b28      	cmp	r3, #40	; 0x28
 80002b6:	d105      	bne.n	80002c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80002b8:	2201      	movs	r2, #1
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	409a      	lsls	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	e008      	b.n	80002d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	2b48      	cmp	r3, #72	; 0x48
 80002ca:	d104      	bne.n	80002d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80002cc:	2201      	movs	r2, #1
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	409a      	lsls	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	3301      	adds	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9c3      	bls.n	800026a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d946      	bls.n	800037e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	e03a      	b.n	8000372 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	3308      	adds	r3, #8
 8000300:	2201      	movs	r2, #1
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d127      	bne.n	800036c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000322:	220f      	movs	r2, #15
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	43db      	mvns	r3, r3
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	4013      	ands	r3, r2
 8000334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000336:	69fa      	ldr	r2, [r7, #28]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	4313      	orrs	r3, r2
 8000342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	78db      	ldrb	r3, [r3, #3]
 8000348:	2b28      	cmp	r3, #40	; 0x28
 800034a:	d105      	bne.n	8000358 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3308      	adds	r3, #8
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	78db      	ldrb	r3, [r3, #3]
 800035c:	2b48      	cmp	r3, #72	; 0x48
 800035e:	d105      	bne.n	800036c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3308      	adds	r3, #8
 8000364:	2201      	movs	r2, #1
 8000366:	409a      	lsls	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	3301      	adds	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d9c1      	bls.n	80002fc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	605a      	str	r2, [r3, #4]
  }
}
 800037e:	bf00      	nop
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <GPIO_Write>:
  * @param  GPIOx: where x can be (A..G) to select the GPIO peripheral.
  * @param  PortVal: specifies the value to be written to the port output data register.
  * @retval None
  */
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  
  GPIOx->ODR = PortVal;
 8000394:	887a      	ldrh	r2, [r7, #2]
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	60da      	str	r2, [r3, #12]
}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr

080003a4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
 80003ac:	460b      	mov	r3, r1
 80003ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003b0:	78fb      	ldrb	r3, [r7, #3]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d006      	beq.n	80003c4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80003b6:	4909      	ldr	r1, [pc, #36]	; (80003dc <RCC_APB2PeriphClockCmd+0x38>)
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <RCC_APB2PeriphClockCmd+0x38>)
 80003ba:	699a      	ldr	r2, [r3, #24]
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4313      	orrs	r3, r2
 80003c0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80003c2:	e006      	b.n	80003d2 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80003c4:	4905      	ldr	r1, [pc, #20]	; (80003dc <RCC_APB2PeriphClockCmd+0x38>)
 80003c6:	4b05      	ldr	r3, [pc, #20]	; (80003dc <RCC_APB2PeriphClockCmd+0x38>)
 80003c8:	699a      	ldr	r2, [r3, #24]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	43db      	mvns	r3, r3
 80003ce:	4013      	ands	r3, r2
 80003d0:	618b      	str	r3, [r1, #24]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000

080003e0 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	460b      	mov	r3, r1
 80003ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80003ec:	78fb      	ldrb	r3, [r7, #3]
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d006      	beq.n	8000400 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80003f2:	4909      	ldr	r1, [pc, #36]	; (8000418 <RCC_APB1PeriphClockCmd+0x38>)
 80003f4:	4b08      	ldr	r3, [pc, #32]	; (8000418 <RCC_APB1PeriphClockCmd+0x38>)
 80003f6:	69da      	ldr	r2, [r3, #28]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4313      	orrs	r3, r2
 80003fc:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80003fe:	e006      	b.n	800040e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000400:	4905      	ldr	r1, [pc, #20]	; (8000418 <RCC_APB1PeriphClockCmd+0x38>)
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <RCC_APB1PeriphClockCmd+0x38>)
 8000404:	69da      	ldr	r2, [r3, #28]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	43db      	mvns	r3, r3
 800040a:	4013      	ands	r3, r2
 800040c:	61cb      	str	r3, [r1, #28]
}
 800040e:	bf00      	nop
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr
 8000418:	40021000 	.word	0x40021000

0800041c <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for the 
  *         specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 800041c:	b480      	push	{r7}
 800041e:	b085      	sub	sp, #20
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  uint16_t tmpcr1 = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	81fb      	strh	r3, [r7, #14]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	881b      	ldrh	r3, [r3, #0]
 800042e:	81fb      	strh	r3, [r7, #14]

  if((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM2) || (TIMx == TIM3)||
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a2e      	ldr	r2, [pc, #184]	; (80004ec <TIM_TimeBaseInit+0xd0>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d013      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a2d      	ldr	r2, [pc, #180]	; (80004f0 <TIM_TimeBaseInit+0xd4>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d00f      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000446:	d00b      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a2a      	ldr	r2, [pc, #168]	; (80004f4 <TIM_TimeBaseInit+0xd8>)
 800044c:	4293      	cmp	r3, r2
 800044e:	d007      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	4a29      	ldr	r2, [pc, #164]	; (80004f8 <TIM_TimeBaseInit+0xdc>)
 8000454:	4293      	cmp	r3, r2
 8000456:	d003      	beq.n	8000460 <TIM_TimeBaseInit+0x44>
     (TIMx == TIM4) || (TIMx == TIM5)) 
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a28      	ldr	r2, [pc, #160]	; (80004fc <TIM_TimeBaseInit+0xe0>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d108      	bne.n	8000472 <TIM_TimeBaseInit+0x56>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000460:	89fb      	ldrh	r3, [r7, #14]
 8000462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000466:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	885a      	ldrh	r2, [r3, #2]
 800046c:	89fb      	ldrh	r3, [r7, #14]
 800046e:	4313      	orrs	r3, r2
 8000470:	81fb      	strh	r3, [r7, #14]
  }
 
  if((TIMx != TIM6) && (TIMx != TIM7))
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a22      	ldr	r2, [pc, #136]	; (8000500 <TIM_TimeBaseInit+0xe4>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d00c      	beq.n	8000494 <TIM_TimeBaseInit+0x78>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a21      	ldr	r2, [pc, #132]	; (8000504 <TIM_TimeBaseInit+0xe8>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d008      	beq.n	8000494 <TIM_TimeBaseInit+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
 8000482:	89fb      	ldrh	r3, [r7, #14]
 8000484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000488:	81fb      	strh	r3, [r7, #14]
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	88da      	ldrh	r2, [r3, #6]
 800048e:	89fb      	ldrh	r3, [r7, #14]
 8000490:	4313      	orrs	r3, r2
 8000492:	81fb      	strh	r3, [r7, #14]
  }

  TIMx->CR1 = tmpcr1;
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	89fa      	ldrh	r2, [r7, #14]
 8000498:	801a      	strh	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	889a      	ldrh	r2, [r3, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	859a      	strh	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	881a      	ldrh	r2, [r3, #0]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	851a      	strh	r2, [r3, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM8)|| (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	4a0f      	ldr	r2, [pc, #60]	; (80004ec <TIM_TimeBaseInit+0xd0>)
 80004ae:	4293      	cmp	r3, r2
 80004b0:	d00f      	beq.n	80004d2 <TIM_TimeBaseInit+0xb6>
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	4a0e      	ldr	r2, [pc, #56]	; (80004f0 <TIM_TimeBaseInit+0xd4>)
 80004b6:	4293      	cmp	r3, r2
 80004b8:	d00b      	beq.n	80004d2 <TIM_TimeBaseInit+0xb6>
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a12      	ldr	r2, [pc, #72]	; (8000508 <TIM_TimeBaseInit+0xec>)
 80004be:	4293      	cmp	r3, r2
 80004c0:	d007      	beq.n	80004d2 <TIM_TimeBaseInit+0xb6>
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4a11      	ldr	r2, [pc, #68]	; (800050c <TIM_TimeBaseInit+0xf0>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d003      	beq.n	80004d2 <TIM_TimeBaseInit+0xb6>
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a10      	ldr	r2, [pc, #64]	; (8000510 <TIM_TimeBaseInit+0xf4>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d104      	bne.n	80004dc <TIM_TimeBaseInit+0xc0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	7a1b      	ldrb	r3, [r3, #8]
 80004d6:	b29a      	uxth	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	2201      	movs	r2, #1
 80004e0:	829a      	strh	r2, [r3, #20]
}
 80004e2:	bf00      	nop
 80004e4:	3714      	adds	r7, #20
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bc80      	pop	{r7}
 80004ea:	4770      	bx	lr
 80004ec:	40012c00 	.word	0x40012c00
 80004f0:	40013400 	.word	0x40013400
 80004f4:	40000400 	.word	0x40000400
 80004f8:	40000800 	.word	0x40000800
 80004fc:	40000c00 	.word	0x40000c00
 8000500:	40001000 	.word	0x40001000
 8000504:	40001400 	.word	0x40001400
 8000508:	40014000 	.word	0x40014000
 800050c:	40014400 	.word	0x40014400
 8000510:	40014800 	.word	0x40014800

08000514 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
 800051c:	460b      	mov	r3, r1
 800051e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000520:	78fb      	ldrb	r3, [r7, #3]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d008      	beq.n	8000538 <TIM_Cmd+0x24>
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	b29a      	uxth	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
  }
}
 8000536:	e007      	b.n	8000548 <TIM_Cmd+0x34>
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	881b      	ldrh	r3, [r3, #0]
 800053c:	b29b      	uxth	r3, r3
 800053e:	f023 0301 	bic.w	r3, r3, #1
 8000542:	b29a      	uxth	r2, r3
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	801a      	strh	r2, [r3, #0]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr

08000552 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
 800055a:	460b      	mov	r3, r1
 800055c:	807b      	strh	r3, [r7, #2]
 800055e:	4613      	mov	r3, r2
 8000560:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000562:	787b      	ldrb	r3, [r7, #1]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d008      	beq.n	800057a <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	899b      	ldrh	r3, [r3, #12]
 800056c:	b29a      	uxth	r2, r3
 800056e:	887b      	ldrh	r3, [r7, #2]
 8000570:	4313      	orrs	r3, r2
 8000572:	b29a      	uxth	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 8000578:	e009      	b.n	800058e <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	899b      	ldrh	r3, [r3, #12]
 800057e:	b29a      	uxth	r2, r3
 8000580:	887b      	ldrh	r3, [r7, #2]
 8000582:	43db      	mvns	r3, r3
 8000584:	b29b      	uxth	r3, r3
 8000586:	4013      	ands	r3, r2
 8000588:	b29a      	uxth	r2, r3
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	819a      	strh	r2, [r3, #12]
}
 800058e:	bf00      	nop
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr

08000598 <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	460b      	mov	r3, r1
 80005a2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80005a4:	887b      	ldrh	r3, [r7, #2]
 80005a6:	43db      	mvns	r3, r3
 80005a8:	b29a      	uxth	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	821a      	strh	r2, [r3, #16]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bc80      	pop	{r7}
 80005b6:	4770      	bx	lr

080005b8 <Conf_GPIO>:
#include "conf_gpio.h"

void Conf_GPIO(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 80005be:	2101      	movs	r1, #1
 80005c0:	2004      	movs	r0, #4
 80005c2:	f7ff feef 	bl	80003a4 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef gpio_structA;
  gpio_structA.GPIO_Mode = GPIO_Mode_Out_PP;
 80005c6:	2310      	movs	r3, #16
 80005c8:	71fb      	strb	r3, [r7, #7]
  gpio_structA.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_2 | GPIO_Pin_3
 80005ca:	237f      	movs	r3, #127	; 0x7f
 80005cc:	80bb      	strh	r3, [r7, #4]
                 | GPIO_Pin_4 | GPIO_Pin_5 | GPIO_Pin_6;
  gpio_structA.GPIO_Speed = GPIO_Speed_2MHz;
 80005ce:	2302      	movs	r3, #2
 80005d0:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOA, &gpio_structA);
 80005d2:	1d3b      	adds	r3, r7, #4
 80005d4:	4619      	mov	r1, r3
 80005d6:	4803      	ldr	r0, [pc, #12]	; (80005e4 <Conf_GPIO+0x2c>)
 80005d8:	f7ff fe1a 	bl	8000210 <GPIO_Init>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	40010800 	.word	0x40010800

080005e8 <main>:

void Conf_TIM2(void);
void Conf_NVIC(void);

int main(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  Conf_GPIO();
 80005ec:	f7ff ffe4 	bl	80005b8 <Conf_GPIO>
  Conf_TIM2();
 80005f0:	f000 f808 	bl	8000604 <Conf_TIM2>
  Conf_NVIC();
 80005f4:	f000 f82e 	bl	8000654 <Conf_NVIC>

  GPIOA->ODR = 0;
 80005f8:	4b01      	ldr	r3, [pc, #4]	; (8000600 <main+0x18>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]

  while(1)
 80005fe:	e7fe      	b.n	80005fe <main+0x16>
 8000600:	40010800 	.word	0x40010800

08000604 <Conf_TIM2>:

  return 0;
}

void Conf_TIM2(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 800060a:	2101      	movs	r1, #1
 800060c:	2001      	movs	r0, #1
 800060e:	f7ff fee7 	bl	80003e0 <RCC_APB1PeriphClockCmd>

  TIM_TimeBaseInitTypeDef tim_struct;
  tim_struct.TIM_Prescaler = 7200-1;
 8000612:	f641 431f 	movw	r3, #7199	; 0x1c1f
 8000616:	80bb      	strh	r3, [r7, #4]
  tim_struct.TIM_Period = 1000-1;
 8000618:	f240 33e7 	movw	r3, #999	; 0x3e7
 800061c:	813b      	strh	r3, [r7, #8]
  tim_struct.TIM_CounterMode =  TIM_CounterMode_Up;
 800061e:	2300      	movs	r3, #0
 8000620:	80fb      	strh	r3, [r7, #6]
  tim_struct.TIM_ClockDivision = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	817b      	strh	r3, [r7, #10]
  tim_struct.TIM_RepetitionCounter = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	733b      	strb	r3, [r7, #12]
  TIM_TimeBaseInit(TIM2, &tim_struct);
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	4619      	mov	r1, r3
 800062e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000632:	f7ff fef3 	bl	800041c <TIM_TimeBaseInit>

  TIM_ITConfig(TIM2, TIM_IT_Update, ENABLE);
 8000636:	2201      	movs	r2, #1
 8000638:	2101      	movs	r1, #1
 800063a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800063e:	f7ff ff88 	bl	8000552 <TIM_ITConfig>
  TIM_Cmd(TIM2, ENABLE);
 8000642:	2101      	movs	r1, #1
 8000644:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000648:	f7ff ff64 	bl	8000514 <TIM_Cmd>
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <Conf_NVIC>:

void Conf_NVIC(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef nvic_struct;
  nvic_struct.NVIC_IRQChannel = TIM2_IRQn;
 800065a:	231c      	movs	r3, #28
 800065c:	713b      	strb	r3, [r7, #4]
  nvic_struct.NVIC_IRQChannelCmd = ENABLE;
 800065e:	2301      	movs	r3, #1
 8000660:	71fb      	strb	r3, [r7, #7]
  nvic_struct.NVIC_IRQChannelPreemptionPriority = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	717b      	strb	r3, [r7, #5]
  nvic_struct.NVIC_IRQChannelSubPriority = 0;
 8000666:	2300      	movs	r3, #0
 8000668:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&nvic_struct);
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	4618      	mov	r0, r3
 800066e:	f7ff fd6d 	bl	800014c <NVIC_Init>
}
 8000672:	bf00      	nop
 8000674:	3708      	adds	r7, #8
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800067c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006b4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000680:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000682:	e003      	b.n	800068c <LoopCopyDataInit>

08000684 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000686:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000688:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800068a:	3104      	adds	r1, #4

0800068c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000690:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000692:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000694:	d3f6      	bcc.n	8000684 <CopyDataInit>
	ldr	r2, =_sbss
 8000696:	4a0b      	ldr	r2, [pc, #44]	; (80006c4 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000698:	e002      	b.n	80006a0 <LoopFillZerobss>

0800069a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800069a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800069c:	f842 3b04 	str.w	r3, [r2], #4

080006a0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006a0:	4b09      	ldr	r3, [pc, #36]	; (80006c8 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80006a2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006a4:	d3f9      	bcc.n	800069a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006a6:	f000 f84b 	bl	8000740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006aa:	f000 f903 	bl	80008b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006ae:	f7ff ff9b 	bl	80005e8 <main>
	bx	lr
 80006b2:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b4:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 80006b8:	0800091c 	.word	0x0800091c
	ldr	r0, =_sdata
 80006bc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006c0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80006c4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80006c8:	20000030 	.word	0x20000030

080006cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80006cc:	e7fe      	b.n	80006cc <ADC1_2_IRQHandler>
	...

080006d0 <TIM2_IRQHandler>:
volatile uint8_t indice = 0;
//uint16_t digitos[10] = {0xC0, 0xF9, 0xA4, 0xB0, 0x99, 0x92, 0x82, 0xF8, 0x80, 0x90};
uint8_t digitos[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F}; // cátodo comum

void TIM2_IRQHandler(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  if (miliseg == 60)
 80006d4:	4b16      	ldr	r3, [pc, #88]	; (8000730 <TIM2_IRQHandler+0x60>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	2b3c      	cmp	r3, #60	; 0x3c
 80006da:	d112      	bne.n	8000702 <TIM2_IRQHandler+0x32>
  {
    indice++;
 80006dc:	4b15      	ldr	r3, [pc, #84]	; (8000734 <TIM2_IRQHandler+0x64>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	3301      	adds	r3, #1
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b13      	ldr	r3, [pc, #76]	; (8000734 <TIM2_IRQHandler+0x64>)
 80006e8:	701a      	strb	r2, [r3, #0]
    miliseg = 0;
 80006ea:	4b11      	ldr	r3, [pc, #68]	; (8000730 <TIM2_IRQHandler+0x60>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
    if (10 == indice)
 80006f0:	4b10      	ldr	r3, [pc, #64]	; (8000734 <TIM2_IRQHandler+0x64>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b0a      	cmp	r3, #10
 80006f8:	d108      	bne.n	800070c <TIM2_IRQHandler+0x3c>
    {
      indice = 0;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <TIM2_IRQHandler+0x64>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
 8000700:	e004      	b.n	800070c <TIM2_IRQHandler+0x3c>
    }
  }
  else
    miliseg++;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <TIM2_IRQHandler+0x60>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	3301      	adds	r3, #1
 8000708:	4a09      	ldr	r2, [pc, #36]	; (8000730 <TIM2_IRQHandler+0x60>)
 800070a:	6013      	str	r3, [r2, #0]

  GPIO_Write(GPIOA, digitos[indice]);
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <TIM2_IRQHandler+0x64>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	461a      	mov	r2, r3
 8000714:	4b08      	ldr	r3, [pc, #32]	; (8000738 <TIM2_IRQHandler+0x68>)
 8000716:	5c9b      	ldrb	r3, [r3, r2]
 8000718:	b29b      	uxth	r3, r3
 800071a:	4619      	mov	r1, r3
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <TIM2_IRQHandler+0x6c>)
 800071e:	f7ff fe33 	bl	8000388 <GPIO_Write>

  TIM_ClearITPendingBit(TIM2, TIM_IT_Update);
 8000722:	2101      	movs	r1, #1
 8000724:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000728:	f7ff ff36 	bl	8000598 <TIM_ClearITPendingBit>
}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000028 	.word	0x20000028
 8000734:	2000002c 	.word	0x2000002c
 8000738:	20000000 	.word	0x20000000
 800073c:	40010800 	.word	0x40010800

08000740 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000744:	4a15      	ldr	r2, [pc, #84]	; (800079c <SystemInit+0x5c>)
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <SystemInit+0x5c>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000750:	4912      	ldr	r1, [pc, #72]	; (800079c <SystemInit+0x5c>)
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <SystemInit+0x5c>)
 8000754:	685a      	ldr	r2, [r3, #4]
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <SystemInit+0x60>)
 8000758:	4013      	ands	r3, r2
 800075a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800075c:	4a0f      	ldr	r2, [pc, #60]	; (800079c <SystemInit+0x5c>)
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <SystemInit+0x5c>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000766:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800076a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800076c:	4a0b      	ldr	r2, [pc, #44]	; (800079c <SystemInit+0x5c>)
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <SystemInit+0x5c>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000776:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000778:	4a08      	ldr	r2, [pc, #32]	; (800079c <SystemInit+0x5c>)
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <SystemInit+0x5c>)
 800077c:	685b      	ldr	r3, [r3, #4]
 800077e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000782:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SystemInit+0x5c>)
 8000786:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800078a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 800078c:	f000 f80c 	bl	80007a8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000790:	4b04      	ldr	r3, [pc, #16]	; (80007a4 <SystemInit+0x64>)
 8000792:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000796:	609a      	str	r2, [r3, #8]
#endif 
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	40021000 	.word	0x40021000
 80007a0:	f8ff0000 	.word	0xf8ff0000
 80007a4:	e000ed00 	.word	0xe000ed00

080007a8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 80007ac:	f000 f802 	bl	80007b4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	2300      	movs	r3, #0
 80007c0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80007c2:	4a3a      	ldr	r2, [pc, #232]	; (80008ac <SetSysClockTo72+0xf8>)
 80007c4:	4b39      	ldr	r3, [pc, #228]	; (80008ac <SetSysClockTo72+0xf8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007cc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80007ce:	4b37      	ldr	r3, [pc, #220]	; (80008ac <SetSysClockTo72+0xf8>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007d6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3301      	adds	r3, #1
 80007dc:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d103      	bne.n	80007ec <SetSysClockTo72+0x38>
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80007ea:	d1f0      	bne.n	80007ce <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80007ec:	4b2f      	ldr	r3, [pc, #188]	; (80008ac <SetSysClockTo72+0xf8>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d002      	beq.n	80007fe <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80007f8:	2301      	movs	r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	e001      	b.n	8000802 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d14b      	bne.n	80008a0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000808:	4a29      	ldr	r2, [pc, #164]	; (80008b0 <SetSysClockTo72+0xfc>)
 800080a:	4b29      	ldr	r3, [pc, #164]	; (80008b0 <SetSysClockTo72+0xfc>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f043 0310 	orr.w	r3, r3, #16
 8000812:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000814:	4a26      	ldr	r2, [pc, #152]	; (80008b0 <SetSysClockTo72+0xfc>)
 8000816:	4b26      	ldr	r3, [pc, #152]	; (80008b0 <SetSysClockTo72+0xfc>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f023 0303 	bic.w	r3, r3, #3
 800081e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000820:	4a23      	ldr	r2, [pc, #140]	; (80008b0 <SetSysClockTo72+0xfc>)
 8000822:	4b23      	ldr	r3, [pc, #140]	; (80008b0 <SetSysClockTo72+0xfc>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f043 0302 	orr.w	r3, r3, #2
 800082a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800082c:	4a1f      	ldr	r2, [pc, #124]	; (80008ac <SetSysClockTo72+0xf8>)
 800082e:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <SetSysClockTo72+0xf8>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000834:	4a1d      	ldr	r2, [pc, #116]	; (80008ac <SetSysClockTo72+0xf8>)
 8000836:	4b1d      	ldr	r3, [pc, #116]	; (80008ac <SetSysClockTo72+0xf8>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 800083c:	4a1b      	ldr	r2, [pc, #108]	; (80008ac <SetSysClockTo72+0xf8>)
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <SetSysClockTo72+0xf8>)
 8000840:	685b      	ldr	r3, [r3, #4]
 8000842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000846:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <SetSysClockTo72+0xf8>)
 800084a:	4b18      	ldr	r3, [pc, #96]	; (80008ac <SetSysClockTo72+0xf8>)
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000852:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000854:	4a15      	ldr	r2, [pc, #84]	; (80008ac <SetSysClockTo72+0xf8>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <SetSysClockTo72+0xf8>)
 8000858:	685b      	ldr	r3, [r3, #4]
 800085a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 800085e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000860:	4a12      	ldr	r2, [pc, #72]	; (80008ac <SetSysClockTo72+0xf8>)
 8000862:	4b12      	ldr	r3, [pc, #72]	; (80008ac <SetSysClockTo72+0xf8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800086a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 800086c:	bf00      	nop
 800086e:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <SetSysClockTo72+0xf8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000876:	2b00      	cmp	r3, #0
 8000878:	d0f9      	beq.n	800086e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 800087a:	4a0c      	ldr	r2, [pc, #48]	; (80008ac <SetSysClockTo72+0xf8>)
 800087c:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <SetSysClockTo72+0xf8>)
 800087e:	685b      	ldr	r3, [r3, #4]
 8000880:	f023 0303 	bic.w	r3, r3, #3
 8000884:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <SetSysClockTo72+0xf8>)
 8000888:	4b08      	ldr	r3, [pc, #32]	; (80008ac <SetSysClockTo72+0xf8>)
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	f043 0302 	orr.w	r3, r3, #2
 8000890:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000892:	bf00      	nop
 8000894:	4b05      	ldr	r3, [pc, #20]	; (80008ac <SetSysClockTo72+0xf8>)
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f003 030c 	and.w	r3, r3, #12
 800089c:	2b08      	cmp	r3, #8
 800089e:	d1f9      	bne.n	8000894 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40022000 	.word	0x40022000

080008b4 <__libc_init_array>:
 80008b4:	b570      	push	{r4, r5, r6, lr}
 80008b6:	2500      	movs	r5, #0
 80008b8:	4e0c      	ldr	r6, [pc, #48]	; (80008ec <__libc_init_array+0x38>)
 80008ba:	4c0d      	ldr	r4, [pc, #52]	; (80008f0 <__libc_init_array+0x3c>)
 80008bc:	1ba4      	subs	r4, r4, r6
 80008be:	10a4      	asrs	r4, r4, #2
 80008c0:	42a5      	cmp	r5, r4
 80008c2:	d109      	bne.n	80008d8 <__libc_init_array+0x24>
 80008c4:	f000 f81a 	bl	80008fc <_init>
 80008c8:	2500      	movs	r5, #0
 80008ca:	4e0a      	ldr	r6, [pc, #40]	; (80008f4 <__libc_init_array+0x40>)
 80008cc:	4c0a      	ldr	r4, [pc, #40]	; (80008f8 <__libc_init_array+0x44>)
 80008ce:	1ba4      	subs	r4, r4, r6
 80008d0:	10a4      	asrs	r4, r4, #2
 80008d2:	42a5      	cmp	r5, r4
 80008d4:	d105      	bne.n	80008e2 <__libc_init_array+0x2e>
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008dc:	4798      	blx	r3
 80008de:	3501      	adds	r5, #1
 80008e0:	e7ee      	b.n	80008c0 <__libc_init_array+0xc>
 80008e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80008e6:	4798      	blx	r3
 80008e8:	3501      	adds	r5, #1
 80008ea:	e7f2      	b.n	80008d2 <__libc_init_array+0x1e>
 80008ec:	08000914 	.word	0x08000914
 80008f0:	08000914 	.word	0x08000914
 80008f4:	08000914 	.word	0x08000914
 80008f8:	08000918 	.word	0x08000918

080008fc <_init>:
 80008fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008fe:	bf00      	nop
 8000900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000902:	bc08      	pop	{r3}
 8000904:	469e      	mov	lr, r3
 8000906:	4770      	bx	lr

08000908 <_fini>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	bf00      	nop
 800090c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800090e:	bc08      	pop	{r3}
 8000910:	469e      	mov	lr, r3
 8000912:	4770      	bx	lr
