
lab4exc2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d38  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e44  08000e4c  00010e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  08000e44  08000e44  00010e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08000e48  08000e48  00010e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  00010e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  20000000  08000e4c  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  2000001c  08000e4c  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00010e4c  2**0
                  CONTENTS, READONLY
  9 .debug_info   000041d5  00000000  00000000  00010e75  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000b6e  00000000  00000000  0001504a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005d0  00000000  00000000  00015bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000548  00000000  00000000  00016188  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00001f30  00000000  00000000  000166d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001b5a  00000000  00000000  00018600  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0001a15a  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000018a0  00000000  00000000  0001a1d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000e2c 	.word	0x08000e2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000e2c 	.word	0x08000e2c

0800014c <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b087      	sub	sp, #28
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000154:	2300      	movs	r3, #0
 8000156:	617b      	str	r3, [r7, #20]
 8000158:	2300      	movs	r3, #0
 800015a:	613b      	str	r3, [r7, #16]
 800015c:	230f      	movs	r3, #15
 800015e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	78db      	ldrb	r3, [r3, #3]
 8000164:	2b00      	cmp	r3, #0
 8000166:	d03a      	beq.n	80001de <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000168:	4b27      	ldr	r3, [pc, #156]	; (8000208 <NVIC_Init+0xbc>)
 800016a:	68db      	ldr	r3, [r3, #12]
 800016c:	43db      	mvns	r3, r3
 800016e:	0a1b      	lsrs	r3, r3, #8
 8000170:	f003 0307 	and.w	r3, r3, #7
 8000174:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000176:	697b      	ldr	r3, [r7, #20]
 8000178:	f1c3 0304 	rsb	r3, r3, #4
 800017c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800017e:	68fa      	ldr	r2, [r7, #12]
 8000180:	697b      	ldr	r3, [r7, #20]
 8000182:	fa22 f303 	lsr.w	r3, r2, r3
 8000186:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	785b      	ldrb	r3, [r3, #1]
 800018c:	461a      	mov	r2, r3
 800018e:	693b      	ldr	r3, [r7, #16]
 8000190:	fa02 f303 	lsl.w	r3, r2, r3
 8000194:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	789b      	ldrb	r3, [r3, #2]
 800019a:	461a      	mov	r2, r3
 800019c:	68fb      	ldr	r3, [r7, #12]
 800019e:	4013      	ands	r3, r2
 80001a0:	697a      	ldr	r2, [r7, #20]
 80001a2:	4313      	orrs	r3, r2
 80001a4:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80001a6:	697b      	ldr	r3, [r7, #20]
 80001a8:	011b      	lsls	r3, r3, #4
 80001aa:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80001ac:	4a17      	ldr	r2, [pc, #92]	; (800020c <NVIC_Init+0xc0>)
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	781b      	ldrb	r3, [r3, #0]
 80001b2:	6979      	ldr	r1, [r7, #20]
 80001b4:	b2c9      	uxtb	r1, r1
 80001b6:	4413      	add	r3, r2
 80001b8:	460a      	mov	r2, r1
 80001ba:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001be:	4a13      	ldr	r2, [pc, #76]	; (800020c <NVIC_Init+0xc0>)
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	781b      	ldrb	r3, [r3, #0]
 80001c4:	095b      	lsrs	r3, r3, #5
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	f003 031f 	and.w	r3, r3, #31
 80001d2:	2101      	movs	r1, #1
 80001d4:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 80001dc:	e00f      	b.n	80001fe <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001de:	490b      	ldr	r1, [pc, #44]	; (800020c <NVIC_Init+0xc0>)
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	781b      	ldrb	r3, [r3, #0]
 80001e4:	095b      	lsrs	r3, r3, #5
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	f003 031f 	and.w	r3, r3, #31
 80001f2:	2201      	movs	r2, #1
 80001f4:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80001f6:	f100 0320 	add.w	r3, r0, #32
 80001fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80001fe:	bf00      	nop
 8000200:	371c      	adds	r7, #28
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	e000ed00 	.word	0xe000ed00
 800020c:	e000e100 	.word	0xe000e100

08000210 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000210:	b480      	push	{r7}
 8000212:	b089      	sub	sp, #36	; 0x24
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
 8000218:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800021a:	2300      	movs	r3, #0
 800021c:	61fb      	str	r3, [r7, #28]
 800021e:	2300      	movs	r3, #0
 8000220:	613b      	str	r3, [r7, #16]
 8000222:	2300      	movs	r3, #0
 8000224:	61bb      	str	r3, [r7, #24]
 8000226:	2300      	movs	r3, #0
 8000228:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	617b      	str	r3, [r7, #20]
 800022e:	2300      	movs	r3, #0
 8000230:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000232:	683b      	ldr	r3, [r7, #0]
 8000234:	78db      	ldrb	r3, [r3, #3]
 8000236:	f003 030f 	and.w	r3, r3, #15
 800023a:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 800023c:	683b      	ldr	r3, [r7, #0]
 800023e:	78db      	ldrb	r3, [r3, #3]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	2b00      	cmp	r3, #0
 8000246:	d005      	beq.n	8000254 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	789b      	ldrb	r3, [r3, #2]
 800024c:	461a      	mov	r2, r3
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	4313      	orrs	r3, r2
 8000252:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	881b      	ldrh	r3, [r3, #0]
 8000258:	b2db      	uxtb	r3, r3
 800025a:	2b00      	cmp	r3, #0
 800025c:	d044      	beq.n	80002e8 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000264:	2300      	movs	r3, #0
 8000266:	61bb      	str	r3, [r7, #24]
 8000268:	e038      	b.n	80002dc <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 800026a:	2201      	movs	r2, #1
 800026c:	69bb      	ldr	r3, [r7, #24]
 800026e:	fa02 f303 	lsl.w	r3, r2, r3
 8000272:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000274:	683b      	ldr	r3, [r7, #0]
 8000276:	881b      	ldrh	r3, [r3, #0]
 8000278:	461a      	mov	r2, r3
 800027a:	68fb      	ldr	r3, [r7, #12]
 800027c:	4013      	ands	r3, r2
 800027e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000280:	693a      	ldr	r2, [r7, #16]
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	429a      	cmp	r2, r3
 8000286:	d126      	bne.n	80002d6 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800028e:	220f      	movs	r2, #15
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	fa02 f303 	lsl.w	r3, r2, r3
 8000296:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000298:	68bb      	ldr	r3, [r7, #8]
 800029a:	43db      	mvns	r3, r3
 800029c:	697a      	ldr	r2, [r7, #20]
 800029e:	4013      	ands	r3, r2
 80002a0:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80002a2:	69fa      	ldr	r2, [r7, #28]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	697a      	ldr	r2, [r7, #20]
 80002ac:	4313      	orrs	r3, r2
 80002ae:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80002b0:	683b      	ldr	r3, [r7, #0]
 80002b2:	78db      	ldrb	r3, [r3, #3]
 80002b4:	2b28      	cmp	r3, #40	; 0x28
 80002b6:	d105      	bne.n	80002c4 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80002b8:	2201      	movs	r2, #1
 80002ba:	69bb      	ldr	r3, [r7, #24]
 80002bc:	409a      	lsls	r2, r3
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	615a      	str	r2, [r3, #20]
 80002c2:	e008      	b.n	80002d6 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	78db      	ldrb	r3, [r3, #3]
 80002c8:	2b48      	cmp	r3, #72	; 0x48
 80002ca:	d104      	bne.n	80002d6 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 80002cc:	2201      	movs	r2, #1
 80002ce:	69bb      	ldr	r3, [r7, #24]
 80002d0:	409a      	lsls	r2, r3
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002d6:	69bb      	ldr	r3, [r7, #24]
 80002d8:	3301      	adds	r3, #1
 80002da:	61bb      	str	r3, [r7, #24]
 80002dc:	69bb      	ldr	r3, [r7, #24]
 80002de:	2b07      	cmp	r3, #7
 80002e0:	d9c3      	bls.n	800026a <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	697a      	ldr	r2, [r7, #20]
 80002e6:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	881b      	ldrh	r3, [r3, #0]
 80002ec:	2bff      	cmp	r3, #255	; 0xff
 80002ee:	d946      	bls.n	800037e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
 80002fa:	e03a      	b.n	8000372 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 80002fc:	69bb      	ldr	r3, [r7, #24]
 80002fe:	3308      	adds	r3, #8
 8000300:	2201      	movs	r2, #1
 8000302:	fa02 f303 	lsl.w	r3, r2, r3
 8000306:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	881b      	ldrh	r3, [r3, #0]
 800030c:	461a      	mov	r2, r3
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	4013      	ands	r3, r2
 8000312:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000314:	693a      	ldr	r2, [r7, #16]
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d127      	bne.n	800036c <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 800031c:	69bb      	ldr	r3, [r7, #24]
 800031e:	009b      	lsls	r3, r3, #2
 8000320:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000322:	220f      	movs	r2, #15
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	fa02 f303 	lsl.w	r3, r2, r3
 800032a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	43db      	mvns	r3, r3
 8000330:	697a      	ldr	r2, [r7, #20]
 8000332:	4013      	ands	r3, r2
 8000334:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000336:	69fa      	ldr	r2, [r7, #28]
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	697a      	ldr	r2, [r7, #20]
 8000340:	4313      	orrs	r3, r2
 8000342:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000344:	683b      	ldr	r3, [r7, #0]
 8000346:	78db      	ldrb	r3, [r3, #3]
 8000348:	2b28      	cmp	r3, #40	; 0x28
 800034a:	d105      	bne.n	8000358 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800034c:	69bb      	ldr	r3, [r7, #24]
 800034e:	3308      	adds	r3, #8
 8000350:	2201      	movs	r2, #1
 8000352:	409a      	lsls	r2, r3
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	78db      	ldrb	r3, [r3, #3]
 800035c:	2b48      	cmp	r3, #72	; 0x48
 800035e:	d105      	bne.n	800036c <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000360:	69bb      	ldr	r3, [r7, #24]
 8000362:	3308      	adds	r3, #8
 8000364:	2201      	movs	r2, #1
 8000366:	409a      	lsls	r2, r3
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800036c:	69bb      	ldr	r3, [r7, #24]
 800036e:	3301      	adds	r3, #1
 8000370:	61bb      	str	r3, [r7, #24]
 8000372:	69bb      	ldr	r3, [r7, #24]
 8000374:	2b07      	cmp	r3, #7
 8000376:	d9c1      	bls.n	80002fc <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	697a      	ldr	r2, [r7, #20]
 800037c:	605a      	str	r2, [r3, #4]
  }
}
 800037e:	bf00      	nop
 8000380:	3724      	adds	r7, #36	; 0x24
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <GPIO_ReadOutputDataBit>:
  * @param  GPIO_Pin:  specifies the port bit to read.
  *   This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The output port pin value.
  */
uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
 8000390:	460b      	mov	r3, r1
 8000392:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000394:	2300      	movs	r3, #0
 8000396:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin)); 
  
  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	68da      	ldr	r2, [r3, #12]
 800039c:	887b      	ldrh	r3, [r7, #2]
 800039e:	4013      	ands	r3, r2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d002      	beq.n	80003aa <GPIO_ReadOutputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 80003a4:	2301      	movs	r3, #1
 80003a6:	73fb      	strb	r3, [r7, #15]
 80003a8:	e001      	b.n	80003ae <GPIO_ReadOutputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 80003aa:	2300      	movs	r3, #0
 80003ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	3714      	adds	r7, #20
 80003b4:	46bd      	mov	sp, r7
 80003b6:	bc80      	pop	{r7}
 80003b8:	4770      	bx	lr

080003ba <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 80003ba:	b480      	push	{r7}
 80003bc:	b083      	sub	sp, #12
 80003be:	af00      	add	r7, sp, #0
 80003c0:	6078      	str	r0, [r7, #4]
 80003c2:	460b      	mov	r3, r1
 80003c4:	807b      	strh	r3, [r7, #2]
 80003c6:	4613      	mov	r3, r2
 80003c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal)); 
  
  if (BitVal != Bit_RESET)
 80003ca:	787b      	ldrb	r3, [r7, #1]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d003      	beq.n	80003d8 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80003d0:	887a      	ldrh	r2, [r7, #2]
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin;
  }
}
 80003d6:	e002      	b.n	80003de <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin;
 80003d8:	887a      	ldrh	r2, [r7, #2]
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	615a      	str	r2, [r3, #20]
}
 80003de:	bf00      	nop
 80003e0:	370c      	adds	r7, #12
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr

080003e8 <GPIO_PinRemapConfig>:
  * @param  NewState: new state of the port pin remapping.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void GPIO_PinRemapConfig(uint32_t GPIO_Remap, FunctionalState NewState)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b087      	sub	sp, #28
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	460b      	mov	r3, r1
 80003f2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp = 0x00, tmp1 = 0x00, tmpreg = 0x00, tmpmask = 0x00;
 80003f4:	2300      	movs	r3, #0
 80003f6:	613b      	str	r3, [r7, #16]
 80003f8:	2300      	movs	r3, #0
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	2300      	movs	r3, #0
 8000402:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_REMAP(GPIO_Remap));
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if((GPIO_Remap & 0x80000000) == 0x80000000)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	2b00      	cmp	r3, #0
 8000408:	da03      	bge.n	8000412 <GPIO_PinRemapConfig+0x2a>
  {
    tmpreg = AFIO->MAPR2;
 800040a:	4b2e      	ldr	r3, [pc, #184]	; (80004c4 <GPIO_PinRemapConfig+0xdc>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	617b      	str	r3, [r7, #20]
 8000410:	e002      	b.n	8000418 <GPIO_PinRemapConfig+0x30>
  }
  else
  {
    tmpreg = AFIO->MAPR;
 8000412:	4b2c      	ldr	r3, [pc, #176]	; (80004c4 <GPIO_PinRemapConfig+0xdc>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	617b      	str	r3, [r7, #20]
  }

  tmpmask = (GPIO_Remap & DBGAFR_POSITION_MASK) >> 0x10;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	0c1b      	lsrs	r3, r3, #16
 800041c:	f003 030f 	and.w	r3, r3, #15
 8000420:	60bb      	str	r3, [r7, #8]
  tmp = GPIO_Remap & LSB_MASK;
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	b29b      	uxth	r3, r3
 8000426:	613b      	str	r3, [r7, #16]

  if ((GPIO_Remap & (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK)) == (DBGAFR_LOCATION_MASK | DBGAFR_NUMBITS_MASK))
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800042e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000432:	d10a      	bne.n	800044a <GPIO_PinRemapConfig+0x62>
  {
    tmpreg &= DBGAFR_SWJCFG_MASK;
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800043a:	617b      	str	r3, [r7, #20]
    AFIO->MAPR &= DBGAFR_SWJCFG_MASK;
 800043c:	4a21      	ldr	r2, [pc, #132]	; (80004c4 <GPIO_PinRemapConfig+0xdc>)
 800043e:	4b21      	ldr	r3, [pc, #132]	; (80004c4 <GPIO_PinRemapConfig+0xdc>)
 8000440:	685b      	ldr	r3, [r3, #4]
 8000442:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000446:	6053      	str	r3, [r2, #4]
 8000448:	e021      	b.n	800048e <GPIO_PinRemapConfig+0xa6>
  }
  else if ((GPIO_Remap & DBGAFR_NUMBITS_MASK) == DBGAFR_NUMBITS_MASK)
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000450:	2b00      	cmp	r3, #0
 8000452:	d00e      	beq.n	8000472 <GPIO_PinRemapConfig+0x8a>
  {
    tmp1 = ((uint32_t)0x03) << tmpmask;
 8000454:	2203      	movs	r2, #3
 8000456:	68bb      	ldr	r3, [r7, #8]
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	60fb      	str	r3, [r7, #12]
    tmpreg &= ~tmp1;
 800045e:	68fb      	ldr	r3, [r7, #12]
 8000460:	43db      	mvns	r3, r3
 8000462:	697a      	ldr	r2, [r7, #20]
 8000464:	4013      	ands	r3, r2
 8000466:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000468:	697b      	ldr	r3, [r7, #20]
 800046a:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	e00d      	b.n	800048e <GPIO_PinRemapConfig+0xa6>
  }
  else
  {
    tmpreg &= ~(tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	0d5b      	lsrs	r3, r3, #21
 8000476:	011b      	lsls	r3, r3, #4
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	fa02 f303 	lsl.w	r3, r2, r3
 800047e:	43db      	mvns	r3, r3
 8000480:	697a      	ldr	r2, [r7, #20]
 8000482:	4013      	ands	r3, r2
 8000484:	617b      	str	r3, [r7, #20]
    tmpreg |= ~DBGAFR_SWJCFG_MASK;
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800048c:	617b      	str	r3, [r7, #20]
  }

  if (NewState != DISABLE)
 800048e:	78fb      	ldrb	r3, [r7, #3]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d008      	beq.n	80004a6 <GPIO_PinRemapConfig+0xbe>
  {
    tmpreg |= (tmp << ((GPIO_Remap >> 0x15)*0x10));
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	0d5b      	lsrs	r3, r3, #21
 8000498:	011b      	lsls	r3, r3, #4
 800049a:	693a      	ldr	r2, [r7, #16]
 800049c:	fa02 f303 	lsl.w	r3, r2, r3
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	4313      	orrs	r3, r2
 80004a4:	617b      	str	r3, [r7, #20]
  }

  if((GPIO_Remap & 0x80000000) == 0x80000000)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	da03      	bge.n	80004b4 <GPIO_PinRemapConfig+0xcc>
  {
    AFIO->MAPR2 = tmpreg;
 80004ac:	4a05      	ldr	r2, [pc, #20]	; (80004c4 <GPIO_PinRemapConfig+0xdc>)
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	61d3      	str	r3, [r2, #28]
  }
  else
  {
    AFIO->MAPR = tmpreg;
  }  
}
 80004b2:	e002      	b.n	80004ba <GPIO_PinRemapConfig+0xd2>
    AFIO->MAPR = tmpreg;
 80004b4:	4a03      	ldr	r2, [pc, #12]	; (80004c4 <GPIO_PinRemapConfig+0xdc>)
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	6053      	str	r3, [r2, #4]
}
 80004ba:	bf00      	nop
 80004bc:	371c      	adds	r7, #28
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr
 80004c4:	40010000 	.word	0x40010000

080004c8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004d4:	78fb      	ldrb	r3, [r7, #3]
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d006      	beq.n	80004e8 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80004da:	4909      	ldr	r1, [pc, #36]	; (8000500 <RCC_APB2PeriphClockCmd+0x38>)
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <RCC_APB2PeriphClockCmd+0x38>)
 80004de:	699a      	ldr	r2, [r3, #24]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4313      	orrs	r3, r2
 80004e4:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80004e6:	e006      	b.n	80004f6 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80004e8:	4905      	ldr	r1, [pc, #20]	; (8000500 <RCC_APB2PeriphClockCmd+0x38>)
 80004ea:	4b05      	ldr	r3, [pc, #20]	; (8000500 <RCC_APB2PeriphClockCmd+0x38>)
 80004ec:	699a      	ldr	r2, [r3, #24]
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	43db      	mvns	r3, r3
 80004f2:	4013      	ands	r3, r2
 80004f4:	618b      	str	r3, [r1, #24]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000

08000504 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	460b      	mov	r3, r1
 800050e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	2b00      	cmp	r3, #0
 8000514:	d006      	beq.n	8000524 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000516:	4909      	ldr	r1, [pc, #36]	; (800053c <RCC_APB1PeriphClockCmd+0x38>)
 8000518:	4b08      	ldr	r3, [pc, #32]	; (800053c <RCC_APB1PeriphClockCmd+0x38>)
 800051a:	69da      	ldr	r2, [r3, #28]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	4313      	orrs	r3, r2
 8000520:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 8000522:	e006      	b.n	8000532 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000524:	4905      	ldr	r1, [pc, #20]	; (800053c <RCC_APB1PeriphClockCmd+0x38>)
 8000526:	4b05      	ldr	r3, [pc, #20]	; (800053c <RCC_APB1PeriphClockCmd+0x38>)
 8000528:	69da      	ldr	r2, [r3, #28]
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	43db      	mvns	r3, r3
 800052e:	4013      	ands	r3, r2
 8000530:	61cb      	str	r3, [r1, #28]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr
 800053c:	40021000 	.word	0x40021000

08000540 <TIM_ICInit>:
  * @param  TIM_ICInitStruct: pointer to a TIM_ICInitTypeDef structure
  *         that contains the configuration information for the specified TIM peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  }
  else
  {
    assert_param(IS_TIM_IC_POLARITY_LITE(TIM_ICInitStruct->TIM_ICPolarity));
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d10f      	bne.n	8000572 <TIM_ICInit+0x32>
  {
    assert_param(IS_TIM_LIST8_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000552:	683b      	ldr	r3, [r7, #0]
 8000554:	8859      	ldrh	r1, [r3, #2]
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	889a      	ldrh	r2, [r3, #4]
 800055a:	683b      	ldr	r3, [r7, #0]
 800055c:	891b      	ldrh	r3, [r3, #8]
 800055e:	6878      	ldr	r0, [r7, #4]
 8000560:	f000 f8e6 	bl	8000730 <TI1_Config>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	88db      	ldrh	r3, [r3, #6]
 8000568:	4619      	mov	r1, r3
 800056a:	6878      	ldr	r0, [r7, #4]
 800056c:	f000 f85f 	bl	800062e <TIM_SetIC1Prescaler>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000570:	e036      	b.n	80005e0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	881b      	ldrh	r3, [r3, #0]
 8000576:	2b04      	cmp	r3, #4
 8000578:	d10f      	bne.n	800059a <TIM_ICInit+0x5a>
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	8859      	ldrh	r1, [r3, #2]
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	889a      	ldrh	r2, [r3, #4]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	891b      	ldrh	r3, [r3, #8]
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f000 f942 	bl	8000810 <TI2_Config>
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	88db      	ldrh	r3, [r3, #6]
 8000590:	4619      	mov	r1, r3
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f000 f866 	bl	8000664 <TIM_SetIC2Prescaler>
}
 8000598:	e022      	b.n	80005e0 <TIM_ICInit+0xa0>
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	881b      	ldrh	r3, [r3, #0]
 800059e:	2b08      	cmp	r3, #8
 80005a0:	d10f      	bne.n	80005c2 <TIM_ICInit+0x82>
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	8859      	ldrh	r1, [r3, #2]
 80005a6:	683b      	ldr	r3, [r7, #0]
 80005a8:	889a      	ldrh	r2, [r3, #4]
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	891b      	ldrh	r3, [r3, #8]
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f9a8 	bl	8000904 <TI3_Config>
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	88db      	ldrh	r3, [r3, #6]
 80005b8:	4619      	mov	r1, r3
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f000 f86f 	bl	800069e <TIM_SetIC3Prescaler>
}
 80005c0:	e00e      	b.n	80005e0 <TIM_ICInit+0xa0>
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 80005c2:	683b      	ldr	r3, [r7, #0]
 80005c4:	8859      	ldrh	r1, [r3, #2]
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	889a      	ldrh	r2, [r3, #4]
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	891b      	ldrh	r3, [r3, #8]
 80005ce:	6878      	ldr	r0, [r7, #4]
 80005d0:	f000 fa0e 	bl	80009f0 <TI4_Config>
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	88db      	ldrh	r3, [r3, #6]
 80005d8:	4619      	mov	r1, r3
 80005da:	6878      	ldr	r0, [r7, #4]
 80005dc:	f000 f87a 	bl	80006d4 <TIM_SetIC4Prescaler>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	807b      	strh	r3, [r7, #2]
 80005f4:	4613      	mov	r3, r2
 80005f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80005f8:	787b      	ldrb	r3, [r7, #1]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d008      	beq.n	8000610 <TIM_ITConfig+0x28>
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	899b      	ldrh	r3, [r3, #12]
 8000602:	b29a      	uxth	r2, r3
 8000604:	887b      	ldrh	r3, [r7, #2]
 8000606:	4313      	orrs	r3, r2
 8000608:	b29a      	uxth	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
  }
}
 800060e:	e009      	b.n	8000624 <TIM_ITConfig+0x3c>
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	899b      	ldrh	r3, [r3, #12]
 8000614:	b29a      	uxth	r2, r3
 8000616:	887b      	ldrh	r3, [r7, #2]
 8000618:	43db      	mvns	r3, r3
 800061a:	b29b      	uxth	r3, r3
 800061c:	4013      	ands	r3, r2
 800061e:	b29a      	uxth	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	819a      	strh	r2, [r3, #12]
}
 8000624:	bf00      	nop
 8000626:	370c      	adds	r7, #12
 8000628:	46bd      	mov	sp, r7
 800062a:	bc80      	pop	{r7}
 800062c:	4770      	bx	lr

0800062e <TIM_SetIC1Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC1Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	460b      	mov	r3, r1
 8000638:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST8_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	8b1b      	ldrh	r3, [r3, #24]
 800063e:	b29b      	uxth	r3, r3
 8000640:	f023 030c 	bic.w	r3, r3, #12
 8000644:	b29a      	uxth	r2, r3
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	831a      	strh	r2, [r3, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	8b1b      	ldrh	r3, [r3, #24]
 800064e:	b29a      	uxth	r2, r3
 8000650:	887b      	ldrh	r3, [r7, #2]
 8000652:	4313      	orrs	r3, r2
 8000654:	b29a      	uxth	r2, r3
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	831a      	strh	r2, [r3, #24]
}
 800065a:	bf00      	nop
 800065c:	370c      	adds	r7, #12
 800065e:	46bd      	mov	sp, r7
 8000660:	bc80      	pop	{r7}
 8000662:	4770      	bx	lr

08000664 <TIM_SetIC2Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC2Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	8b1b      	ldrh	r3, [r3, #24]
 8000674:	b29b      	uxth	r3, r3
 8000676:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800067a:	b29a      	uxth	r2, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	831a      	strh	r2, [r3, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	8b1b      	ldrh	r3, [r3, #24]
 8000684:	b29a      	uxth	r2, r3
 8000686:	887b      	ldrh	r3, [r7, #2]
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	b29b      	uxth	r3, r3
 800068c:	4313      	orrs	r3, r2
 800068e:	b29a      	uxth	r2, r3
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	831a      	strh	r2, [r3, #24]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	bc80      	pop	{r7}
 800069c:	4770      	bx	lr

0800069e <TIM_SetIC3Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC3Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{
 800069e:	b480      	push	{r7}
 80006a0:	b083      	sub	sp, #12
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	460b      	mov	r3, r1
 80006a8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8b9b      	ldrh	r3, [r3, #28]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	f023 030c 	bic.w	r3, r3, #12
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	839a      	strh	r2, [r3, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	8b9b      	ldrh	r3, [r3, #28]
 80006be:	b29a      	uxth	r2, r3
 80006c0:	887b      	ldrh	r3, [r7, #2]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	839a      	strh	r2, [r3, #28]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <TIM_SetIC4Prescaler>:
  *     @arg TIM_ICPSC_DIV4: capture is done once every 4 events
  *     @arg TIM_ICPSC_DIV8: capture is done once every 8 events
  * @retval None
  */
void TIM_SetIC4Prescaler(TIM_TypeDef* TIMx, uint16_t TIM_ICPSC)
{  
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
 80006dc:	460b      	mov	r3, r1
 80006de:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	8b9b      	ldrh	r3, [r3, #28]
 80006e4:	b29b      	uxth	r3, r3
 80006e6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	839a      	strh	r2, [r3, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	8b9b      	ldrh	r3, [r3, #28]
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	887b      	ldrh	r3, [r7, #2]
 80006f8:	021b      	lsls	r3, r3, #8
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	4313      	orrs	r3, r2
 80006fe:	b29a      	uxth	r2, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	839a      	strh	r2, [r3, #28]
}
 8000704:	bf00      	nop
 8000706:	370c      	adds	r7, #12
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <TIM_ClearITPendingBit>:
  *   - TIM_IT_Break is used only with TIM1, TIM8 and TIM15. 
  *   - TIM_IT_COM is used only with TIM1, TIM8, TIM15, TIM16 and TIM17.    
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 800070e:	b480      	push	{r7}
 8000710:	b083      	sub	sp, #12
 8000712:	af00      	add	r7, sp, #0
 8000714:	6078      	str	r0, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 800071a:	887b      	ldrh	r3, [r7, #2]
 800071c:	43db      	mvns	r3, r3
 800071e:	b29a      	uxth	r2, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	821a      	strh	r2, [r3, #16]
}
 8000724:	bf00      	nop
 8000726:	370c      	adds	r7, #12
 8000728:	46bd      	mov	sp, r7
 800072a:	bc80      	pop	{r7}
 800072c:	4770      	bx	lr
	...

08000730 <TI1_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000730:	b480      	push	{r7}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	4608      	mov	r0, r1
 800073a:	4611      	mov	r1, r2
 800073c:	461a      	mov	r2, r3
 800073e:	4603      	mov	r3, r0
 8000740:	817b      	strh	r3, [r7, #10]
 8000742:	460b      	mov	r3, r1
 8000744:	813b      	strh	r3, [r7, #8]
 8000746:	4613      	mov	r3, r2
 8000748:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	82bb      	strh	r3, [r7, #20]
 800074e:	2300      	movs	r3, #0
 8000750:	82fb      	strh	r3, [r7, #22]
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	8c1b      	ldrh	r3, [r3, #32]
 8000756:	b29b      	uxth	r3, r3
 8000758:	f023 0301 	bic.w	r3, r3, #1
 800075c:	b29a      	uxth	r2, r3
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	8b1b      	ldrh	r3, [r3, #24]
 8000766:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	8c1b      	ldrh	r3, [r3, #32]
 800076c:	82fb      	strh	r3, [r7, #22]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800076e:	8abb      	ldrh	r3, [r7, #20]
 8000770:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000774:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	011b      	lsls	r3, r3, #4
 800077a:	b29a      	uxth	r2, r3
 800077c:	893b      	ldrh	r3, [r7, #8]
 800077e:	4313      	orrs	r3, r2
 8000780:	b29a      	uxth	r2, r3
 8000782:	8abb      	ldrh	r3, [r7, #20]
 8000784:	4313      	orrs	r3, r2
 8000786:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4a1c      	ldr	r2, [pc, #112]	; (80007fc <TI1_Config+0xcc>)
 800078c:	4293      	cmp	r3, r2
 800078e:	d013      	beq.n	80007b8 <TI1_Config+0x88>
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	4a1b      	ldr	r2, [pc, #108]	; (8000800 <TI1_Config+0xd0>)
 8000794:	4293      	cmp	r3, r2
 8000796:	d00f      	beq.n	80007b8 <TI1_Config+0x88>
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079e:	d00b      	beq.n	80007b8 <TI1_Config+0x88>
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <TI1_Config+0xd4>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d007      	beq.n	80007b8 <TI1_Config+0x88>
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <TI1_Config+0xd8>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d003      	beq.n	80007b8 <TI1_Config+0x88>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <TI1_Config+0xdc>)
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d10b      	bne.n	80007d0 <TI1_Config+0xa0>
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P));
 80007b8:	8afb      	ldrh	r3, [r7, #22]
 80007ba:	f023 0302 	bic.w	r3, r3, #2
 80007be:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80007c0:	897a      	ldrh	r2, [r7, #10]
 80007c2:	8afb      	ldrh	r3, [r7, #22]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	82fb      	strh	r3, [r7, #22]
 80007ce:	e00a      	b.n	80007e6 <TI1_Config+0xb6>
  }
  else
  {
    /* Select the Polarity and set the CC1E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80007d0:	8afb      	ldrh	r3, [r7, #22]
 80007d2:	f023 030a 	bic.w	r3, r3, #10
 80007d6:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80007d8:	897a      	ldrh	r2, [r7, #10]
 80007da:	8afb      	ldrh	r3, [r7, #22]
 80007dc:	4313      	orrs	r3, r2
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	82fb      	strh	r3, [r7, #22]
  }

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	8aba      	ldrh	r2, [r7, #20]
 80007ea:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	8afa      	ldrh	r2, [r7, #22]
 80007f0:	841a      	strh	r2, [r3, #32]
}
 80007f2:	bf00      	nop
 80007f4:	371c      	adds	r7, #28
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bc80      	pop	{r7}
 80007fa:	4770      	bx	lr
 80007fc:	40012c00 	.word	0x40012c00
 8000800:	40013400 	.word	0x40013400
 8000804:	40000400 	.word	0x40000400
 8000808:	40000800 	.word	0x40000800
 800080c:	40000c00 	.word	0x40000c00

08000810 <TI2_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	4608      	mov	r0, r1
 800081a:	4611      	mov	r1, r2
 800081c:	461a      	mov	r2, r3
 800081e:	4603      	mov	r3, r0
 8000820:	817b      	strh	r3, [r7, #10]
 8000822:	460b      	mov	r3, r1
 8000824:	813b      	strh	r3, [r7, #8]
 8000826:	4613      	mov	r3, r2
 8000828:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
 800082a:	2300      	movs	r3, #0
 800082c:	82bb      	strh	r3, [r7, #20]
 800082e:	2300      	movs	r3, #0
 8000830:	82fb      	strh	r3, [r7, #22]
 8000832:	2300      	movs	r3, #0
 8000834:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	8c1b      	ldrh	r3, [r3, #32]
 800083a:	b29b      	uxth	r3, r3
 800083c:	f023 0310 	bic.w	r3, r3, #16
 8000840:	b29a      	uxth	r2, r3
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	841a      	strh	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	8b1b      	ldrh	r3, [r3, #24]
 800084a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	8c1b      	ldrh	r3, [r3, #32]
 8000850:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8000852:	897b      	ldrh	r3, [r7, #10]
 8000854:	011b      	lsls	r3, r3, #4
 8000856:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8000858:	8abb      	ldrh	r3, [r7, #20]
 800085a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800085e:	051b      	lsls	r3, r3, #20
 8000860:	0d1b      	lsrs	r3, r3, #20
 8000862:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8000864:	88fb      	ldrh	r3, [r7, #6]
 8000866:	031b      	lsls	r3, r3, #12
 8000868:	b29a      	uxth	r2, r3
 800086a:	8abb      	ldrh	r3, [r7, #20]
 800086c:	4313      	orrs	r3, r2
 800086e:	82bb      	strh	r3, [r7, #20]
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8);
 8000870:	893b      	ldrh	r3, [r7, #8]
 8000872:	021b      	lsls	r3, r3, #8
 8000874:	b29a      	uxth	r2, r3
 8000876:	8abb      	ldrh	r3, [r7, #20]
 8000878:	4313      	orrs	r3, r2
 800087a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <TI2_Config+0xe0>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d013      	beq.n	80008ac <TI2_Config+0x9c>
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	4a1b      	ldr	r2, [pc, #108]	; (80008f4 <TI2_Config+0xe4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d00f      	beq.n	80008ac <TI2_Config+0x9c>
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000892:	d00b      	beq.n	80008ac <TI2_Config+0x9c>
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	4a18      	ldr	r2, [pc, #96]	; (80008f8 <TI2_Config+0xe8>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d007      	beq.n	80008ac <TI2_Config+0x9c>
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	4a17      	ldr	r2, [pc, #92]	; (80008fc <TI2_Config+0xec>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d003      	beq.n	80008ac <TI2_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4a16      	ldr	r2, [pc, #88]	; (8000900 <TI2_Config+0xf0>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d10b      	bne.n	80008c4 <TI2_Config+0xb4>
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P));
 80008ac:	8afb      	ldrh	r3, [r7, #22]
 80008ae:	f023 0320 	bic.w	r3, r3, #32
 80008b2:	82fb      	strh	r3, [r7, #22]
    tmpccer |=  (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);
 80008b4:	8a7a      	ldrh	r2, [r7, #18]
 80008b6:	8afb      	ldrh	r3, [r7, #22]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f043 0310 	orr.w	r3, r3, #16
 80008c0:	82fb      	strh	r3, [r7, #22]
 80008c2:	e00a      	b.n	80008da <TI2_Config+0xca>
  }
  else
  {
    /* Select the Polarity and set the CC2E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80008c4:	8afb      	ldrh	r3, [r7, #22]
 80008c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80008ca:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC2E);
 80008cc:	897a      	ldrh	r2, [r7, #10]
 80008ce:	8afb      	ldrh	r3, [r7, #22]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	f043 0310 	orr.w	r3, r3, #16
 80008d8:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	8aba      	ldrh	r2, [r7, #20]
 80008de:	831a      	strh	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	8afa      	ldrh	r2, [r7, #22]
 80008e4:	841a      	strh	r2, [r3, #32]
}
 80008e6:	bf00      	nop
 80008e8:	371c      	adds	r7, #28
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bc80      	pop	{r7}
 80008ee:	4770      	bx	lr
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40013400 	.word	0x40013400
 80008f8:	40000400 	.word	0x40000400
 80008fc:	40000800 	.word	0x40000800
 8000900:	40000c00 	.word	0x40000c00

08000904 <TI3_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	4608      	mov	r0, r1
 800090e:	4611      	mov	r1, r2
 8000910:	461a      	mov	r2, r3
 8000912:	4603      	mov	r3, r0
 8000914:	817b      	strh	r3, [r7, #10]
 8000916:	460b      	mov	r3, r1
 8000918:	813b      	strh	r3, [r7, #8]
 800091a:	4613      	mov	r3, r2
 800091c:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	82bb      	strh	r3, [r7, #20]
 8000922:	2300      	movs	r3, #0
 8000924:	82fb      	strh	r3, [r7, #22]
 8000926:	2300      	movs	r3, #0
 8000928:	827b      	strh	r3, [r7, #18]
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	8c1b      	ldrh	r3, [r3, #32]
 800092e:	b29b      	uxth	r3, r3
 8000930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000934:	b29a      	uxth	r2, r3
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	8b9b      	ldrh	r3, [r3, #28]
 800093e:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	8c1b      	ldrh	r3, [r3, #32]
 8000944:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 8000946:	897b      	ldrh	r3, [r7, #10]
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800094c:	8abb      	ldrh	r3, [r7, #20]
 800094e:	f023 03f3 	bic.w	r3, r3, #243	; 0xf3
 8000952:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000954:	88fb      	ldrh	r3, [r7, #6]
 8000956:	011b      	lsls	r3, r3, #4
 8000958:	b29a      	uxth	r2, r3
 800095a:	893b      	ldrh	r3, [r7, #8]
 800095c:	4313      	orrs	r3, r2
 800095e:	b29a      	uxth	r2, r3
 8000960:	8abb      	ldrh	r3, [r7, #20]
 8000962:	4313      	orrs	r3, r2
 8000964:	82bb      	strh	r3, [r7, #20]
    
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <TI3_Config+0xd8>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d013      	beq.n	8000996 <TI3_Config+0x92>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <TI3_Config+0xdc>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d00f      	beq.n	8000996 <TI3_Config+0x92>
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800097c:	d00b      	beq.n	8000996 <TI3_Config+0x92>
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	4a18      	ldr	r2, [pc, #96]	; (80009e4 <TI3_Config+0xe0>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d007      	beq.n	8000996 <TI3_Config+0x92>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <TI3_Config+0xe4>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d003      	beq.n	8000996 <TI3_Config+0x92>
     (TIMx == TIM4) ||(TIMx == TIM5))
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4a16      	ldr	r2, [pc, #88]	; (80009ec <TI3_Config+0xe8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d10b      	bne.n	80009ae <TI3_Config+0xaa>
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P));
 8000996:	8afb      	ldrh	r3, [r7, #22]
 8000998:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800099c:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);
 800099e:	8a7a      	ldrh	r2, [r7, #18]
 80009a0:	8afb      	ldrh	r3, [r7, #22]
 80009a2:	4313      	orrs	r3, r2
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009aa:	82fb      	strh	r3, [r7, #22]
 80009ac:	e00a      	b.n	80009c4 <TI3_Config+0xc0>
  }
  else
  {
    /* Select the Polarity and set the CC3E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80009ae:	8afb      	ldrh	r3, [r7, #22]
 80009b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80009b4:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC3E);
 80009b6:	897a      	ldrh	r2, [r7, #10]
 80009b8:	8afb      	ldrh	r3, [r7, #22]
 80009ba:	4313      	orrs	r3, r2
 80009bc:	b29b      	uxth	r3, r3
 80009be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009c2:	82fb      	strh	r3, [r7, #22]
  }
  
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	8aba      	ldrh	r2, [r7, #20]
 80009c8:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	8afa      	ldrh	r2, [r7, #22]
 80009ce:	841a      	strh	r2, [r3, #32]
}
 80009d0:	bf00      	nop
 80009d2:	371c      	adds	r7, #28
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bc80      	pop	{r7}
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40012c00 	.word	0x40012c00
 80009e0:	40013400 	.word	0x40013400
 80009e4:	40000400 	.word	0x40000400
 80009e8:	40000800 	.word	0x40000800
 80009ec:	40000c00 	.word	0x40000c00

080009f0 <TI4_Config>:
  *   This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TI4_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
 80009f0:	b480      	push	{r7}
 80009f2:	b087      	sub	sp, #28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	4608      	mov	r0, r1
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	4603      	mov	r3, r0
 8000a00:	817b      	strh	r3, [r7, #10]
 8000a02:	460b      	mov	r3, r1
 8000a04:	813b      	strh	r3, [r7, #8]
 8000a06:	4613      	mov	r3, r2
 8000a08:	80fb      	strh	r3, [r7, #6]
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	82bb      	strh	r3, [r7, #20]
 8000a0e:	2300      	movs	r3, #0
 8000a10:	82fb      	strh	r3, [r7, #22]
 8000a12:	2300      	movs	r3, #0
 8000a14:	827b      	strh	r3, [r7, #18]

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	8c1b      	ldrh	r3, [r3, #32]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	841a      	strh	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	8b9b      	ldrh	r3, [r3, #28]
 8000a2a:	82bb      	strh	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	8c1b      	ldrh	r3, [r3, #32]
 8000a30:	82fb      	strh	r3, [r7, #22]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000a32:	897b      	ldrh	r3, [r7, #10]
 8000a34:	031b      	lsls	r3, r3, #12
 8000a36:	827b      	strh	r3, [r7, #18]
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000a38:	8abb      	ldrh	r3, [r7, #20]
 8000a3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000a3e:	051b      	lsls	r3, r3, #20
 8000a40:	0d1b      	lsrs	r3, r3, #20
 8000a42:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000a44:	893b      	ldrh	r3, [r7, #8]
 8000a46:	021b      	lsls	r3, r3, #8
 8000a48:	b29a      	uxth	r2, r3
 8000a4a:	8abb      	ldrh	r3, [r7, #20]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	82bb      	strh	r3, [r7, #20]
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);
 8000a50:	88fb      	ldrh	r3, [r7, #6]
 8000a52:	031b      	lsls	r3, r3, #12
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	8abb      	ldrh	r3, [r7, #20]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	82bb      	strh	r3, [r7, #20]
  
  if((TIMx == TIM1) || (TIMx == TIM8) || (TIMx == TIM2) || (TIMx == TIM3) ||
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	4a1d      	ldr	r2, [pc, #116]	; (8000ad4 <TI4_Config+0xe4>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d013      	beq.n	8000a8c <TI4_Config+0x9c>
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <TI4_Config+0xe8>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d00f      	beq.n	8000a8c <TI4_Config+0x9c>
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000a72:	d00b      	beq.n	8000a8c <TI4_Config+0x9c>
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <TI4_Config+0xec>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d007      	beq.n	8000a8c <TI4_Config+0x9c>
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	4a18      	ldr	r2, [pc, #96]	; (8000ae0 <TI4_Config+0xf0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d003      	beq.n	8000a8c <TI4_Config+0x9c>
     (TIMx == TIM4) ||(TIMx == TIM5))
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4a17      	ldr	r2, [pc, #92]	; (8000ae4 <TI4_Config+0xf4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d10b      	bne.n	8000aa4 <TI4_Config+0xb4>
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P));
 8000a8c:	8afb      	ldrh	r3, [r7, #22]
 8000a8e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000a92:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000a94:	8a7a      	ldrh	r2, [r7, #18]
 8000a96:	8afb      	ldrh	r3, [r7, #22]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000aa0:	82fb      	strh	r3, [r7, #22]
 8000aa2:	e00c      	b.n	8000abe <TI4_Config+0xce>
  }
  else
  {
    /* Select the Polarity and set the CC4E Bit */
    tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC4NP));
 8000aa4:	8afb      	ldrh	r3, [r7, #22]
 8000aa6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000aaa:	045b      	lsls	r3, r3, #17
 8000aac:	0c5b      	lsrs	r3, r3, #17
 8000aae:	82fb      	strh	r3, [r7, #22]
    tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC4E);
 8000ab0:	897a      	ldrh	r2, [r7, #10]
 8000ab2:	8afb      	ldrh	r3, [r7, #22]
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000abc:	82fb      	strh	r3, [r7, #22]
  }
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	8aba      	ldrh	r2, [r7, #20]
 8000ac2:	839a      	strh	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	8afa      	ldrh	r2, [r7, #22]
 8000ac8:	841a      	strh	r2, [r3, #32]
}
 8000aca:	bf00      	nop
 8000acc:	371c      	adds	r7, #28
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr
 8000ad4:	40012c00 	.word	0x40012c00
 8000ad8:	40013400 	.word	0x40013400
 8000adc:	40000400 	.word	0x40000400
 8000ae0:	40000800 	.word	0x40000800
 8000ae4:	40000c00 	.word	0x40000c00

08000ae8 <Conf_GPIO>:
#include "conf_gpio.h"

void Conf_GPIO(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8000aee:	2101      	movs	r1, #1
 8000af0:	2010      	movs	r0, #16
 8000af2:	f7ff fce9 	bl	80004c8 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef gpio_structC;
  gpio_structC.GPIO_Mode = GPIO_Mode_Out_PP;
 8000af6:	2310      	movs	r3, #16
 8000af8:	71fb      	strb	r3, [r7, #7]
  gpio_structC.GPIO_Pin = GPIO_Pin_13;
 8000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afe:	80bb      	strh	r3, [r7, #4]
  gpio_structC.GPIO_Speed = GPIO_Speed_2MHz;
 8000b00:	2302      	movs	r3, #2
 8000b02:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOC, &gpio_structC);
 8000b04:	1d3b      	adds	r3, r7, #4
 8000b06:	4619      	mov	r1, r3
 8000b08:	4803      	ldr	r0, [pc, #12]	; (8000b18 <Conf_GPIO+0x30>)
 8000b0a:	f7ff fb81 	bl	8000210 <GPIO_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40011000 	.word	0x40011000

08000b1c <Conf_GPIO_Remap>:

void Conf_GPIO_Remap(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
  RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 8000b22:	2101      	movs	r1, #1
 8000b24:	2009      	movs	r0, #9
 8000b26:	f7ff fccf 	bl	80004c8 <RCC_APB2PeriphClockCmd>

  GPIO_InitTypeDef gpio_structB;
  gpio_structB.GPIO_Mode = GPIO_Mode_IPD;
 8000b2a:	2328      	movs	r3, #40	; 0x28
 8000b2c:	71fb      	strb	r3, [r7, #7]
  gpio_structB.GPIO_Pin = GPIO_Pin_10;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	80bb      	strh	r3, [r7, #4]
  gpio_structB.GPIO_Speed = GPIO_Speed_2MHz;
 8000b34:	2302      	movs	r3, #2
 8000b36:	71bb      	strb	r3, [r7, #6]
  GPIO_Init(GPIOB, &gpio_structB);
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <Conf_GPIO_Remap+0x38>)
 8000b3e:	f7ff fb67 	bl	8000210 <GPIO_Init>

  GPIO_PinRemapConfig(GPIO_FullRemap_TIM2, ENABLE);
 8000b42:	2101      	movs	r1, #1
 8000b44:	4804      	ldr	r0, [pc, #16]	; (8000b58 <Conf_GPIO_Remap+0x3c>)
 8000b46:	f7ff fc4f 	bl	80003e8 <GPIO_PinRemapConfig>
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	00180300 	.word	0x00180300

08000b5c <main>:
void Conf_TIM2(void);
void Conf_TIM2_IC(void);
void Conf_NVIC(void);

int main(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0

  Conf_GPIO();
 8000b60:	f7ff ffc2 	bl	8000ae8 <Conf_GPIO>
  Conf_GPIO_Remap();
 8000b64:	f7ff ffda 	bl	8000b1c <Conf_GPIO_Remap>
  Conf_TIM2();
 8000b68:	f000 f805 	bl	8000b76 <Conf_TIM2>
  Conf_TIM2_IC();
 8000b6c:	f000 f80b 	bl	8000b86 <Conf_TIM2_IC>
  Conf_NVIC();
 8000b70:	f000 f826 	bl	8000bc0 <Conf_NVIC>

  while(1)
 8000b74:	e7fe      	b.n	8000b74 <main+0x18>

08000b76 <Conf_TIM2>:

  return 0;
}

void Conf_TIM2(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000b7a:	2101      	movs	r1, #1
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fcc1 	bl	8000504 <RCC_APB1PeriphClockCmd>
//  tim_struct.TIM_ClockDivision = 0;
//  tim_struct.TIM_RepetitionCounter = 0;
//  TIM_TimeBaseInit(TIM2, &tim_struct);

  //TIM_Cmd(TIM2, ENABLE);
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <Conf_TIM2_IC>:

void Conf_TIM2_IC(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b084      	sub	sp, #16
 8000b8a:	af00      	add	r7, sp, #0
  TIM_ICInitTypeDef ic_struct;
  ic_struct.TIM_Channel = TIM_Channel_3;
 8000b8c:	2308      	movs	r3, #8
 8000b8e:	80bb      	strh	r3, [r7, #4]
  ic_struct.TIM_ICPrescaler = TIM_ICPSC_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	817b      	strh	r3, [r7, #10]
  ic_struct.TIM_ICPolarity = TIM_ICPolarity_Rising;
 8000b94:	2300      	movs	r3, #0
 8000b96:	80fb      	strh	r3, [r7, #6]
  ic_struct.TIM_ICFilter = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	81bb      	strh	r3, [r7, #12]
  ic_struct.TIM_ICSelection = TIM_ICSelection_DirectTI;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	813b      	strh	r3, [r7, #8]
  TIM_ICInit(TIM2, &ic_struct);
 8000ba0:	1d3b      	adds	r3, r7, #4
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ba8:	f7ff fcca 	bl	8000540 <TIM_ICInit>

  TIM_ITConfig(TIM2, TIM_IT_CC3, ENABLE);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2108      	movs	r1, #8
 8000bb0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000bb4:	f7ff fd18 	bl	80005e8 <TIM_ITConfig>
}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <Conf_NVIC>:

void Conf_NVIC(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  NVIC_InitTypeDef nvic_struct;
  nvic_struct.NVIC_IRQChannel = TIM2_IRQn;
 8000bc6:	231c      	movs	r3, #28
 8000bc8:	713b      	strb	r3, [r7, #4]
  nvic_struct.NVIC_IRQChannelCmd = ENABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	71fb      	strb	r3, [r7, #7]
  nvic_struct.NVIC_IRQChannelPreemptionPriority = 1;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	717b      	strb	r3, [r7, #5]
  nvic_struct.NVIC_IRQChannelSubPriority = 0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	71bb      	strb	r3, [r7, #6]
  NVIC_Init(&nvic_struct);
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f7ff fab7 	bl	800014c <NVIC_Init>
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c20 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000bec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000bee:	e003      	b.n	8000bf8 <LoopCopyDataInit>

08000bf0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	; (8000c24 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000bf2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000bf4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000bf6:	3104      	adds	r1, #4

08000bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000bf8:	480b      	ldr	r0, [pc, #44]	; (8000c28 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000bfa:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000bfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000bfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000c00:	d3f6      	bcc.n	8000bf0 <CopyDataInit>
	ldr	r2, =_sbss
 8000c02:	4a0b      	ldr	r2, [pc, #44]	; (8000c30 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000c04:	e002      	b.n	8000c0c <LoopFillZerobss>

08000c06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000c06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000c08:	f842 3b04 	str.w	r3, [r2], #4

08000c0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000c0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000c10:	d3f9      	bcc.n	8000c06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c12:	f000 f82d 	bl	8000c70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f000 f8e5 	bl	8000de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c1a:	f7ff ff9f 	bl	8000b5c <main>
	bx	lr
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c20:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000c24:	08000e4c 	.word	0x08000e4c
	ldr	r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000c2c:	20000000 	.word	0x20000000
	ldr	r2, =_sbss
 8000c30:	20000000 	.word	0x20000000
	ldr	r3, = _ebss
 8000c34:	2000001c 	.word	0x2000001c

08000c38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC1_2_IRQHandler>
	...

08000c3c <TIM2_IRQHandler>:
#include "stm32f1xx_it.h"

void TIM2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  GPIO_WriteBit(GPIOC, GPIO_Pin_13,
  GPIO_ReadOutputDataBit(GPIOC, GPIO_Pin_13)^1);
 8000c40:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <TIM2_IRQHandler+0x30>)
 8000c46:	f7ff fb9f 	bl	8000388 <GPIO_ReadOutputDataBit>
 8000c4a:	4603      	mov	r3, r0
  GPIO_WriteBit(GPIOC, GPIO_Pin_13,
 8000c4c:	f083 0301 	eor.w	r3, r3, #1
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	461a      	mov	r2, r3
 8000c54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <TIM2_IRQHandler+0x30>)
 8000c5a:	f7ff fbae 	bl	80003ba <GPIO_WriteBit>

  TIM_ClearITPendingBit(TIM2, TIM_IT_CC3);
 8000c5e:	2108      	movs	r1, #8
 8000c60:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c64:	f7ff fd53 	bl	800070e <TIM_ClearITPendingBit>
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40011000 	.word	0x40011000

08000c70 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c74:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <SystemInit+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <SystemInit+0x5c>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f043 0301 	orr.w	r3, r3, #1
 8000c7e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000c80:	4912      	ldr	r1, [pc, #72]	; (8000ccc <SystemInit+0x5c>)
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <SystemInit+0x5c>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <SystemInit+0x60>)
 8000c88:	4013      	ands	r3, r2
 8000c8a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c8c:	4a0f      	ldr	r2, [pc, #60]	; (8000ccc <SystemInit+0x5c>)
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <SystemInit+0x5c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c9a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ccc <SystemInit+0x5c>)
 8000c9e:	4b0b      	ldr	r3, [pc, #44]	; (8000ccc <SystemInit+0x5c>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000ca8:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <SystemInit+0x5c>)
 8000caa:	4b08      	ldr	r3, [pc, #32]	; (8000ccc <SystemInit+0x5c>)
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000cb2:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SystemInit+0x5c>)
 8000cb6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000cba:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000cbc:	f000 f80c 	bl	8000cd8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <SystemInit+0x64>)
 8000cc2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cc6:	609a      	str	r2, [r3, #8]
#endif 
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	f8ff0000 	.word	0xf8ff0000
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000cdc:	f000 f802 	bl	8000ce4 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000cf2:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000cf4:	4b39      	ldr	r3, [pc, #228]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cfc:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000cfe:	4b37      	ldr	r3, [pc, #220]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d06:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d103      	bne.n	8000d1c <SetSysClockTo72+0x38>
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000d1a:	d1f0      	bne.n	8000cfe <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000d1c:	4b2f      	ldr	r3, [pc, #188]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d002      	beq.n	8000d2e <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
 8000d2c:	e001      	b.n	8000d32 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b01      	cmp	r3, #1
 8000d36:	d14b      	bne.n	8000dd0 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000d38:	4a29      	ldr	r2, [pc, #164]	; (8000de0 <SetSysClockTo72+0xfc>)
 8000d3a:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <SetSysClockTo72+0xfc>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f043 0310 	orr.w	r3, r3, #16
 8000d42:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000d44:	4a26      	ldr	r2, [pc, #152]	; (8000de0 <SetSysClockTo72+0xfc>)
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <SetSysClockTo72+0xfc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 0303 	bic.w	r3, r3, #3
 8000d4e:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000d50:	4a23      	ldr	r2, [pc, #140]	; (8000de0 <SetSysClockTo72+0xfc>)
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <SetSysClockTo72+0xfc>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f043 0302 	orr.w	r3, r3, #2
 8000d5a:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d5e:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d60:	685b      	ldr	r3, [r3, #4]
 8000d62:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000d64:	4a1d      	ldr	r2, [pc, #116]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d66:	4b1d      	ldr	r3, [pc, #116]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000d6c:	4a1b      	ldr	r2, [pc, #108]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d76:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000d78:	4a18      	ldr	r2, [pc, #96]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000d82:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000d84:	4a15      	ldr	r2, [pc, #84]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000d8e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000d90:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d9a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000d9c:	bf00      	nop
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d0f9      	beq.n	8000d9e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000daa:	4a0c      	ldr	r2, [pc, #48]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000dac:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f023 0303 	bic.w	r3, r3, #3
 8000db4:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000db6:	4a09      	ldr	r2, [pc, #36]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f043 0302 	orr.w	r3, r3, #2
 8000dc0:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000dc2:	bf00      	nop
 8000dc4:	4b05      	ldr	r3, [pc, #20]	; (8000ddc <SetSysClockTo72+0xf8>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	2b08      	cmp	r3, #8
 8000dce:	d1f9      	bne.n	8000dc4 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bc80      	pop	{r7}
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	40021000 	.word	0x40021000
 8000de0:	40022000 	.word	0x40022000

08000de4 <__libc_init_array>:
 8000de4:	b570      	push	{r4, r5, r6, lr}
 8000de6:	2500      	movs	r5, #0
 8000de8:	4e0c      	ldr	r6, [pc, #48]	; (8000e1c <__libc_init_array+0x38>)
 8000dea:	4c0d      	ldr	r4, [pc, #52]	; (8000e20 <__libc_init_array+0x3c>)
 8000dec:	1ba4      	subs	r4, r4, r6
 8000dee:	10a4      	asrs	r4, r4, #2
 8000df0:	42a5      	cmp	r5, r4
 8000df2:	d109      	bne.n	8000e08 <__libc_init_array+0x24>
 8000df4:	f000 f81a 	bl	8000e2c <_init>
 8000df8:	2500      	movs	r5, #0
 8000dfa:	4e0a      	ldr	r6, [pc, #40]	; (8000e24 <__libc_init_array+0x40>)
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <__libc_init_array+0x44>)
 8000dfe:	1ba4      	subs	r4, r4, r6
 8000e00:	10a4      	asrs	r4, r4, #2
 8000e02:	42a5      	cmp	r5, r4
 8000e04:	d105      	bne.n	8000e12 <__libc_init_array+0x2e>
 8000e06:	bd70      	pop	{r4, r5, r6, pc}
 8000e08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e0c:	4798      	blx	r3
 8000e0e:	3501      	adds	r5, #1
 8000e10:	e7ee      	b.n	8000df0 <__libc_init_array+0xc>
 8000e12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e16:	4798      	blx	r3
 8000e18:	3501      	adds	r5, #1
 8000e1a:	e7f2      	b.n	8000e02 <__libc_init_array+0x1e>
 8000e1c:	08000e44 	.word	0x08000e44
 8000e20:	08000e44 	.word	0x08000e44
 8000e24:	08000e44 	.word	0x08000e44
 8000e28:	08000e48 	.word	0x08000e48

08000e2c <_init>:
 8000e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e2e:	bf00      	nop
 8000e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e32:	bc08      	pop	{r3}
 8000e34:	469e      	mov	lr, r3
 8000e36:	4770      	bx	lr

08000e38 <_fini>:
 8000e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3a:	bf00      	nop
 8000e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e3e:	bc08      	pop	{r3}
 8000e40:	469e      	mov	lr, r3
 8000e42:	4770      	bx	lr
